// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consistent_feature.proto

#include "consistent_feature.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdQueryTerm_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsQueryTerm_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_ConsFeaAd_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ConsFeaQuery_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurAdClickedAd_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurAdComponentHistoryAd_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurAdHistoryAd_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurAdStyleHistoryAd_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HisQueryTerm_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HisQueryTermAd_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LastClickQueryTermMatchTitleNumAd_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pre1Bidword_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pre1BidwordAd_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreAndCurQuery_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopClickQueryTerm_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopClickQueryTermAd_consistent_5ffeature_2eproto;
namespace consfea {
class PreAndCurQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreAndCurQuery> _instance;
} _PreAndCurQuery_default_instance_;
class AdQueryTermDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdQueryTerm> _instance;
} _AdQueryTerm_default_instance_;
class AsQueryTermDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsQueryTerm> _instance;
} _AsQueryTerm_default_instance_;
class TopClickQueryTermDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopClickQueryTerm> _instance;
} _TopClickQueryTerm_default_instance_;
class HisQueryTermDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HisQueryTerm> _instance;
} _HisQueryTerm_default_instance_;
class Pre1BidwordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pre1Bidword> _instance;
} _Pre1Bidword_default_instance_;
class HisQueryTermAdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HisQueryTermAd> _instance;
} _HisQueryTermAd_default_instance_;
class CurAdClickedAdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurAdClickedAd> _instance;
} _CurAdClickedAd_default_instance_;
class CurAdHistoryAdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurAdHistoryAd> _instance;
} _CurAdHistoryAd_default_instance_;
class LastClickQueryTermMatchTitleNumAdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LastClickQueryTermMatchTitleNumAd> _instance;
} _LastClickQueryTermMatchTitleNumAd_default_instance_;
class Pre1BidwordAdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pre1BidwordAd> _instance;
} _Pre1BidwordAd_default_instance_;
class TopClickQueryTermAdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopClickQueryTermAd> _instance;
} _TopClickQueryTermAd_default_instance_;
class CurAdStyleHistoryAdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurAdStyleHistoryAd> _instance;
} _CurAdStyleHistoryAd_default_instance_;
class CurAdComponentHistoryAdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurAdComponentHistoryAd> _instance;
} _CurAdComponentHistoryAd_default_instance_;
class ConsFeaQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsFeaQuery> _instance;
} _ConsFeaQuery_default_instance_;
class ConsFeaAdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsFeaAd> _instance;
} _ConsFeaAd_default_instance_;
class ConsFeaFullDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsFeaFull> _instance;
} _ConsFeaFull_default_instance_;
}  // namespace consfea
static void InitDefaultsscc_info_AdQueryTerm_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_AdQueryTerm_default_instance_;
    new (ptr) ::consfea::AdQueryTerm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::AdQueryTerm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdQueryTerm_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdQueryTerm_consistent_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_AsQueryTerm_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_AsQueryTerm_default_instance_;
    new (ptr) ::consfea::AsQueryTerm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::AsQueryTerm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsQueryTerm_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AsQueryTerm_consistent_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_ConsFeaAd_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_ConsFeaAd_default_instance_;
    new (ptr) ::consfea::ConsFeaAd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::ConsFeaAd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_ConsFeaAd_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_ConsFeaAd_consistent_5ffeature_2eproto}, {
      &scc_info_HisQueryTermAd_consistent_5ffeature_2eproto.base,
      &scc_info_CurAdClickedAd_consistent_5ffeature_2eproto.base,
      &scc_info_CurAdHistoryAd_consistent_5ffeature_2eproto.base,
      &scc_info_LastClickQueryTermMatchTitleNumAd_consistent_5ffeature_2eproto.base,
      &scc_info_Pre1BidwordAd_consistent_5ffeature_2eproto.base,
      &scc_info_TopClickQueryTermAd_consistent_5ffeature_2eproto.base,
      &scc_info_CurAdStyleHistoryAd_consistent_5ffeature_2eproto.base,
      &scc_info_CurAdComponentHistoryAd_consistent_5ffeature_2eproto.base,}};

static void InitDefaultsscc_info_ConsFeaFull_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_ConsFeaFull_default_instance_;
    new (ptr) ::consfea::ConsFeaFull();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::ConsFeaFull::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConsFeaFull_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ConsFeaFull_consistent_5ffeature_2eproto}, {
      &scc_info_ConsFeaQuery_consistent_5ffeature_2eproto.base,
      &scc_info_ConsFeaAd_consistent_5ffeature_2eproto.base,}};

static void InitDefaultsscc_info_ConsFeaQuery_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_ConsFeaQuery_default_instance_;
    new (ptr) ::consfea::ConsFeaQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::ConsFeaQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ConsFeaQuery_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ConsFeaQuery_consistent_5ffeature_2eproto}, {
      &scc_info_PreAndCurQuery_consistent_5ffeature_2eproto.base,
      &scc_info_AdQueryTerm_consistent_5ffeature_2eproto.base,
      &scc_info_AsQueryTerm_consistent_5ffeature_2eproto.base,
      &scc_info_HisQueryTerm_consistent_5ffeature_2eproto.base,
      &scc_info_Pre1Bidword_consistent_5ffeature_2eproto.base,
      &scc_info_TopClickQueryTerm_consistent_5ffeature_2eproto.base,}};

static void InitDefaultsscc_info_CurAdClickedAd_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_CurAdClickedAd_default_instance_;
    new (ptr) ::consfea::CurAdClickedAd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::CurAdClickedAd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurAdClickedAd_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CurAdClickedAd_consistent_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_CurAdComponentHistoryAd_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_CurAdComponentHistoryAd_default_instance_;
    new (ptr) ::consfea::CurAdComponentHistoryAd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::CurAdComponentHistoryAd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurAdComponentHistoryAd_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CurAdComponentHistoryAd_consistent_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_CurAdHistoryAd_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_CurAdHistoryAd_default_instance_;
    new (ptr) ::consfea::CurAdHistoryAd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::CurAdHistoryAd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurAdHistoryAd_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CurAdHistoryAd_consistent_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_CurAdStyleHistoryAd_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_CurAdStyleHistoryAd_default_instance_;
    new (ptr) ::consfea::CurAdStyleHistoryAd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::CurAdStyleHistoryAd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurAdStyleHistoryAd_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CurAdStyleHistoryAd_consistent_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_HisQueryTerm_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_HisQueryTerm_default_instance_;
    new (ptr) ::consfea::HisQueryTerm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::HisQueryTerm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HisQueryTerm_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HisQueryTerm_consistent_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_HisQueryTermAd_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_HisQueryTermAd_default_instance_;
    new (ptr) ::consfea::HisQueryTermAd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::HisQueryTermAd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HisQueryTermAd_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HisQueryTermAd_consistent_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_LastClickQueryTermMatchTitleNumAd_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_LastClickQueryTermMatchTitleNumAd_default_instance_;
    new (ptr) ::consfea::LastClickQueryTermMatchTitleNumAd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::LastClickQueryTermMatchTitleNumAd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LastClickQueryTermMatchTitleNumAd_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LastClickQueryTermMatchTitleNumAd_consistent_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_Pre1Bidword_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_Pre1Bidword_default_instance_;
    new (ptr) ::consfea::Pre1Bidword();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::Pre1Bidword::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pre1Bidword_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pre1Bidword_consistent_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_Pre1BidwordAd_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_Pre1BidwordAd_default_instance_;
    new (ptr) ::consfea::Pre1BidwordAd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::Pre1BidwordAd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pre1BidwordAd_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pre1BidwordAd_consistent_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_PreAndCurQuery_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_PreAndCurQuery_default_instance_;
    new (ptr) ::consfea::PreAndCurQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::PreAndCurQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PreAndCurQuery_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PreAndCurQuery_consistent_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_TopClickQueryTerm_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_TopClickQueryTerm_default_instance_;
    new (ptr) ::consfea::TopClickQueryTerm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::TopClickQueryTerm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopClickQueryTerm_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopClickQueryTerm_consistent_5ffeature_2eproto}, {}};

static void InitDefaultsscc_info_TopClickQueryTermAd_consistent_5ffeature_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::consfea::_TopClickQueryTermAd_default_instance_;
    new (ptr) ::consfea::TopClickQueryTermAd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::consfea::TopClickQueryTermAd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopClickQueryTermAd_consistent_5ffeature_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopClickQueryTermAd_consistent_5ffeature_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_consistent_5ffeature_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_consistent_5ffeature_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_consistent_5ffeature_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_consistent_5ffeature_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::consfea::PreAndCurQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::PreAndCurQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::PreAndCurQuery, pre1_query_),
  PROTOBUF_FIELD_OFFSET(::consfea::PreAndCurQuery, query_text_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::consfea::AdQueryTerm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::AdQueryTerm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::AdQueryTerm, ad_query_term_num_),
  PROTOBUF_FIELD_OFFSET(::consfea::AdQueryTerm, ad_query_term_match_query_num_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::consfea::AsQueryTerm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::AsQueryTerm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::AsQueryTerm, as_query_term_num_),
  PROTOBUF_FIELD_OFFSET(::consfea::AsQueryTerm, as_query_term_match_query_num_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::consfea::TopClickQueryTerm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::TopClickQueryTerm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::TopClickQueryTerm, top_click_query_term_num_),
  PROTOBUF_FIELD_OFFSET(::consfea::TopClickQueryTerm, top_click_query_term_match_bidword_num_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::consfea::HisQueryTerm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::HisQueryTerm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::HisQueryTerm, his_query_term_num_),
  PROTOBUF_FIELD_OFFSET(::consfea::HisQueryTerm, his_query_term_match_bidword_num_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::consfea::Pre1Bidword, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::Pre1Bidword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::Pre1Bidword, pre1_bidword_has_clk_),
  PROTOBUF_FIELD_OFFSET(::consfea::Pre1Bidword, bidword_text_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::consfea::HisQueryTermAd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::HisQueryTermAd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::HisQueryTermAd, key_),
  PROTOBUF_FIELD_OFFSET(::consfea::HisQueryTermAd, his_query_term_num_value_),
  PROTOBUF_FIELD_OFFSET(::consfea::HisQueryTermAd, his_query_term_match_bidword_num_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdClickedAd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdClickedAd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdClickedAd, key_),
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdClickedAd, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdHistoryAd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdHistoryAd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdHistoryAd, key_),
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdHistoryAd, value_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::consfea::LastClickQueryTermMatchTitleNumAd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::LastClickQueryTermMatchTitleNumAd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::LastClickQueryTermMatchTitleNumAd, key_),
  PROTOBUF_FIELD_OFFSET(::consfea::LastClickQueryTermMatchTitleNumAd, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::consfea::Pre1BidwordAd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::Pre1BidwordAd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::Pre1BidwordAd, key_),
  PROTOBUF_FIELD_OFFSET(::consfea::Pre1BidwordAd, pre1_bidword_has_clk_value_),
  PROTOBUF_FIELD_OFFSET(::consfea::Pre1BidwordAd, bidword_text_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::consfea::TopClickQueryTermAd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::TopClickQueryTermAd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::TopClickQueryTermAd, key_),
  PROTOBUF_FIELD_OFFSET(::consfea::TopClickQueryTermAd, top_click_query_term_num_value_),
  PROTOBUF_FIELD_OFFSET(::consfea::TopClickQueryTermAd, top_click_query_term_match_bidword_num_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdStyleHistoryAd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdStyleHistoryAd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdStyleHistoryAd, key_),
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdStyleHistoryAd, value_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdComponentHistoryAd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdComponentHistoryAd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdComponentHistoryAd, key_),
  PROTOBUF_FIELD_OFFSET(::consfea::CurAdComponentHistoryAd, value_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, pre5_query_char_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, pre1_query_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, pre_and_cur_query_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, pre1_ad_clk_id_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, pre1_ad_clk_span_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, pre1_search_gap_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, ad_query_term_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, as_query_term_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, ad_query_match_query_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, as_query_match_query_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, history_10_query_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, his_query_term_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, cur_ad_clicked_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, cur_ad_history_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, ad_show_clk_num_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, ad_pos_clk_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, last_click_query_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, last_click_query_term_match_query_num_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, last_click_query_term_match_title_num_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, pre1_ad_clk_gap_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, pre1_bidword_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, top_click_query_term_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, clk_ad_style_info_history_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, cur_ad_style_history_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaQuery, cur_ad_component_history_),
  ~0u,
  0,
  7,
  1,
  2,
  3,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  10,
  4,
  ~0u,
  5,
  ~0u,
  ~0u,
  13,
  14,
  6,
  11,
  12,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaAd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaAd, his_query_term_ad_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaAd, cur_ad_clicked_ad_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaAd, cur_ad_history_ad_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaAd, last_click_query_term_match_title_num_ad_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaAd, pre1_bidword_ad_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaAd, top_click_query_term_ad_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaAd, cur_ad_style_history_ad_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaAd, cur_ad_component_history_ad_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaFull, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaFull, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaFull, pvid_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaFull, query_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaFull, cons_fea_query_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaFull, cons_fea_ad_),
  PROTOBUF_FIELD_OFFSET(::consfea::ConsFeaFull, platform_),
  0,
  1,
  3,
  4,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::consfea::PreAndCurQuery)},
  { 9, 16, sizeof(::consfea::AdQueryTerm)},
  { 18, 25, sizeof(::consfea::AsQueryTerm)},
  { 27, 34, sizeof(::consfea::TopClickQueryTerm)},
  { 36, 43, sizeof(::consfea::HisQueryTerm)},
  { 45, 52, sizeof(::consfea::Pre1Bidword)},
  { 54, 62, sizeof(::consfea::HisQueryTermAd)},
  { 65, 72, sizeof(::consfea::CurAdClickedAd)},
  { 74, 81, sizeof(::consfea::CurAdHistoryAd)},
  { 83, 90, sizeof(::consfea::LastClickQueryTermMatchTitleNumAd)},
  { 92, 100, sizeof(::consfea::Pre1BidwordAd)},
  { 103, 111, sizeof(::consfea::TopClickQueryTermAd)},
  { 114, 121, sizeof(::consfea::CurAdStyleHistoryAd)},
  { 123, 130, sizeof(::consfea::CurAdComponentHistoryAd)},
  { 132, 162, sizeof(::consfea::ConsFeaQuery)},
  { 187, -1, sizeof(::consfea::ConsFeaAd)},
  { 200, 210, sizeof(::consfea::ConsFeaFull)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_PreAndCurQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_AdQueryTerm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_AsQueryTerm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_TopClickQueryTerm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_HisQueryTerm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_Pre1Bidword_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_HisQueryTermAd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_CurAdClickedAd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_CurAdHistoryAd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_LastClickQueryTermMatchTitleNumAd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_Pre1BidwordAd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_TopClickQueryTermAd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_CurAdStyleHistoryAd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_CurAdComponentHistoryAd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_ConsFeaQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_ConsFeaAd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::consfea::_ConsFeaFull_default_instance_),
};

const char descriptor_table_protodef_consistent_5ffeature_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030consistent_feature.proto\022\007consfea\"8\n\016P"
  "reAndCurQuery\022\022\n\npre1_query\030\001 \001(\t\022\022\n\nque"
  "ry_text\030\002 \001(\t\"O\n\013AdQueryTerm\022\031\n\021ad_query"
  "_term_num\030\001 \001(\r\022%\n\035ad_query_term_match_q"
  "uery_num\030\002 \001(\r\"O\n\013AsQueryTerm\022\031\n\021as_quer"
  "y_term_num\030\001 \001(\r\022%\n\035as_query_term_match_"
  "query_num\030\002 \001(\r\"e\n\021TopClickQueryTerm\022 \n\030"
  "top_click_query_term_num\030\001 \001(\r\022.\n&top_cl"
  "ick_query_term_match_bidword_num\030\002 \001(\r\"T"
  "\n\014HisQueryTerm\022\032\n\022his_query_term_num\030\001 \001"
  "(\r\022(\n his_query_term_match_bidword_num\030\002"
  " \001(\r\"A\n\013Pre1Bidword\022\034\n\024pre1_bidword_has_"
  "clk\030\001 \001(\t\022\024\n\014bidword_text\030\002 \001(\t\"o\n\016HisQu"
  "eryTermAd\022\013\n\003key\030\001 \001(\t\022 \n\030his_query_term"
  "_num_value\030\002 \001(\r\022.\n&his_query_term_match"
  "_bidword_num_value\030\003 \001(\r\",\n\016CurAdClicked"
  "Ad\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\",\n\016CurAdH"
  "istoryAd\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \003(\t\"\?\n!"
  "LastClickQueryTermMatchTitleNumAd\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\r\"\\\n\rPre1BidwordAd\022\013"
  "\n\003key\030\001 \001(\t\022\"\n\032pre1_bidword_has_clk_valu"
  "e\030\002 \001(\t\022\032\n\022bidword_text_value\030\003 \001(\t\"\200\001\n\023"
  "TopClickQueryTermAd\022\013\n\003key\030\001 \001(\t\022&\n\036top_"
  "click_query_term_num_value\030\002 \001(\r\0224\n,top_"
  "click_query_term_match_bidword_num_value"
  "\030\003 \001(\r\"1\n\023CurAdStyleHistoryAd\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \003(\t\"5\n\027CurAdComponentHisto"
  "ryAd\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \003(\t\"\320\006\n\014Con"
  "sFeaQuery\022\027\n\017pre5_query_char\030\001 \003(\t\022\022\n\npr"
  "e1_query\030\002 \001(\t\0222\n\021pre_and_cur_query\030\003 \001("
  "\0132\027.consfea.PreAndCurQuery\022\026\n\016pre1_ad_cl"
  "k_id\030\004 \001(\t\022\030\n\020pre1_ad_clk_span\030\005 \001(\t\022\027\n\017"
  "pre1_search_gap\030\006 \001(\t\022+\n\rad_query_term\030\007"
  " \001(\0132\024.consfea.AdQueryTerm\022+\n\ras_query_t"
  "erm\030\010 \001(\0132\024.consfea.AsQueryTerm\022\034\n\024ad_qu"
  "ery_match_query\030\t \003(\r\022\034\n\024as_query_match_"
  "query\030\n \003(\r\022\030\n\020history_10_query\030\013 \003(\t\022-\n"
  "\016his_query_term\030\014 \001(\0132\025.consfea.HisQuery"
  "Term\022\026\n\016cur_ad_clicked\030\r \001(\t\022\026\n\016cur_ad_h"
  "istory\030\016 \003(\t\022\027\n\017ad_show_clk_num\030\017 \001(\t\022\022\n"
  "\nad_pos_clk\030\020 \003(\t\022\030\n\020last_click_query\030\021 "
  "\003(\r\022-\n%last_click_query_term_match_query"
  "_num\030\022 \001(\r\022-\n%last_click_query_term_matc"
  "h_title_num\030\023 \001(\r\022\027\n\017pre1_ad_clk_gap\030\024 \001"
  "(\t\022*\n\014pre1_bidword\030\025 \001(\0132\024.consfea.Pre1B"
  "idword\0228\n\024top_click_query_term\030\026 \001(\0132\032.c"
  "onsfea.TopClickQueryTerm\022!\n\031clk_ad_style"
  "_info_history\030\027 \003(\t\022\034\n\024cur_ad_style_hist"
  "ory\030\030 \003(\t\022 \n\030cur_ad_component_history\030\031 "
  "\003(\t\"\373\003\n\tConsFeaAd\0222\n\021his_query_term_ad\030\001"
  " \003(\0132\027.consfea.HisQueryTermAd\0222\n\021cur_ad_"
  "clicked_ad\030\002 \003(\0132\027.consfea.CurAdClickedA"
  "d\0222\n\021cur_ad_history_ad\030\003 \003(\0132\027.consfea.C"
  "urAdHistoryAd\022\\\n(last_click_query_term_m"
  "atch_title_num_ad\030\004 \003(\0132*.consfea.LastCl"
  "ickQueryTermMatchTitleNumAd\022/\n\017pre1_bidw"
  "ord_ad\030\005 \003(\0132\026.consfea.Pre1BidwordAd\022=\n\027"
  "top_click_query_term_ad\030\006 \003(\0132\034.consfea."
  "TopClickQueryTermAd\022=\n\027cur_ad_style_hist"
  "ory_ad\030\007 \003(\0132\034.consfea.CurAdStyleHistory"
  "Ad\022E\n\033cur_ad_component_history_ad\030\010 \003(\0132"
  " .consfea.CurAdComponentHistoryAd\"\224\001\n\013Co"
  "nsFeaFull\022\014\n\004pvid\030\001 \001(\t\022\r\n\005query\030\002 \001(\t\022-"
  "\n\016cons_fea_query\030\003 \001(\0132\025.consfea.ConsFea"
  "Query\022\'\n\013cons_fea_ad\030\004 \001(\0132\022.consfea.Con"
  "sFeaAd\022\020\n\010platform\030\005 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_consistent_5ffeature_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_consistent_5ffeature_2eproto_sccs[17] = {
  &scc_info_AdQueryTerm_consistent_5ffeature_2eproto.base,
  &scc_info_AsQueryTerm_consistent_5ffeature_2eproto.base,
  &scc_info_ConsFeaAd_consistent_5ffeature_2eproto.base,
  &scc_info_ConsFeaFull_consistent_5ffeature_2eproto.base,
  &scc_info_ConsFeaQuery_consistent_5ffeature_2eproto.base,
  &scc_info_CurAdClickedAd_consistent_5ffeature_2eproto.base,
  &scc_info_CurAdComponentHistoryAd_consistent_5ffeature_2eproto.base,
  &scc_info_CurAdHistoryAd_consistent_5ffeature_2eproto.base,
  &scc_info_CurAdStyleHistoryAd_consistent_5ffeature_2eproto.base,
  &scc_info_HisQueryTerm_consistent_5ffeature_2eproto.base,
  &scc_info_HisQueryTermAd_consistent_5ffeature_2eproto.base,
  &scc_info_LastClickQueryTermMatchTitleNumAd_consistent_5ffeature_2eproto.base,
  &scc_info_Pre1Bidword_consistent_5ffeature_2eproto.base,
  &scc_info_Pre1BidwordAd_consistent_5ffeature_2eproto.base,
  &scc_info_PreAndCurQuery_consistent_5ffeature_2eproto.base,
  &scc_info_TopClickQueryTerm_consistent_5ffeature_2eproto.base,
  &scc_info_TopClickQueryTermAd_consistent_5ffeature_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_consistent_5ffeature_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_consistent_5ffeature_2eproto = {
  false, false, descriptor_table_protodef_consistent_5ffeature_2eproto, "consistent_feature.proto", 2624,
  &descriptor_table_consistent_5ffeature_2eproto_once, descriptor_table_consistent_5ffeature_2eproto_sccs, descriptor_table_consistent_5ffeature_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_consistent_5ffeature_2eproto::offsets,
  file_level_metadata_consistent_5ffeature_2eproto, 17, file_level_enum_descriptors_consistent_5ffeature_2eproto, file_level_service_descriptors_consistent_5ffeature_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_consistent_5ffeature_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_consistent_5ffeature_2eproto)), true);
namespace consfea {

// ===================================================================

void PreAndCurQuery::InitAsDefaultInstance() {
}
class PreAndCurQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<PreAndCurQuery>()._has_bits_);
  static void set_has_pre1_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_query_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PreAndCurQuery::PreAndCurQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.PreAndCurQuery)
}
PreAndCurQuery::PreAndCurQuery(const PreAndCurQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pre1_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pre1_query()) {
    pre1_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pre1_query(),
      GetArena());
  }
  query_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_query_text()) {
    query_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_query_text(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:consfea.PreAndCurQuery)
}

void PreAndCurQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PreAndCurQuery_consistent_5ffeature_2eproto.base);
  pre1_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PreAndCurQuery::~PreAndCurQuery() {
  // @@protoc_insertion_point(destructor:consfea.PreAndCurQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreAndCurQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pre1_query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PreAndCurQuery::ArenaDtor(void* object) {
  PreAndCurQuery* _this = reinterpret_cast< PreAndCurQuery* >(object);
  (void)_this;
}
void PreAndCurQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreAndCurQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreAndCurQuery& PreAndCurQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreAndCurQuery_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void PreAndCurQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.PreAndCurQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pre1_query_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      query_text_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreAndCurQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string pre1_query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pre1_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.PreAndCurQuery.pre1_query");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string query_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_query_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.PreAndCurQuery.query_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreAndCurQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.PreAndCurQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pre1_query = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pre1_query().data(), static_cast<int>(this->_internal_pre1_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.PreAndCurQuery.pre1_query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pre1_query(), target);
  }

  // optional string query_text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_query_text().data(), static_cast<int>(this->_internal_query_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.PreAndCurQuery.query_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_query_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.PreAndCurQuery)
  return target;
}

size_t PreAndCurQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.PreAndCurQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string pre1_query = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pre1_query());
    }

    // optional string query_text = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_query_text());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreAndCurQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.PreAndCurQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const PreAndCurQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreAndCurQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.PreAndCurQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.PreAndCurQuery)
    MergeFrom(*source);
  }
}

void PreAndCurQuery::MergeFrom(const PreAndCurQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.PreAndCurQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pre1_query(from._internal_pre1_query());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_query_text(from._internal_query_text());
    }
  }
}

void PreAndCurQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.PreAndCurQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreAndCurQuery::CopyFrom(const PreAndCurQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.PreAndCurQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreAndCurQuery::IsInitialized() const {
  return true;
}

void PreAndCurQuery::InternalSwap(PreAndCurQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pre1_query_.Swap(&other->pre1_query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_text_.Swap(&other->query_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PreAndCurQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdQueryTerm::InitAsDefaultInstance() {
}
class AdQueryTerm::_Internal {
 public:
  using HasBits = decltype(std::declval<AdQueryTerm>()._has_bits_);
  static void set_has_ad_query_term_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ad_query_term_match_query_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AdQueryTerm::AdQueryTerm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.AdQueryTerm)
}
AdQueryTerm::AdQueryTerm(const AdQueryTerm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ad_query_term_num_, &from.ad_query_term_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&ad_query_term_match_query_num_) -
    reinterpret_cast<char*>(&ad_query_term_num_)) + sizeof(ad_query_term_match_query_num_));
  // @@protoc_insertion_point(copy_constructor:consfea.AdQueryTerm)
}

void AdQueryTerm::SharedCtor() {
  ::memset(&ad_query_term_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ad_query_term_match_query_num_) -
      reinterpret_cast<char*>(&ad_query_term_num_)) + sizeof(ad_query_term_match_query_num_));
}

AdQueryTerm::~AdQueryTerm() {
  // @@protoc_insertion_point(destructor:consfea.AdQueryTerm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdQueryTerm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AdQueryTerm::ArenaDtor(void* object) {
  AdQueryTerm* _this = reinterpret_cast< AdQueryTerm* >(object);
  (void)_this;
}
void AdQueryTerm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdQueryTerm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdQueryTerm& AdQueryTerm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdQueryTerm_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void AdQueryTerm::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.AdQueryTerm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ad_query_term_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ad_query_term_match_query_num_) -
        reinterpret_cast<char*>(&ad_query_term_num_)) + sizeof(ad_query_term_match_query_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdQueryTerm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ad_query_term_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ad_query_term_num(&has_bits);
          ad_query_term_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ad_query_term_match_query_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ad_query_term_match_query_num(&has_bits);
          ad_query_term_match_query_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdQueryTerm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.AdQueryTerm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ad_query_term_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ad_query_term_num(), target);
  }

  // optional uint32 ad_query_term_match_query_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ad_query_term_match_query_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.AdQueryTerm)
  return target;
}

size_t AdQueryTerm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.AdQueryTerm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ad_query_term_num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ad_query_term_num());
    }

    // optional uint32 ad_query_term_match_query_num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ad_query_term_match_query_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdQueryTerm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.AdQueryTerm)
  GOOGLE_DCHECK_NE(&from, this);
  const AdQueryTerm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdQueryTerm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.AdQueryTerm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.AdQueryTerm)
    MergeFrom(*source);
  }
}

void AdQueryTerm::MergeFrom(const AdQueryTerm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.AdQueryTerm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ad_query_term_num_ = from.ad_query_term_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      ad_query_term_match_query_num_ = from.ad_query_term_match_query_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdQueryTerm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.AdQueryTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdQueryTerm::CopyFrom(const AdQueryTerm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.AdQueryTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdQueryTerm::IsInitialized() const {
  return true;
}

void AdQueryTerm::InternalSwap(AdQueryTerm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdQueryTerm, ad_query_term_match_query_num_)
      + sizeof(AdQueryTerm::ad_query_term_match_query_num_)
      - PROTOBUF_FIELD_OFFSET(AdQueryTerm, ad_query_term_num_)>(
          reinterpret_cast<char*>(&ad_query_term_num_),
          reinterpret_cast<char*>(&other->ad_query_term_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdQueryTerm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsQueryTerm::InitAsDefaultInstance() {
}
class AsQueryTerm::_Internal {
 public:
  using HasBits = decltype(std::declval<AsQueryTerm>()._has_bits_);
  static void set_has_as_query_term_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_as_query_term_match_query_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AsQueryTerm::AsQueryTerm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.AsQueryTerm)
}
AsQueryTerm::AsQueryTerm(const AsQueryTerm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&as_query_term_num_, &from.as_query_term_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&as_query_term_match_query_num_) -
    reinterpret_cast<char*>(&as_query_term_num_)) + sizeof(as_query_term_match_query_num_));
  // @@protoc_insertion_point(copy_constructor:consfea.AsQueryTerm)
}

void AsQueryTerm::SharedCtor() {
  ::memset(&as_query_term_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&as_query_term_match_query_num_) -
      reinterpret_cast<char*>(&as_query_term_num_)) + sizeof(as_query_term_match_query_num_));
}

AsQueryTerm::~AsQueryTerm() {
  // @@protoc_insertion_point(destructor:consfea.AsQueryTerm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AsQueryTerm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AsQueryTerm::ArenaDtor(void* object) {
  AsQueryTerm* _this = reinterpret_cast< AsQueryTerm* >(object);
  (void)_this;
}
void AsQueryTerm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AsQueryTerm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsQueryTerm& AsQueryTerm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsQueryTerm_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void AsQueryTerm::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.AsQueryTerm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&as_query_term_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&as_query_term_match_query_num_) -
        reinterpret_cast<char*>(&as_query_term_num_)) + sizeof(as_query_term_match_query_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsQueryTerm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 as_query_term_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_as_query_term_num(&has_bits);
          as_query_term_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 as_query_term_match_query_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_as_query_term_match_query_num(&has_bits);
          as_query_term_match_query_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsQueryTerm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.AsQueryTerm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 as_query_term_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_as_query_term_num(), target);
  }

  // optional uint32 as_query_term_match_query_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_as_query_term_match_query_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.AsQueryTerm)
  return target;
}

size_t AsQueryTerm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.AsQueryTerm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 as_query_term_num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_as_query_term_num());
    }

    // optional uint32 as_query_term_match_query_num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_as_query_term_match_query_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsQueryTerm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.AsQueryTerm)
  GOOGLE_DCHECK_NE(&from, this);
  const AsQueryTerm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsQueryTerm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.AsQueryTerm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.AsQueryTerm)
    MergeFrom(*source);
  }
}

void AsQueryTerm::MergeFrom(const AsQueryTerm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.AsQueryTerm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      as_query_term_num_ = from.as_query_term_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      as_query_term_match_query_num_ = from.as_query_term_match_query_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AsQueryTerm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.AsQueryTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsQueryTerm::CopyFrom(const AsQueryTerm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.AsQueryTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsQueryTerm::IsInitialized() const {
  return true;
}

void AsQueryTerm::InternalSwap(AsQueryTerm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AsQueryTerm, as_query_term_match_query_num_)
      + sizeof(AsQueryTerm::as_query_term_match_query_num_)
      - PROTOBUF_FIELD_OFFSET(AsQueryTerm, as_query_term_num_)>(
          reinterpret_cast<char*>(&as_query_term_num_),
          reinterpret_cast<char*>(&other->as_query_term_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AsQueryTerm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopClickQueryTerm::InitAsDefaultInstance() {
}
class TopClickQueryTerm::_Internal {
 public:
  using HasBits = decltype(std::declval<TopClickQueryTerm>()._has_bits_);
  static void set_has_top_click_query_term_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_click_query_term_match_bidword_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TopClickQueryTerm::TopClickQueryTerm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.TopClickQueryTerm)
}
TopClickQueryTerm::TopClickQueryTerm(const TopClickQueryTerm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&top_click_query_term_num_, &from.top_click_query_term_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_click_query_term_match_bidword_num_) -
    reinterpret_cast<char*>(&top_click_query_term_num_)) + sizeof(top_click_query_term_match_bidword_num_));
  // @@protoc_insertion_point(copy_constructor:consfea.TopClickQueryTerm)
}

void TopClickQueryTerm::SharedCtor() {
  ::memset(&top_click_query_term_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_click_query_term_match_bidword_num_) -
      reinterpret_cast<char*>(&top_click_query_term_num_)) + sizeof(top_click_query_term_match_bidword_num_));
}

TopClickQueryTerm::~TopClickQueryTerm() {
  // @@protoc_insertion_point(destructor:consfea.TopClickQueryTerm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopClickQueryTerm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TopClickQueryTerm::ArenaDtor(void* object) {
  TopClickQueryTerm* _this = reinterpret_cast< TopClickQueryTerm* >(object);
  (void)_this;
}
void TopClickQueryTerm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopClickQueryTerm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopClickQueryTerm& TopClickQueryTerm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopClickQueryTerm_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void TopClickQueryTerm::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.TopClickQueryTerm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&top_click_query_term_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&top_click_query_term_match_bidword_num_) -
        reinterpret_cast<char*>(&top_click_query_term_num_)) + sizeof(top_click_query_term_match_bidword_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopClickQueryTerm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 top_click_query_term_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_top_click_query_term_num(&has_bits);
          top_click_query_term_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 top_click_query_term_match_bidword_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_top_click_query_term_match_bidword_num(&has_bits);
          top_click_query_term_match_bidword_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopClickQueryTerm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.TopClickQueryTerm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 top_click_query_term_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_top_click_query_term_num(), target);
  }

  // optional uint32 top_click_query_term_match_bidword_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_top_click_query_term_match_bidword_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.TopClickQueryTerm)
  return target;
}

size_t TopClickQueryTerm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.TopClickQueryTerm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 top_click_query_term_num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_top_click_query_term_num());
    }

    // optional uint32 top_click_query_term_match_bidword_num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_top_click_query_term_match_bidword_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopClickQueryTerm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.TopClickQueryTerm)
  GOOGLE_DCHECK_NE(&from, this);
  const TopClickQueryTerm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopClickQueryTerm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.TopClickQueryTerm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.TopClickQueryTerm)
    MergeFrom(*source);
  }
}

void TopClickQueryTerm::MergeFrom(const TopClickQueryTerm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.TopClickQueryTerm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      top_click_query_term_num_ = from.top_click_query_term_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_click_query_term_match_bidword_num_ = from.top_click_query_term_match_bidword_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TopClickQueryTerm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.TopClickQueryTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopClickQueryTerm::CopyFrom(const TopClickQueryTerm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.TopClickQueryTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopClickQueryTerm::IsInitialized() const {
  return true;
}

void TopClickQueryTerm::InternalSwap(TopClickQueryTerm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopClickQueryTerm, top_click_query_term_match_bidword_num_)
      + sizeof(TopClickQueryTerm::top_click_query_term_match_bidword_num_)
      - PROTOBUF_FIELD_OFFSET(TopClickQueryTerm, top_click_query_term_num_)>(
          reinterpret_cast<char*>(&top_click_query_term_num_),
          reinterpret_cast<char*>(&other->top_click_query_term_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopClickQueryTerm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HisQueryTerm::InitAsDefaultInstance() {
}
class HisQueryTerm::_Internal {
 public:
  using HasBits = decltype(std::declval<HisQueryTerm>()._has_bits_);
  static void set_has_his_query_term_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_his_query_term_match_bidword_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HisQueryTerm::HisQueryTerm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.HisQueryTerm)
}
HisQueryTerm::HisQueryTerm(const HisQueryTerm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&his_query_term_num_, &from.his_query_term_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&his_query_term_match_bidword_num_) -
    reinterpret_cast<char*>(&his_query_term_num_)) + sizeof(his_query_term_match_bidword_num_));
  // @@protoc_insertion_point(copy_constructor:consfea.HisQueryTerm)
}

void HisQueryTerm::SharedCtor() {
  ::memset(&his_query_term_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&his_query_term_match_bidword_num_) -
      reinterpret_cast<char*>(&his_query_term_num_)) + sizeof(his_query_term_match_bidword_num_));
}

HisQueryTerm::~HisQueryTerm() {
  // @@protoc_insertion_point(destructor:consfea.HisQueryTerm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HisQueryTerm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HisQueryTerm::ArenaDtor(void* object) {
  HisQueryTerm* _this = reinterpret_cast< HisQueryTerm* >(object);
  (void)_this;
}
void HisQueryTerm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HisQueryTerm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HisQueryTerm& HisQueryTerm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HisQueryTerm_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void HisQueryTerm::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.HisQueryTerm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&his_query_term_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&his_query_term_match_bidword_num_) -
        reinterpret_cast<char*>(&his_query_term_num_)) + sizeof(his_query_term_match_bidword_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HisQueryTerm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 his_query_term_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_his_query_term_num(&has_bits);
          his_query_term_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 his_query_term_match_bidword_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_his_query_term_match_bidword_num(&has_bits);
          his_query_term_match_bidword_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HisQueryTerm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.HisQueryTerm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 his_query_term_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_his_query_term_num(), target);
  }

  // optional uint32 his_query_term_match_bidword_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_his_query_term_match_bidword_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.HisQueryTerm)
  return target;
}

size_t HisQueryTerm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.HisQueryTerm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 his_query_term_num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_his_query_term_num());
    }

    // optional uint32 his_query_term_match_bidword_num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_his_query_term_match_bidword_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HisQueryTerm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.HisQueryTerm)
  GOOGLE_DCHECK_NE(&from, this);
  const HisQueryTerm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HisQueryTerm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.HisQueryTerm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.HisQueryTerm)
    MergeFrom(*source);
  }
}

void HisQueryTerm::MergeFrom(const HisQueryTerm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.HisQueryTerm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      his_query_term_num_ = from.his_query_term_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      his_query_term_match_bidword_num_ = from.his_query_term_match_bidword_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HisQueryTerm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.HisQueryTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HisQueryTerm::CopyFrom(const HisQueryTerm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.HisQueryTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HisQueryTerm::IsInitialized() const {
  return true;
}

void HisQueryTerm::InternalSwap(HisQueryTerm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HisQueryTerm, his_query_term_match_bidword_num_)
      + sizeof(HisQueryTerm::his_query_term_match_bidword_num_)
      - PROTOBUF_FIELD_OFFSET(HisQueryTerm, his_query_term_num_)>(
          reinterpret_cast<char*>(&his_query_term_num_),
          reinterpret_cast<char*>(&other->his_query_term_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HisQueryTerm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pre1Bidword::InitAsDefaultInstance() {
}
class Pre1Bidword::_Internal {
 public:
  using HasBits = decltype(std::declval<Pre1Bidword>()._has_bits_);
  static void set_has_pre1_bidword_has_clk(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bidword_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Pre1Bidword::Pre1Bidword(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.Pre1Bidword)
}
Pre1Bidword::Pre1Bidword(const Pre1Bidword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pre1_bidword_has_clk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pre1_bidword_has_clk()) {
    pre1_bidword_has_clk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pre1_bidword_has_clk(),
      GetArena());
  }
  bidword_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bidword_text()) {
    bidword_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bidword_text(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:consfea.Pre1Bidword)
}

void Pre1Bidword::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pre1Bidword_consistent_5ffeature_2eproto.base);
  pre1_bidword_has_clk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bidword_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Pre1Bidword::~Pre1Bidword() {
  // @@protoc_insertion_point(destructor:consfea.Pre1Bidword)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pre1Bidword::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pre1_bidword_has_clk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bidword_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pre1Bidword::ArenaDtor(void* object) {
  Pre1Bidword* _this = reinterpret_cast< Pre1Bidword* >(object);
  (void)_this;
}
void Pre1Bidword::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pre1Bidword::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pre1Bidword& Pre1Bidword::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pre1Bidword_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void Pre1Bidword::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.Pre1Bidword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pre1_bidword_has_clk_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bidword_text_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pre1Bidword::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string pre1_bidword_has_clk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pre1_bidword_has_clk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.Pre1Bidword.pre1_bidword_has_clk");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bidword_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bidword_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.Pre1Bidword.bidword_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pre1Bidword::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.Pre1Bidword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pre1_bidword_has_clk = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pre1_bidword_has_clk().data(), static_cast<int>(this->_internal_pre1_bidword_has_clk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.Pre1Bidword.pre1_bidword_has_clk");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pre1_bidword_has_clk(), target);
  }

  // optional string bidword_text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bidword_text().data(), static_cast<int>(this->_internal_bidword_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.Pre1Bidword.bidword_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bidword_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.Pre1Bidword)
  return target;
}

size_t Pre1Bidword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.Pre1Bidword)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string pre1_bidword_has_clk = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pre1_bidword_has_clk());
    }

    // optional string bidword_text = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bidword_text());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pre1Bidword::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.Pre1Bidword)
  GOOGLE_DCHECK_NE(&from, this);
  const Pre1Bidword* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pre1Bidword>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.Pre1Bidword)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.Pre1Bidword)
    MergeFrom(*source);
  }
}

void Pre1Bidword::MergeFrom(const Pre1Bidword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.Pre1Bidword)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pre1_bidword_has_clk(from._internal_pre1_bidword_has_clk());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bidword_text(from._internal_bidword_text());
    }
  }
}

void Pre1Bidword::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.Pre1Bidword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pre1Bidword::CopyFrom(const Pre1Bidword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.Pre1Bidword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pre1Bidword::IsInitialized() const {
  return true;
}

void Pre1Bidword::InternalSwap(Pre1Bidword* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pre1_bidword_has_clk_.Swap(&other->pre1_bidword_has_clk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bidword_text_.Swap(&other->bidword_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Pre1Bidword::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HisQueryTermAd::InitAsDefaultInstance() {
}
class HisQueryTermAd::_Internal {
 public:
  using HasBits = decltype(std::declval<HisQueryTermAd>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_his_query_term_num_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_his_query_term_match_bidword_num_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HisQueryTermAd::HisQueryTermAd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.HisQueryTermAd)
}
HisQueryTermAd::HisQueryTermAd(const HisQueryTermAd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  ::memcpy(&his_query_term_num_value_, &from.his_query_term_num_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&his_query_term_match_bidword_num_value_) -
    reinterpret_cast<char*>(&his_query_term_num_value_)) + sizeof(his_query_term_match_bidword_num_value_));
  // @@protoc_insertion_point(copy_constructor:consfea.HisQueryTermAd)
}

void HisQueryTermAd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HisQueryTermAd_consistent_5ffeature_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&his_query_term_num_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&his_query_term_match_bidword_num_value_) -
      reinterpret_cast<char*>(&his_query_term_num_value_)) + sizeof(his_query_term_match_bidword_num_value_));
}

HisQueryTermAd::~HisQueryTermAd() {
  // @@protoc_insertion_point(destructor:consfea.HisQueryTermAd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HisQueryTermAd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HisQueryTermAd::ArenaDtor(void* object) {
  HisQueryTermAd* _this = reinterpret_cast< HisQueryTermAd* >(object);
  (void)_this;
}
void HisQueryTermAd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HisQueryTermAd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HisQueryTermAd& HisQueryTermAd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HisQueryTermAd_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void HisQueryTermAd::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.HisQueryTermAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&his_query_term_num_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&his_query_term_match_bidword_num_value_) -
        reinterpret_cast<char*>(&his_query_term_num_value_)) + sizeof(his_query_term_match_bidword_num_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HisQueryTermAd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.HisQueryTermAd.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 his_query_term_num_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_his_query_term_num_value(&has_bits);
          his_query_term_num_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 his_query_term_match_bidword_num_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_his_query_term_match_bidword_num_value(&has_bits);
          his_query_term_match_bidword_num_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HisQueryTermAd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.HisQueryTermAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.HisQueryTermAd.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional uint32 his_query_term_num_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_his_query_term_num_value(), target);
  }

  // optional uint32 his_query_term_match_bidword_num_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_his_query_term_match_bidword_num_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.HisQueryTermAd)
  return target;
}

size_t HisQueryTermAd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.HisQueryTermAd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional uint32 his_query_term_num_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_his_query_term_num_value());
    }

    // optional uint32 his_query_term_match_bidword_num_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_his_query_term_match_bidword_num_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HisQueryTermAd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.HisQueryTermAd)
  GOOGLE_DCHECK_NE(&from, this);
  const HisQueryTermAd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HisQueryTermAd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.HisQueryTermAd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.HisQueryTermAd)
    MergeFrom(*source);
  }
}

void HisQueryTermAd::MergeFrom(const HisQueryTermAd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.HisQueryTermAd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      his_query_term_num_value_ = from.his_query_term_num_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      his_query_term_match_bidword_num_value_ = from.his_query_term_match_bidword_num_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HisQueryTermAd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.HisQueryTermAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HisQueryTermAd::CopyFrom(const HisQueryTermAd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.HisQueryTermAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HisQueryTermAd::IsInitialized() const {
  return true;
}

void HisQueryTermAd::InternalSwap(HisQueryTermAd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HisQueryTermAd, his_query_term_match_bidword_num_value_)
      + sizeof(HisQueryTermAd::his_query_term_match_bidword_num_value_)
      - PROTOBUF_FIELD_OFFSET(HisQueryTermAd, his_query_term_num_value_)>(
          reinterpret_cast<char*>(&his_query_term_num_value_),
          reinterpret_cast<char*>(&other->his_query_term_num_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HisQueryTermAd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurAdClickedAd::InitAsDefaultInstance() {
}
class CurAdClickedAd::_Internal {
 public:
  using HasBits = decltype(std::declval<CurAdClickedAd>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CurAdClickedAd::CurAdClickedAd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.CurAdClickedAd)
}
CurAdClickedAd::CurAdClickedAd(const CurAdClickedAd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:consfea.CurAdClickedAd)
}

void CurAdClickedAd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurAdClickedAd_consistent_5ffeature_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CurAdClickedAd::~CurAdClickedAd() {
  // @@protoc_insertion_point(destructor:consfea.CurAdClickedAd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurAdClickedAd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurAdClickedAd::ArenaDtor(void* object) {
  CurAdClickedAd* _this = reinterpret_cast< CurAdClickedAd* >(object);
  (void)_this;
}
void CurAdClickedAd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurAdClickedAd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurAdClickedAd& CurAdClickedAd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurAdClickedAd_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void CurAdClickedAd::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.CurAdClickedAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurAdClickedAd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.CurAdClickedAd.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.CurAdClickedAd.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurAdClickedAd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.CurAdClickedAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.CurAdClickedAd.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.CurAdClickedAd.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.CurAdClickedAd)
  return target;
}

size_t CurAdClickedAd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.CurAdClickedAd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurAdClickedAd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.CurAdClickedAd)
  GOOGLE_DCHECK_NE(&from, this);
  const CurAdClickedAd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurAdClickedAd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.CurAdClickedAd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.CurAdClickedAd)
    MergeFrom(*source);
  }
}

void CurAdClickedAd::MergeFrom(const CurAdClickedAd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.CurAdClickedAd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void CurAdClickedAd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.CurAdClickedAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurAdClickedAd::CopyFrom(const CurAdClickedAd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.CurAdClickedAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurAdClickedAd::IsInitialized() const {
  return true;
}

void CurAdClickedAd::InternalSwap(CurAdClickedAd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CurAdClickedAd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurAdHistoryAd::InitAsDefaultInstance() {
}
class CurAdHistoryAd::_Internal {
 public:
  using HasBits = decltype(std::declval<CurAdHistoryAd>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CurAdHistoryAd::CurAdHistoryAd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.CurAdHistoryAd)
}
CurAdHistoryAd::CurAdHistoryAd(const CurAdHistoryAd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:consfea.CurAdHistoryAd)
}

void CurAdHistoryAd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurAdHistoryAd_consistent_5ffeature_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CurAdHistoryAd::~CurAdHistoryAd() {
  // @@protoc_insertion_point(destructor:consfea.CurAdHistoryAd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurAdHistoryAd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurAdHistoryAd::ArenaDtor(void* object) {
  CurAdHistoryAd* _this = reinterpret_cast< CurAdHistoryAd* >(object);
  (void)_this;
}
void CurAdHistoryAd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurAdHistoryAd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurAdHistoryAd& CurAdHistoryAd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurAdHistoryAd_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void CurAdHistoryAd::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.CurAdHistoryAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurAdHistoryAd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.CurAdHistoryAd.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.CurAdHistoryAd.value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurAdHistoryAd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.CurAdHistoryAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.CurAdHistoryAd.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.CurAdHistoryAd.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.CurAdHistoryAd)
  return target;
}

size_t CurAdHistoryAd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.CurAdHistoryAd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  // optional string key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurAdHistoryAd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.CurAdHistoryAd)
  GOOGLE_DCHECK_NE(&from, this);
  const CurAdHistoryAd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurAdHistoryAd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.CurAdHistoryAd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.CurAdHistoryAd)
    MergeFrom(*source);
  }
}

void CurAdHistoryAd::MergeFrom(const CurAdHistoryAd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.CurAdHistoryAd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from._internal_has_key()) {
    _internal_set_key(from._internal_key());
  }
}

void CurAdHistoryAd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.CurAdHistoryAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurAdHistoryAd::CopyFrom(const CurAdHistoryAd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.CurAdHistoryAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurAdHistoryAd::IsInitialized() const {
  return true;
}

void CurAdHistoryAd::InternalSwap(CurAdHistoryAd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CurAdHistoryAd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LastClickQueryTermMatchTitleNumAd::InitAsDefaultInstance() {
}
class LastClickQueryTermMatchTitleNumAd::_Internal {
 public:
  using HasBits = decltype(std::declval<LastClickQueryTermMatchTitleNumAd>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LastClickQueryTermMatchTitleNumAd::LastClickQueryTermMatchTitleNumAd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.LastClickQueryTermMatchTitleNumAd)
}
LastClickQueryTermMatchTitleNumAd::LastClickQueryTermMatchTitleNumAd(const LastClickQueryTermMatchTitleNumAd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:consfea.LastClickQueryTermMatchTitleNumAd)
}

void LastClickQueryTermMatchTitleNumAd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LastClickQueryTermMatchTitleNumAd_consistent_5ffeature_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = 0u;
}

LastClickQueryTermMatchTitleNumAd::~LastClickQueryTermMatchTitleNumAd() {
  // @@protoc_insertion_point(destructor:consfea.LastClickQueryTermMatchTitleNumAd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LastClickQueryTermMatchTitleNumAd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LastClickQueryTermMatchTitleNumAd::ArenaDtor(void* object) {
  LastClickQueryTermMatchTitleNumAd* _this = reinterpret_cast< LastClickQueryTermMatchTitleNumAd* >(object);
  (void)_this;
}
void LastClickQueryTermMatchTitleNumAd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LastClickQueryTermMatchTitleNumAd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LastClickQueryTermMatchTitleNumAd& LastClickQueryTermMatchTitleNumAd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LastClickQueryTermMatchTitleNumAd_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void LastClickQueryTermMatchTitleNumAd::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.LastClickQueryTermMatchTitleNumAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  value_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastClickQueryTermMatchTitleNumAd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.LastClickQueryTermMatchTitleNumAd.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LastClickQueryTermMatchTitleNumAd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.LastClickQueryTermMatchTitleNumAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.LastClickQueryTermMatchTitleNumAd.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.LastClickQueryTermMatchTitleNumAd)
  return target;
}

size_t LastClickQueryTermMatchTitleNumAd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.LastClickQueryTermMatchTitleNumAd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LastClickQueryTermMatchTitleNumAd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.LastClickQueryTermMatchTitleNumAd)
  GOOGLE_DCHECK_NE(&from, this);
  const LastClickQueryTermMatchTitleNumAd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LastClickQueryTermMatchTitleNumAd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.LastClickQueryTermMatchTitleNumAd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.LastClickQueryTermMatchTitleNumAd)
    MergeFrom(*source);
  }
}

void LastClickQueryTermMatchTitleNumAd::MergeFrom(const LastClickQueryTermMatchTitleNumAd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.LastClickQueryTermMatchTitleNumAd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LastClickQueryTermMatchTitleNumAd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.LastClickQueryTermMatchTitleNumAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastClickQueryTermMatchTitleNumAd::CopyFrom(const LastClickQueryTermMatchTitleNumAd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.LastClickQueryTermMatchTitleNumAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastClickQueryTermMatchTitleNumAd::IsInitialized() const {
  return true;
}

void LastClickQueryTermMatchTitleNumAd::InternalSwap(LastClickQueryTermMatchTitleNumAd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LastClickQueryTermMatchTitleNumAd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pre1BidwordAd::InitAsDefaultInstance() {
}
class Pre1BidwordAd::_Internal {
 public:
  using HasBits = decltype(std::declval<Pre1BidwordAd>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pre1_bidword_has_clk_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bidword_text_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Pre1BidwordAd::Pre1BidwordAd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.Pre1BidwordAd)
}
Pre1BidwordAd::Pre1BidwordAd(const Pre1BidwordAd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  pre1_bidword_has_clk_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pre1_bidword_has_clk_value()) {
    pre1_bidword_has_clk_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pre1_bidword_has_clk_value(),
      GetArena());
  }
  bidword_text_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bidword_text_value()) {
    bidword_text_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bidword_text_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:consfea.Pre1BidwordAd)
}

void Pre1BidwordAd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pre1BidwordAd_consistent_5ffeature_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre1_bidword_has_clk_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bidword_text_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Pre1BidwordAd::~Pre1BidwordAd() {
  // @@protoc_insertion_point(destructor:consfea.Pre1BidwordAd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pre1BidwordAd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre1_bidword_has_clk_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bidword_text_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pre1BidwordAd::ArenaDtor(void* object) {
  Pre1BidwordAd* _this = reinterpret_cast< Pre1BidwordAd* >(object);
  (void)_this;
}
void Pre1BidwordAd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pre1BidwordAd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pre1BidwordAd& Pre1BidwordAd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pre1BidwordAd_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void Pre1BidwordAd::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.Pre1BidwordAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pre1_bidword_has_clk_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      bidword_text_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pre1BidwordAd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.Pre1BidwordAd.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pre1_bidword_has_clk_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pre1_bidword_has_clk_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.Pre1BidwordAd.pre1_bidword_has_clk_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bidword_text_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bidword_text_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.Pre1BidwordAd.bidword_text_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pre1BidwordAd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.Pre1BidwordAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.Pre1BidwordAd.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string pre1_bidword_has_clk_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pre1_bidword_has_clk_value().data(), static_cast<int>(this->_internal_pre1_bidword_has_clk_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.Pre1BidwordAd.pre1_bidword_has_clk_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pre1_bidword_has_clk_value(), target);
  }

  // optional string bidword_text_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bidword_text_value().data(), static_cast<int>(this->_internal_bidword_text_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.Pre1BidwordAd.bidword_text_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bidword_text_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.Pre1BidwordAd)
  return target;
}

size_t Pre1BidwordAd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.Pre1BidwordAd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string pre1_bidword_has_clk_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pre1_bidword_has_clk_value());
    }

    // optional string bidword_text_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bidword_text_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pre1BidwordAd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.Pre1BidwordAd)
  GOOGLE_DCHECK_NE(&from, this);
  const Pre1BidwordAd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pre1BidwordAd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.Pre1BidwordAd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.Pre1BidwordAd)
    MergeFrom(*source);
  }
}

void Pre1BidwordAd::MergeFrom(const Pre1BidwordAd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.Pre1BidwordAd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pre1_bidword_has_clk_value(from._internal_pre1_bidword_has_clk_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_bidword_text_value(from._internal_bidword_text_value());
    }
  }
}

void Pre1BidwordAd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.Pre1BidwordAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pre1BidwordAd::CopyFrom(const Pre1BidwordAd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.Pre1BidwordAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pre1BidwordAd::IsInitialized() const {
  return true;
}

void Pre1BidwordAd::InternalSwap(Pre1BidwordAd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pre1_bidword_has_clk_value_.Swap(&other->pre1_bidword_has_clk_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bidword_text_value_.Swap(&other->bidword_text_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Pre1BidwordAd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopClickQueryTermAd::InitAsDefaultInstance() {
}
class TopClickQueryTermAd::_Internal {
 public:
  using HasBits = decltype(std::declval<TopClickQueryTermAd>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_click_query_term_num_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_top_click_query_term_match_bidword_num_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TopClickQueryTermAd::TopClickQueryTermAd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.TopClickQueryTermAd)
}
TopClickQueryTermAd::TopClickQueryTermAd(const TopClickQueryTermAd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  ::memcpy(&top_click_query_term_num_value_, &from.top_click_query_term_num_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&top_click_query_term_match_bidword_num_value_) -
    reinterpret_cast<char*>(&top_click_query_term_num_value_)) + sizeof(top_click_query_term_match_bidword_num_value_));
  // @@protoc_insertion_point(copy_constructor:consfea.TopClickQueryTermAd)
}

void TopClickQueryTermAd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopClickQueryTermAd_consistent_5ffeature_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&top_click_query_term_num_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&top_click_query_term_match_bidword_num_value_) -
      reinterpret_cast<char*>(&top_click_query_term_num_value_)) + sizeof(top_click_query_term_match_bidword_num_value_));
}

TopClickQueryTermAd::~TopClickQueryTermAd() {
  // @@protoc_insertion_point(destructor:consfea.TopClickQueryTermAd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopClickQueryTermAd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TopClickQueryTermAd::ArenaDtor(void* object) {
  TopClickQueryTermAd* _this = reinterpret_cast< TopClickQueryTermAd* >(object);
  (void)_this;
}
void TopClickQueryTermAd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopClickQueryTermAd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopClickQueryTermAd& TopClickQueryTermAd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopClickQueryTermAd_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void TopClickQueryTermAd::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.TopClickQueryTermAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&top_click_query_term_num_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&top_click_query_term_match_bidword_num_value_) -
        reinterpret_cast<char*>(&top_click_query_term_num_value_)) + sizeof(top_click_query_term_match_bidword_num_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopClickQueryTermAd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.TopClickQueryTermAd.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 top_click_query_term_num_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_top_click_query_term_num_value(&has_bits);
          top_click_query_term_num_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 top_click_query_term_match_bidword_num_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_top_click_query_term_match_bidword_num_value(&has_bits);
          top_click_query_term_match_bidword_num_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopClickQueryTermAd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.TopClickQueryTermAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.TopClickQueryTermAd.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional uint32 top_click_query_term_num_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_top_click_query_term_num_value(), target);
  }

  // optional uint32 top_click_query_term_match_bidword_num_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_top_click_query_term_match_bidword_num_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.TopClickQueryTermAd)
  return target;
}

size_t TopClickQueryTermAd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.TopClickQueryTermAd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional uint32 top_click_query_term_num_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_top_click_query_term_num_value());
    }

    // optional uint32 top_click_query_term_match_bidword_num_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_top_click_query_term_match_bidword_num_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopClickQueryTermAd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.TopClickQueryTermAd)
  GOOGLE_DCHECK_NE(&from, this);
  const TopClickQueryTermAd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopClickQueryTermAd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.TopClickQueryTermAd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.TopClickQueryTermAd)
    MergeFrom(*source);
  }
}

void TopClickQueryTermAd::MergeFrom(const TopClickQueryTermAd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.TopClickQueryTermAd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      top_click_query_term_num_value_ = from.top_click_query_term_num_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      top_click_query_term_match_bidword_num_value_ = from.top_click_query_term_match_bidword_num_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TopClickQueryTermAd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.TopClickQueryTermAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopClickQueryTermAd::CopyFrom(const TopClickQueryTermAd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.TopClickQueryTermAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopClickQueryTermAd::IsInitialized() const {
  return true;
}

void TopClickQueryTermAd::InternalSwap(TopClickQueryTermAd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopClickQueryTermAd, top_click_query_term_match_bidword_num_value_)
      + sizeof(TopClickQueryTermAd::top_click_query_term_match_bidword_num_value_)
      - PROTOBUF_FIELD_OFFSET(TopClickQueryTermAd, top_click_query_term_num_value_)>(
          reinterpret_cast<char*>(&top_click_query_term_num_value_),
          reinterpret_cast<char*>(&other->top_click_query_term_num_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopClickQueryTermAd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurAdStyleHistoryAd::InitAsDefaultInstance() {
}
class CurAdStyleHistoryAd::_Internal {
 public:
  using HasBits = decltype(std::declval<CurAdStyleHistoryAd>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CurAdStyleHistoryAd::CurAdStyleHistoryAd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.CurAdStyleHistoryAd)
}
CurAdStyleHistoryAd::CurAdStyleHistoryAd(const CurAdStyleHistoryAd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:consfea.CurAdStyleHistoryAd)
}

void CurAdStyleHistoryAd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurAdStyleHistoryAd_consistent_5ffeature_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CurAdStyleHistoryAd::~CurAdStyleHistoryAd() {
  // @@protoc_insertion_point(destructor:consfea.CurAdStyleHistoryAd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurAdStyleHistoryAd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurAdStyleHistoryAd::ArenaDtor(void* object) {
  CurAdStyleHistoryAd* _this = reinterpret_cast< CurAdStyleHistoryAd* >(object);
  (void)_this;
}
void CurAdStyleHistoryAd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurAdStyleHistoryAd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurAdStyleHistoryAd& CurAdStyleHistoryAd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurAdStyleHistoryAd_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void CurAdStyleHistoryAd::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.CurAdStyleHistoryAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurAdStyleHistoryAd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.CurAdStyleHistoryAd.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.CurAdStyleHistoryAd.value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurAdStyleHistoryAd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.CurAdStyleHistoryAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.CurAdStyleHistoryAd.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.CurAdStyleHistoryAd.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.CurAdStyleHistoryAd)
  return target;
}

size_t CurAdStyleHistoryAd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.CurAdStyleHistoryAd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  // optional string key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurAdStyleHistoryAd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.CurAdStyleHistoryAd)
  GOOGLE_DCHECK_NE(&from, this);
  const CurAdStyleHistoryAd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurAdStyleHistoryAd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.CurAdStyleHistoryAd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.CurAdStyleHistoryAd)
    MergeFrom(*source);
  }
}

void CurAdStyleHistoryAd::MergeFrom(const CurAdStyleHistoryAd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.CurAdStyleHistoryAd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from._internal_has_key()) {
    _internal_set_key(from._internal_key());
  }
}

void CurAdStyleHistoryAd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.CurAdStyleHistoryAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurAdStyleHistoryAd::CopyFrom(const CurAdStyleHistoryAd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.CurAdStyleHistoryAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurAdStyleHistoryAd::IsInitialized() const {
  return true;
}

void CurAdStyleHistoryAd::InternalSwap(CurAdStyleHistoryAd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CurAdStyleHistoryAd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurAdComponentHistoryAd::InitAsDefaultInstance() {
}
class CurAdComponentHistoryAd::_Internal {
 public:
  using HasBits = decltype(std::declval<CurAdComponentHistoryAd>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CurAdComponentHistoryAd::CurAdComponentHistoryAd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.CurAdComponentHistoryAd)
}
CurAdComponentHistoryAd::CurAdComponentHistoryAd(const CurAdComponentHistoryAd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:consfea.CurAdComponentHistoryAd)
}

void CurAdComponentHistoryAd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurAdComponentHistoryAd_consistent_5ffeature_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CurAdComponentHistoryAd::~CurAdComponentHistoryAd() {
  // @@protoc_insertion_point(destructor:consfea.CurAdComponentHistoryAd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurAdComponentHistoryAd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurAdComponentHistoryAd::ArenaDtor(void* object) {
  CurAdComponentHistoryAd* _this = reinterpret_cast< CurAdComponentHistoryAd* >(object);
  (void)_this;
}
void CurAdComponentHistoryAd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurAdComponentHistoryAd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurAdComponentHistoryAd& CurAdComponentHistoryAd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurAdComponentHistoryAd_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void CurAdComponentHistoryAd::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.CurAdComponentHistoryAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurAdComponentHistoryAd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.CurAdComponentHistoryAd.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.CurAdComponentHistoryAd.value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurAdComponentHistoryAd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.CurAdComponentHistoryAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.CurAdComponentHistoryAd.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.CurAdComponentHistoryAd.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.CurAdComponentHistoryAd)
  return target;
}

size_t CurAdComponentHistoryAd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.CurAdComponentHistoryAd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  // optional string key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurAdComponentHistoryAd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.CurAdComponentHistoryAd)
  GOOGLE_DCHECK_NE(&from, this);
  const CurAdComponentHistoryAd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurAdComponentHistoryAd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.CurAdComponentHistoryAd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.CurAdComponentHistoryAd)
    MergeFrom(*source);
  }
}

void CurAdComponentHistoryAd::MergeFrom(const CurAdComponentHistoryAd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.CurAdComponentHistoryAd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from._internal_has_key()) {
    _internal_set_key(from._internal_key());
  }
}

void CurAdComponentHistoryAd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.CurAdComponentHistoryAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurAdComponentHistoryAd::CopyFrom(const CurAdComponentHistoryAd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.CurAdComponentHistoryAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurAdComponentHistoryAd::IsInitialized() const {
  return true;
}

void CurAdComponentHistoryAd::InternalSwap(CurAdComponentHistoryAd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CurAdComponentHistoryAd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsFeaQuery::InitAsDefaultInstance() {
  ::consfea::_ConsFeaQuery_default_instance_._instance.get_mutable()->pre_and_cur_query_ = const_cast< ::consfea::PreAndCurQuery*>(
      ::consfea::PreAndCurQuery::internal_default_instance());
  ::consfea::_ConsFeaQuery_default_instance_._instance.get_mutable()->ad_query_term_ = const_cast< ::consfea::AdQueryTerm*>(
      ::consfea::AdQueryTerm::internal_default_instance());
  ::consfea::_ConsFeaQuery_default_instance_._instance.get_mutable()->as_query_term_ = const_cast< ::consfea::AsQueryTerm*>(
      ::consfea::AsQueryTerm::internal_default_instance());
  ::consfea::_ConsFeaQuery_default_instance_._instance.get_mutable()->his_query_term_ = const_cast< ::consfea::HisQueryTerm*>(
      ::consfea::HisQueryTerm::internal_default_instance());
  ::consfea::_ConsFeaQuery_default_instance_._instance.get_mutable()->pre1_bidword_ = const_cast< ::consfea::Pre1Bidword*>(
      ::consfea::Pre1Bidword::internal_default_instance());
  ::consfea::_ConsFeaQuery_default_instance_._instance.get_mutable()->top_click_query_term_ = const_cast< ::consfea::TopClickQueryTerm*>(
      ::consfea::TopClickQueryTerm::internal_default_instance());
}
class ConsFeaQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<ConsFeaQuery>()._has_bits_);
  static void set_has_pre1_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::consfea::PreAndCurQuery& pre_and_cur_query(const ConsFeaQuery* msg);
  static void set_has_pre_and_cur_query(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pre1_ad_clk_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pre1_ad_clk_span(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pre1_search_gap(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::consfea::AdQueryTerm& ad_query_term(const ConsFeaQuery* msg);
  static void set_has_ad_query_term(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::consfea::AsQueryTerm& as_query_term(const ConsFeaQuery* msg);
  static void set_has_as_query_term(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::consfea::HisQueryTerm& his_query_term(const ConsFeaQuery* msg);
  static void set_has_his_query_term(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cur_ad_clicked(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ad_show_clk_num(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_click_query_term_match_query_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_last_click_query_term_match_title_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_pre1_ad_clk_gap(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::consfea::Pre1Bidword& pre1_bidword(const ConsFeaQuery* msg);
  static void set_has_pre1_bidword(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::consfea::TopClickQueryTerm& top_click_query_term(const ConsFeaQuery* msg);
  static void set_has_top_click_query_term(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::consfea::PreAndCurQuery&
ConsFeaQuery::_Internal::pre_and_cur_query(const ConsFeaQuery* msg) {
  return *msg->pre_and_cur_query_;
}
const ::consfea::AdQueryTerm&
ConsFeaQuery::_Internal::ad_query_term(const ConsFeaQuery* msg) {
  return *msg->ad_query_term_;
}
const ::consfea::AsQueryTerm&
ConsFeaQuery::_Internal::as_query_term(const ConsFeaQuery* msg) {
  return *msg->as_query_term_;
}
const ::consfea::HisQueryTerm&
ConsFeaQuery::_Internal::his_query_term(const ConsFeaQuery* msg) {
  return *msg->his_query_term_;
}
const ::consfea::Pre1Bidword&
ConsFeaQuery::_Internal::pre1_bidword(const ConsFeaQuery* msg) {
  return *msg->pre1_bidword_;
}
const ::consfea::TopClickQueryTerm&
ConsFeaQuery::_Internal::top_click_query_term(const ConsFeaQuery* msg) {
  return *msg->top_click_query_term_;
}
ConsFeaQuery::ConsFeaQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pre5_query_char_(arena),
  ad_query_match_query_(arena),
  as_query_match_query_(arena),
  history_10_query_(arena),
  cur_ad_history_(arena),
  ad_pos_clk_(arena),
  last_click_query_(arena),
  clk_ad_style_info_history_(arena),
  cur_ad_style_history_(arena),
  cur_ad_component_history_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.ConsFeaQuery)
}
ConsFeaQuery::ConsFeaQuery(const ConsFeaQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pre5_query_char_(from.pre5_query_char_),
      ad_query_match_query_(from.ad_query_match_query_),
      as_query_match_query_(from.as_query_match_query_),
      history_10_query_(from.history_10_query_),
      cur_ad_history_(from.cur_ad_history_),
      ad_pos_clk_(from.ad_pos_clk_),
      last_click_query_(from.last_click_query_),
      clk_ad_style_info_history_(from.clk_ad_style_info_history_),
      cur_ad_style_history_(from.cur_ad_style_history_),
      cur_ad_component_history_(from.cur_ad_component_history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pre1_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pre1_query()) {
    pre1_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pre1_query(),
      GetArena());
  }
  pre1_ad_clk_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pre1_ad_clk_id()) {
    pre1_ad_clk_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pre1_ad_clk_id(),
      GetArena());
  }
  pre1_ad_clk_span_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pre1_ad_clk_span()) {
    pre1_ad_clk_span_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pre1_ad_clk_span(),
      GetArena());
  }
  pre1_search_gap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pre1_search_gap()) {
    pre1_search_gap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pre1_search_gap(),
      GetArena());
  }
  cur_ad_clicked_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cur_ad_clicked()) {
    cur_ad_clicked_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cur_ad_clicked(),
      GetArena());
  }
  ad_show_clk_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ad_show_clk_num()) {
    ad_show_clk_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ad_show_clk_num(),
      GetArena());
  }
  pre1_ad_clk_gap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pre1_ad_clk_gap()) {
    pre1_ad_clk_gap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pre1_ad_clk_gap(),
      GetArena());
  }
  if (from._internal_has_pre_and_cur_query()) {
    pre_and_cur_query_ = new ::consfea::PreAndCurQuery(*from.pre_and_cur_query_);
  } else {
    pre_and_cur_query_ = nullptr;
  }
  if (from._internal_has_ad_query_term()) {
    ad_query_term_ = new ::consfea::AdQueryTerm(*from.ad_query_term_);
  } else {
    ad_query_term_ = nullptr;
  }
  if (from._internal_has_as_query_term()) {
    as_query_term_ = new ::consfea::AsQueryTerm(*from.as_query_term_);
  } else {
    as_query_term_ = nullptr;
  }
  if (from._internal_has_his_query_term()) {
    his_query_term_ = new ::consfea::HisQueryTerm(*from.his_query_term_);
  } else {
    his_query_term_ = nullptr;
  }
  if (from._internal_has_pre1_bidword()) {
    pre1_bidword_ = new ::consfea::Pre1Bidword(*from.pre1_bidword_);
  } else {
    pre1_bidword_ = nullptr;
  }
  if (from._internal_has_top_click_query_term()) {
    top_click_query_term_ = new ::consfea::TopClickQueryTerm(*from.top_click_query_term_);
  } else {
    top_click_query_term_ = nullptr;
  }
  ::memcpy(&last_click_query_term_match_query_num_, &from.last_click_query_term_match_query_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_click_query_term_match_title_num_) -
    reinterpret_cast<char*>(&last_click_query_term_match_query_num_)) + sizeof(last_click_query_term_match_title_num_));
  // @@protoc_insertion_point(copy_constructor:consfea.ConsFeaQuery)
}

void ConsFeaQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsFeaQuery_consistent_5ffeature_2eproto.base);
  pre1_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre1_ad_clk_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre1_ad_clk_span_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre1_search_gap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_ad_clicked_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_show_clk_num_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre1_ad_clk_gap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pre_and_cur_query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_click_query_term_match_title_num_) -
      reinterpret_cast<char*>(&pre_and_cur_query_)) + sizeof(last_click_query_term_match_title_num_));
}

ConsFeaQuery::~ConsFeaQuery() {
  // @@protoc_insertion_point(destructor:consfea.ConsFeaQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConsFeaQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pre1_query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre1_ad_clk_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre1_ad_clk_span_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre1_search_gap_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cur_ad_clicked_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ad_show_clk_num_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pre1_ad_clk_gap_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pre_and_cur_query_;
  if (this != internal_default_instance()) delete ad_query_term_;
  if (this != internal_default_instance()) delete as_query_term_;
  if (this != internal_default_instance()) delete his_query_term_;
  if (this != internal_default_instance()) delete pre1_bidword_;
  if (this != internal_default_instance()) delete top_click_query_term_;
}

void ConsFeaQuery::ArenaDtor(void* object) {
  ConsFeaQuery* _this = reinterpret_cast< ConsFeaQuery* >(object);
  (void)_this;
}
void ConsFeaQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsFeaQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsFeaQuery& ConsFeaQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsFeaQuery_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void ConsFeaQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.ConsFeaQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pre5_query_char_.Clear();
  ad_query_match_query_.Clear();
  as_query_match_query_.Clear();
  history_10_query_.Clear();
  cur_ad_history_.Clear();
  ad_pos_clk_.Clear();
  last_click_query_.Clear();
  clk_ad_style_info_history_.Clear();
  cur_ad_style_history_.Clear();
  cur_ad_component_history_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pre1_query_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pre1_ad_clk_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      pre1_ad_clk_span_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      pre1_search_gap_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      cur_ad_clicked_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      ad_show_clk_num_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      pre1_ad_clk_gap_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(pre_and_cur_query_ != nullptr);
      pre_and_cur_query_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(ad_query_term_ != nullptr);
      ad_query_term_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(as_query_term_ != nullptr);
      as_query_term_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(his_query_term_ != nullptr);
      his_query_term_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(pre1_bidword_ != nullptr);
      pre1_bidword_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(top_click_query_term_ != nullptr);
      top_click_query_term_->Clear();
    }
  }
  if (cached_has_bits & 0x00006000u) {
    ::memset(&last_click_query_term_match_query_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_click_query_term_match_title_num_) -
        reinterpret_cast<char*>(&last_click_query_term_match_query_num_)) + sizeof(last_click_query_term_match_title_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsFeaQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string pre5_query_char = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pre5_query_char();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.pre5_query_char");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string pre1_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pre1_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.pre1_query");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .consfea.PreAndCurQuery pre_and_cur_query = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pre_and_cur_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pre1_ad_clk_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pre1_ad_clk_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.pre1_ad_clk_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pre1_ad_clk_span = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_pre1_ad_clk_span();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.pre1_ad_clk_span");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pre1_search_gap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_pre1_search_gap();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.pre1_search_gap");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .consfea.AdQueryTerm ad_query_term = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ad_query_term(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .consfea.AsQueryTerm as_query_term = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_as_query_term(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ad_query_match_query = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ad_query_match_query(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ad_query_match_query(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 as_query_match_query = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_as_query_match_query(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_as_query_match_query(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string history_10_query = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_history_10_query();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.history_10_query");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .consfea.HisQueryTerm his_query_term = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_his_query_term(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cur_ad_clicked = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_cur_ad_clicked();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.cur_ad_clicked");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string cur_ad_history = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cur_ad_history();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.cur_ad_history");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string ad_show_clk_num = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_ad_show_clk_num();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.ad_show_clk_num");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ad_pos_clk = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_ad_pos_clk();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.ad_pos_clk");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 last_click_query = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_last_click_query(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_last_click_query(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_click_query_term_match_query_num = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_last_click_query_term_match_query_num(&has_bits);
          last_click_query_term_match_query_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_click_query_term_match_title_num = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_last_click_query_term_match_title_num(&has_bits);
          last_click_query_term_match_title_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pre1_ad_clk_gap = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_pre1_ad_clk_gap();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.pre1_ad_clk_gap");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .consfea.Pre1Bidword pre1_bidword = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_pre1_bidword(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .consfea.TopClickQueryTerm top_click_query_term = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_click_query_term(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string clk_ad_style_info_history = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_clk_ad_style_info_history();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.clk_ad_style_info_history");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string cur_ad_style_history = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_cur_ad_style_history();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.cur_ad_style_history");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string cur_ad_component_history = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_cur_ad_component_history();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaQuery.cur_ad_component_history");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsFeaQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.ConsFeaQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pre5_query_char = 1;
  for (int i = 0, n = this->_internal_pre5_query_char_size(); i < n; i++) {
    const auto& s = this->_internal_pre5_query_char(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.pre5_query_char");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string pre1_query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pre1_query().data(), static_cast<int>(this->_internal_pre1_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.pre1_query");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pre1_query(), target);
  }

  // optional .consfea.PreAndCurQuery pre_and_cur_query = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pre_and_cur_query(this), target, stream);
  }

  // optional string pre1_ad_clk_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pre1_ad_clk_id().data(), static_cast<int>(this->_internal_pre1_ad_clk_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.pre1_ad_clk_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pre1_ad_clk_id(), target);
  }

  // optional string pre1_ad_clk_span = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pre1_ad_clk_span().data(), static_cast<int>(this->_internal_pre1_ad_clk_span().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.pre1_ad_clk_span");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pre1_ad_clk_span(), target);
  }

  // optional string pre1_search_gap = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pre1_search_gap().data(), static_cast<int>(this->_internal_pre1_search_gap().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.pre1_search_gap");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pre1_search_gap(), target);
  }

  // optional .consfea.AdQueryTerm ad_query_term = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ad_query_term(this), target, stream);
  }

  // optional .consfea.AsQueryTerm as_query_term = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::as_query_term(this), target, stream);
  }

  // repeated uint32 ad_query_match_query = 9;
  for (int i = 0, n = this->_internal_ad_query_match_query_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ad_query_match_query(i), target);
  }

  // repeated uint32 as_query_match_query = 10;
  for (int i = 0, n = this->_internal_as_query_match_query_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_as_query_match_query(i), target);
  }

  // repeated string history_10_query = 11;
  for (int i = 0, n = this->_internal_history_10_query_size(); i < n; i++) {
    const auto& s = this->_internal_history_10_query(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.history_10_query");
    target = stream->WriteString(11, s, target);
  }

  // optional .consfea.HisQueryTerm his_query_term = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::his_query_term(this), target, stream);
  }

  // optional string cur_ad_clicked = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cur_ad_clicked().data(), static_cast<int>(this->_internal_cur_ad_clicked().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.cur_ad_clicked");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_cur_ad_clicked(), target);
  }

  // repeated string cur_ad_history = 14;
  for (int i = 0, n = this->_internal_cur_ad_history_size(); i < n; i++) {
    const auto& s = this->_internal_cur_ad_history(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.cur_ad_history");
    target = stream->WriteString(14, s, target);
  }

  // optional string ad_show_clk_num = 15;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ad_show_clk_num().data(), static_cast<int>(this->_internal_ad_show_clk_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.ad_show_clk_num");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_ad_show_clk_num(), target);
  }

  // repeated string ad_pos_clk = 16;
  for (int i = 0, n = this->_internal_ad_pos_clk_size(); i < n; i++) {
    const auto& s = this->_internal_ad_pos_clk(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.ad_pos_clk");
    target = stream->WriteString(16, s, target);
  }

  // repeated uint32 last_click_query = 17;
  for (int i = 0, n = this->_internal_last_click_query_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_last_click_query(i), target);
  }

  // optional uint32 last_click_query_term_match_query_num = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_last_click_query_term_match_query_num(), target);
  }

  // optional uint32 last_click_query_term_match_title_num = 19;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_last_click_query_term_match_title_num(), target);
  }

  // optional string pre1_ad_clk_gap = 20;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pre1_ad_clk_gap().data(), static_cast<int>(this->_internal_pre1_ad_clk_gap().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.pre1_ad_clk_gap");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_pre1_ad_clk_gap(), target);
  }

  // optional .consfea.Pre1Bidword pre1_bidword = 21;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::pre1_bidword(this), target, stream);
  }

  // optional .consfea.TopClickQueryTerm top_click_query_term = 22;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::top_click_query_term(this), target, stream);
  }

  // repeated string clk_ad_style_info_history = 23;
  for (int i = 0, n = this->_internal_clk_ad_style_info_history_size(); i < n; i++) {
    const auto& s = this->_internal_clk_ad_style_info_history(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.clk_ad_style_info_history");
    target = stream->WriteString(23, s, target);
  }

  // repeated string cur_ad_style_history = 24;
  for (int i = 0, n = this->_internal_cur_ad_style_history_size(); i < n; i++) {
    const auto& s = this->_internal_cur_ad_style_history(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.cur_ad_style_history");
    target = stream->WriteString(24, s, target);
  }

  // repeated string cur_ad_component_history = 25;
  for (int i = 0, n = this->_internal_cur_ad_component_history_size(); i < n; i++) {
    const auto& s = this->_internal_cur_ad_component_history(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaQuery.cur_ad_component_history");
    target = stream->WriteString(25, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.ConsFeaQuery)
  return target;
}

size_t ConsFeaQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.ConsFeaQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pre5_query_char = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pre5_query_char_.size());
  for (int i = 0, n = pre5_query_char_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pre5_query_char_.Get(i));
  }

  // repeated uint32 ad_query_match_query = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ad_query_match_query_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ad_query_match_query_size());
    total_size += data_size;
  }

  // repeated uint32 as_query_match_query = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->as_query_match_query_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_as_query_match_query_size());
    total_size += data_size;
  }

  // repeated string history_10_query = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(history_10_query_.size());
  for (int i = 0, n = history_10_query_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      history_10_query_.Get(i));
  }

  // repeated string cur_ad_history = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cur_ad_history_.size());
  for (int i = 0, n = cur_ad_history_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cur_ad_history_.Get(i));
  }

  // repeated string ad_pos_clk = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ad_pos_clk_.size());
  for (int i = 0, n = ad_pos_clk_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ad_pos_clk_.Get(i));
  }

  // repeated uint32 last_click_query = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->last_click_query_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_last_click_query_size());
    total_size += data_size;
  }

  // repeated string clk_ad_style_info_history = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(clk_ad_style_info_history_.size());
  for (int i = 0, n = clk_ad_style_info_history_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      clk_ad_style_info_history_.Get(i));
  }

  // repeated string cur_ad_style_history = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cur_ad_style_history_.size());
  for (int i = 0, n = cur_ad_style_history_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cur_ad_style_history_.Get(i));
  }

  // repeated string cur_ad_component_history = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cur_ad_component_history_.size());
  for (int i = 0, n = cur_ad_component_history_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cur_ad_component_history_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string pre1_query = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pre1_query());
    }

    // optional string pre1_ad_clk_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pre1_ad_clk_id());
    }

    // optional string pre1_ad_clk_span = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pre1_ad_clk_span());
    }

    // optional string pre1_search_gap = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pre1_search_gap());
    }

    // optional string cur_ad_clicked = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cur_ad_clicked());
    }

    // optional string ad_show_clk_num = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ad_show_clk_num());
    }

    // optional string pre1_ad_clk_gap = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pre1_ad_clk_gap());
    }

    // optional .consfea.PreAndCurQuery pre_and_cur_query = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pre_and_cur_query_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .consfea.AdQueryTerm ad_query_term = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ad_query_term_);
    }

    // optional .consfea.AsQueryTerm as_query_term = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *as_query_term_);
    }

    // optional .consfea.HisQueryTerm his_query_term = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *his_query_term_);
    }

    // optional .consfea.Pre1Bidword pre1_bidword = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pre1_bidword_);
    }

    // optional .consfea.TopClickQueryTerm top_click_query_term = 22;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *top_click_query_term_);
    }

    // optional uint32 last_click_query_term_match_query_num = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_click_query_term_match_query_num());
    }

    // optional uint32 last_click_query_term_match_title_num = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_click_query_term_match_title_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsFeaQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.ConsFeaQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsFeaQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsFeaQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.ConsFeaQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.ConsFeaQuery)
    MergeFrom(*source);
  }
}

void ConsFeaQuery::MergeFrom(const ConsFeaQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.ConsFeaQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pre5_query_char_.MergeFrom(from.pre5_query_char_);
  ad_query_match_query_.MergeFrom(from.ad_query_match_query_);
  as_query_match_query_.MergeFrom(from.as_query_match_query_);
  history_10_query_.MergeFrom(from.history_10_query_);
  cur_ad_history_.MergeFrom(from.cur_ad_history_);
  ad_pos_clk_.MergeFrom(from.ad_pos_clk_);
  last_click_query_.MergeFrom(from.last_click_query_);
  clk_ad_style_info_history_.MergeFrom(from.clk_ad_style_info_history_);
  cur_ad_style_history_.MergeFrom(from.cur_ad_style_history_);
  cur_ad_component_history_.MergeFrom(from.cur_ad_component_history_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pre1_query(from._internal_pre1_query());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pre1_ad_clk_id(from._internal_pre1_ad_clk_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_pre1_ad_clk_span(from._internal_pre1_ad_clk_span());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_pre1_search_gap(from._internal_pre1_search_gap());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_cur_ad_clicked(from._internal_cur_ad_clicked());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_ad_show_clk_num(from._internal_ad_show_clk_num());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_pre1_ad_clk_gap(from._internal_pre1_ad_clk_gap());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_pre_and_cur_query()->::consfea::PreAndCurQuery::MergeFrom(from._internal_pre_and_cur_query());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_ad_query_term()->::consfea::AdQueryTerm::MergeFrom(from._internal_ad_query_term());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_as_query_term()->::consfea::AsQueryTerm::MergeFrom(from._internal_as_query_term());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_his_query_term()->::consfea::HisQueryTerm::MergeFrom(from._internal_his_query_term());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_pre1_bidword()->::consfea::Pre1Bidword::MergeFrom(from._internal_pre1_bidword());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_top_click_query_term()->::consfea::TopClickQueryTerm::MergeFrom(from._internal_top_click_query_term());
    }
    if (cached_has_bits & 0x00002000u) {
      last_click_query_term_match_query_num_ = from.last_click_query_term_match_query_num_;
    }
    if (cached_has_bits & 0x00004000u) {
      last_click_query_term_match_title_num_ = from.last_click_query_term_match_title_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConsFeaQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.ConsFeaQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsFeaQuery::CopyFrom(const ConsFeaQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.ConsFeaQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsFeaQuery::IsInitialized() const {
  return true;
}

void ConsFeaQuery::InternalSwap(ConsFeaQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pre5_query_char_.InternalSwap(&other->pre5_query_char_);
  ad_query_match_query_.InternalSwap(&other->ad_query_match_query_);
  as_query_match_query_.InternalSwap(&other->as_query_match_query_);
  history_10_query_.InternalSwap(&other->history_10_query_);
  cur_ad_history_.InternalSwap(&other->cur_ad_history_);
  ad_pos_clk_.InternalSwap(&other->ad_pos_clk_);
  last_click_query_.InternalSwap(&other->last_click_query_);
  clk_ad_style_info_history_.InternalSwap(&other->clk_ad_style_info_history_);
  cur_ad_style_history_.InternalSwap(&other->cur_ad_style_history_);
  cur_ad_component_history_.InternalSwap(&other->cur_ad_component_history_);
  pre1_query_.Swap(&other->pre1_query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pre1_ad_clk_id_.Swap(&other->pre1_ad_clk_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pre1_ad_clk_span_.Swap(&other->pre1_ad_clk_span_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pre1_search_gap_.Swap(&other->pre1_search_gap_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cur_ad_clicked_.Swap(&other->cur_ad_clicked_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ad_show_clk_num_.Swap(&other->ad_show_clk_num_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pre1_ad_clk_gap_.Swap(&other->pre1_ad_clk_gap_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsFeaQuery, last_click_query_term_match_title_num_)
      + sizeof(ConsFeaQuery::last_click_query_term_match_title_num_)
      - PROTOBUF_FIELD_OFFSET(ConsFeaQuery, pre_and_cur_query_)>(
          reinterpret_cast<char*>(&pre_and_cur_query_),
          reinterpret_cast<char*>(&other->pre_and_cur_query_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsFeaQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsFeaAd::InitAsDefaultInstance() {
}
class ConsFeaAd::_Internal {
 public:
};

ConsFeaAd::ConsFeaAd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  his_query_term_ad_(arena),
  cur_ad_clicked_ad_(arena),
  cur_ad_history_ad_(arena),
  last_click_query_term_match_title_num_ad_(arena),
  pre1_bidword_ad_(arena),
  top_click_query_term_ad_(arena),
  cur_ad_style_history_ad_(arena),
  cur_ad_component_history_ad_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.ConsFeaAd)
}
ConsFeaAd::ConsFeaAd(const ConsFeaAd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      his_query_term_ad_(from.his_query_term_ad_),
      cur_ad_clicked_ad_(from.cur_ad_clicked_ad_),
      cur_ad_history_ad_(from.cur_ad_history_ad_),
      last_click_query_term_match_title_num_ad_(from.last_click_query_term_match_title_num_ad_),
      pre1_bidword_ad_(from.pre1_bidword_ad_),
      top_click_query_term_ad_(from.top_click_query_term_ad_),
      cur_ad_style_history_ad_(from.cur_ad_style_history_ad_),
      cur_ad_component_history_ad_(from.cur_ad_component_history_ad_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:consfea.ConsFeaAd)
}

void ConsFeaAd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsFeaAd_consistent_5ffeature_2eproto.base);
}

ConsFeaAd::~ConsFeaAd() {
  // @@protoc_insertion_point(destructor:consfea.ConsFeaAd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConsFeaAd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConsFeaAd::ArenaDtor(void* object) {
  ConsFeaAd* _this = reinterpret_cast< ConsFeaAd* >(object);
  (void)_this;
}
void ConsFeaAd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsFeaAd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsFeaAd& ConsFeaAd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsFeaAd_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void ConsFeaAd::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.ConsFeaAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  his_query_term_ad_.Clear();
  cur_ad_clicked_ad_.Clear();
  cur_ad_history_ad_.Clear();
  last_click_query_term_match_title_num_ad_.Clear();
  pre1_bidword_ad_.Clear();
  top_click_query_term_ad_.Clear();
  cur_ad_style_history_ad_.Clear();
  cur_ad_component_history_ad_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsFeaAd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .consfea.HisQueryTermAd his_query_term_ad = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_his_query_term_ad(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .consfea.CurAdClickedAd cur_ad_clicked_ad = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cur_ad_clicked_ad(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .consfea.CurAdHistoryAd cur_ad_history_ad = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cur_ad_history_ad(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .consfea.LastClickQueryTermMatchTitleNumAd last_click_query_term_match_title_num_ad = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_last_click_query_term_match_title_num_ad(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .consfea.Pre1BidwordAd pre1_bidword_ad = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pre1_bidword_ad(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .consfea.TopClickQueryTermAd top_click_query_term_ad = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top_click_query_term_ad(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .consfea.CurAdStyleHistoryAd cur_ad_style_history_ad = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cur_ad_style_history_ad(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .consfea.CurAdComponentHistoryAd cur_ad_component_history_ad = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cur_ad_component_history_ad(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsFeaAd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.ConsFeaAd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .consfea.HisQueryTermAd his_query_term_ad = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_his_query_term_ad_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_his_query_term_ad(i), target, stream);
  }

  // repeated .consfea.CurAdClickedAd cur_ad_clicked_ad = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cur_ad_clicked_ad_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cur_ad_clicked_ad(i), target, stream);
  }

  // repeated .consfea.CurAdHistoryAd cur_ad_history_ad = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cur_ad_history_ad_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cur_ad_history_ad(i), target, stream);
  }

  // repeated .consfea.LastClickQueryTermMatchTitleNumAd last_click_query_term_match_title_num_ad = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_last_click_query_term_match_title_num_ad_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_last_click_query_term_match_title_num_ad(i), target, stream);
  }

  // repeated .consfea.Pre1BidwordAd pre1_bidword_ad = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pre1_bidword_ad_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pre1_bidword_ad(i), target, stream);
  }

  // repeated .consfea.TopClickQueryTermAd top_click_query_term_ad = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_top_click_query_term_ad_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_top_click_query_term_ad(i), target, stream);
  }

  // repeated .consfea.CurAdStyleHistoryAd cur_ad_style_history_ad = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cur_ad_style_history_ad_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_cur_ad_style_history_ad(i), target, stream);
  }

  // repeated .consfea.CurAdComponentHistoryAd cur_ad_component_history_ad = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cur_ad_component_history_ad_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_cur_ad_component_history_ad(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.ConsFeaAd)
  return target;
}

size_t ConsFeaAd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.ConsFeaAd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .consfea.HisQueryTermAd his_query_term_ad = 1;
  total_size += 1UL * this->_internal_his_query_term_ad_size();
  for (const auto& msg : this->his_query_term_ad_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .consfea.CurAdClickedAd cur_ad_clicked_ad = 2;
  total_size += 1UL * this->_internal_cur_ad_clicked_ad_size();
  for (const auto& msg : this->cur_ad_clicked_ad_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .consfea.CurAdHistoryAd cur_ad_history_ad = 3;
  total_size += 1UL * this->_internal_cur_ad_history_ad_size();
  for (const auto& msg : this->cur_ad_history_ad_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .consfea.LastClickQueryTermMatchTitleNumAd last_click_query_term_match_title_num_ad = 4;
  total_size += 1UL * this->_internal_last_click_query_term_match_title_num_ad_size();
  for (const auto& msg : this->last_click_query_term_match_title_num_ad_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .consfea.Pre1BidwordAd pre1_bidword_ad = 5;
  total_size += 1UL * this->_internal_pre1_bidword_ad_size();
  for (const auto& msg : this->pre1_bidword_ad_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .consfea.TopClickQueryTermAd top_click_query_term_ad = 6;
  total_size += 1UL * this->_internal_top_click_query_term_ad_size();
  for (const auto& msg : this->top_click_query_term_ad_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .consfea.CurAdStyleHistoryAd cur_ad_style_history_ad = 7;
  total_size += 1UL * this->_internal_cur_ad_style_history_ad_size();
  for (const auto& msg : this->cur_ad_style_history_ad_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .consfea.CurAdComponentHistoryAd cur_ad_component_history_ad = 8;
  total_size += 1UL * this->_internal_cur_ad_component_history_ad_size();
  for (const auto& msg : this->cur_ad_component_history_ad_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsFeaAd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.ConsFeaAd)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsFeaAd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsFeaAd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.ConsFeaAd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.ConsFeaAd)
    MergeFrom(*source);
  }
}

void ConsFeaAd::MergeFrom(const ConsFeaAd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.ConsFeaAd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  his_query_term_ad_.MergeFrom(from.his_query_term_ad_);
  cur_ad_clicked_ad_.MergeFrom(from.cur_ad_clicked_ad_);
  cur_ad_history_ad_.MergeFrom(from.cur_ad_history_ad_);
  last_click_query_term_match_title_num_ad_.MergeFrom(from.last_click_query_term_match_title_num_ad_);
  pre1_bidword_ad_.MergeFrom(from.pre1_bidword_ad_);
  top_click_query_term_ad_.MergeFrom(from.top_click_query_term_ad_);
  cur_ad_style_history_ad_.MergeFrom(from.cur_ad_style_history_ad_);
  cur_ad_component_history_ad_.MergeFrom(from.cur_ad_component_history_ad_);
}

void ConsFeaAd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.ConsFeaAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsFeaAd::CopyFrom(const ConsFeaAd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.ConsFeaAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsFeaAd::IsInitialized() const {
  return true;
}

void ConsFeaAd::InternalSwap(ConsFeaAd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  his_query_term_ad_.InternalSwap(&other->his_query_term_ad_);
  cur_ad_clicked_ad_.InternalSwap(&other->cur_ad_clicked_ad_);
  cur_ad_history_ad_.InternalSwap(&other->cur_ad_history_ad_);
  last_click_query_term_match_title_num_ad_.InternalSwap(&other->last_click_query_term_match_title_num_ad_);
  pre1_bidword_ad_.InternalSwap(&other->pre1_bidword_ad_);
  top_click_query_term_ad_.InternalSwap(&other->top_click_query_term_ad_);
  cur_ad_style_history_ad_.InternalSwap(&other->cur_ad_style_history_ad_);
  cur_ad_component_history_ad_.InternalSwap(&other->cur_ad_component_history_ad_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsFeaAd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsFeaFull::InitAsDefaultInstance() {
  ::consfea::_ConsFeaFull_default_instance_._instance.get_mutable()->cons_fea_query_ = const_cast< ::consfea::ConsFeaQuery*>(
      ::consfea::ConsFeaQuery::internal_default_instance());
  ::consfea::_ConsFeaFull_default_instance_._instance.get_mutable()->cons_fea_ad_ = const_cast< ::consfea::ConsFeaAd*>(
      ::consfea::ConsFeaAd::internal_default_instance());
}
class ConsFeaFull::_Internal {
 public:
  using HasBits = decltype(std::declval<ConsFeaFull>()._has_bits_);
  static void set_has_pvid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::consfea::ConsFeaQuery& cons_fea_query(const ConsFeaFull* msg);
  static void set_has_cons_fea_query(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::consfea::ConsFeaAd& cons_fea_ad(const ConsFeaFull* msg);
  static void set_has_cons_fea_ad(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::consfea::ConsFeaQuery&
ConsFeaFull::_Internal::cons_fea_query(const ConsFeaFull* msg) {
  return *msg->cons_fea_query_;
}
const ::consfea::ConsFeaAd&
ConsFeaFull::_Internal::cons_fea_ad(const ConsFeaFull* msg) {
  return *msg->cons_fea_ad_;
}
ConsFeaFull::ConsFeaFull(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:consfea.ConsFeaFull)
}
ConsFeaFull::ConsFeaFull(const ConsFeaFull& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pvid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pvid()) {
    pvid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pvid(),
      GetArena());
  }
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_query()) {
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_query(),
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform()) {
    platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform(),
      GetArena());
  }
  if (from._internal_has_cons_fea_query()) {
    cons_fea_query_ = new ::consfea::ConsFeaQuery(*from.cons_fea_query_);
  } else {
    cons_fea_query_ = nullptr;
  }
  if (from._internal_has_cons_fea_ad()) {
    cons_fea_ad_ = new ::consfea::ConsFeaAd(*from.cons_fea_ad_);
  } else {
    cons_fea_ad_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:consfea.ConsFeaFull)
}

void ConsFeaFull::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConsFeaFull_consistent_5ffeature_2eproto.base);
  pvid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cons_fea_query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cons_fea_ad_) -
      reinterpret_cast<char*>(&cons_fea_query_)) + sizeof(cons_fea_ad_));
}

ConsFeaFull::~ConsFeaFull() {
  // @@protoc_insertion_point(destructor:consfea.ConsFeaFull)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConsFeaFull::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pvid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cons_fea_query_;
  if (this != internal_default_instance()) delete cons_fea_ad_;
}

void ConsFeaFull::ArenaDtor(void* object) {
  ConsFeaFull* _this = reinterpret_cast< ConsFeaFull* >(object);
  (void)_this;
}
void ConsFeaFull::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsFeaFull::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsFeaFull& ConsFeaFull::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsFeaFull_consistent_5ffeature_2eproto.base);
  return *internal_default_instance();
}


void ConsFeaFull::Clear() {
// @@protoc_insertion_point(message_clear_start:consfea.ConsFeaFull)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      pvid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      query_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      platform_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cons_fea_query_ != nullptr);
      cons_fea_query_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(cons_fea_ad_ != nullptr);
      cons_fea_ad_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsFeaFull::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string pvid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pvid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaFull.pvid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaFull.query");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .consfea.ConsFeaQuery cons_fea_query = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cons_fea_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .consfea.ConsFeaAd cons_fea_ad = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cons_fea_ad(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string platform = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "consfea.ConsFeaFull.platform");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsFeaFull::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:consfea.ConsFeaFull)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pvid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pvid().data(), static_cast<int>(this->_internal_pvid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaFull.pvid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pvid(), target);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaFull.query");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_query(), target);
  }

  // optional .consfea.ConsFeaQuery cons_fea_query = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cons_fea_query(this), target, stream);
  }

  // optional .consfea.ConsFeaAd cons_fea_ad = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cons_fea_ad(this), target, stream);
  }

  // optional string platform = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "consfea.ConsFeaFull.platform");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_platform(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:consfea.ConsFeaFull)
  return target;
}

size_t ConsFeaFull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consfea.ConsFeaFull)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string pvid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pvid());
    }

    // optional string query = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_query());
    }

    // optional string platform = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform());
    }

    // optional .consfea.ConsFeaQuery cons_fea_query = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cons_fea_query_);
    }

    // optional .consfea.ConsFeaAd cons_fea_ad = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cons_fea_ad_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsFeaFull::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consfea.ConsFeaFull)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsFeaFull* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsFeaFull>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consfea.ConsFeaFull)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consfea.ConsFeaFull)
    MergeFrom(*source);
  }
}

void ConsFeaFull::MergeFrom(const ConsFeaFull& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consfea.ConsFeaFull)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pvid(from._internal_pvid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_query(from._internal_query());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_cons_fea_query()->::consfea::ConsFeaQuery::MergeFrom(from._internal_cons_fea_query());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_cons_fea_ad()->::consfea::ConsFeaAd::MergeFrom(from._internal_cons_fea_ad());
    }
  }
}

void ConsFeaFull::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consfea.ConsFeaFull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsFeaFull::CopyFrom(const ConsFeaFull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consfea.ConsFeaFull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsFeaFull::IsInitialized() const {
  return true;
}

void ConsFeaFull::InternalSwap(ConsFeaFull* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pvid_.Swap(&other->pvid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsFeaFull, cons_fea_ad_)
      + sizeof(ConsFeaFull::cons_fea_ad_)
      - PROTOBUF_FIELD_OFFSET(ConsFeaFull, cons_fea_query_)>(
          reinterpret_cast<char*>(&cons_fea_query_),
          reinterpret_cast<char*>(&other->cons_fea_query_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsFeaFull::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace consfea
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::consfea::PreAndCurQuery* Arena::CreateMaybeMessage< ::consfea::PreAndCurQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::PreAndCurQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::AdQueryTerm* Arena::CreateMaybeMessage< ::consfea::AdQueryTerm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::AdQueryTerm >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::AsQueryTerm* Arena::CreateMaybeMessage< ::consfea::AsQueryTerm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::AsQueryTerm >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::TopClickQueryTerm* Arena::CreateMaybeMessage< ::consfea::TopClickQueryTerm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::TopClickQueryTerm >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::HisQueryTerm* Arena::CreateMaybeMessage< ::consfea::HisQueryTerm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::HisQueryTerm >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::Pre1Bidword* Arena::CreateMaybeMessage< ::consfea::Pre1Bidword >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::Pre1Bidword >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::HisQueryTermAd* Arena::CreateMaybeMessage< ::consfea::HisQueryTermAd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::HisQueryTermAd >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::CurAdClickedAd* Arena::CreateMaybeMessage< ::consfea::CurAdClickedAd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::CurAdClickedAd >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::CurAdHistoryAd* Arena::CreateMaybeMessage< ::consfea::CurAdHistoryAd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::CurAdHistoryAd >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::LastClickQueryTermMatchTitleNumAd* Arena::CreateMaybeMessage< ::consfea::LastClickQueryTermMatchTitleNumAd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::LastClickQueryTermMatchTitleNumAd >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::Pre1BidwordAd* Arena::CreateMaybeMessage< ::consfea::Pre1BidwordAd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::Pre1BidwordAd >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::TopClickQueryTermAd* Arena::CreateMaybeMessage< ::consfea::TopClickQueryTermAd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::TopClickQueryTermAd >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::CurAdStyleHistoryAd* Arena::CreateMaybeMessage< ::consfea::CurAdStyleHistoryAd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::CurAdStyleHistoryAd >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::CurAdComponentHistoryAd* Arena::CreateMaybeMessage< ::consfea::CurAdComponentHistoryAd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::CurAdComponentHistoryAd >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::ConsFeaQuery* Arena::CreateMaybeMessage< ::consfea::ConsFeaQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::ConsFeaQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::ConsFeaAd* Arena::CreateMaybeMessage< ::consfea::ConsFeaAd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::ConsFeaAd >(arena);
}
template<> PROTOBUF_NOINLINE ::consfea::ConsFeaFull* Arena::CreateMaybeMessage< ::consfea::ConsFeaFull >(Arena* arena) {
  return Arena::CreateMessageInternal< ::consfea::ConsFeaFull >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
