// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#include "echo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_adinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdInfo_adinfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConsFeaFull_consistent_5ffeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_echo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdCVRFeatureValue_echo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_echo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdFeatureKey_echo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_echo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdFeatureValue_echo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_echo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AdInfo4Rank_echo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_echo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueryInfo_echo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_echo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankStruct_echo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_echo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VisitInfo_echo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_orderfeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderInfoFeature_orderfeature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_userbehavior_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserOaidFeature_userbehavior_2eproto;
namespace example {
class EchoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EchoRequest> _instance;
} _EchoRequest_default_instance_;
class EchoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EchoResponse> _instance;
} _EchoResponse_default_instance_;
class AdFeatureKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdFeatureKey> _instance;
} _AdFeatureKey_default_instance_;
class AdFeatureValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdFeatureValue> _instance;
} _AdFeatureValue_default_instance_;
class AdCVRFeatureValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdCVRFeatureValue> _instance;
} _AdCVRFeatureValue_default_instance_;
class AdInfo4RankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdInfo4Rank> _instance;
} _AdInfo4Rank_default_instance_;
class VisitInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisitInfo> _instance;
} _VisitInfo_default_instance_;
class QueryInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryInfo> _instance;
} _QueryInfo_default_instance_;
class RankStructDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankStruct> _instance;
} _RankStruct_default_instance_;
class RankRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankRequest> _instance;
} _RankRequest_default_instance_;
class RankResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankResponse> _instance;
} _RankResponse_default_instance_;
}  // namespace example
static void InitDefaultsscc_info_AdCVRFeatureValue_echo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_AdCVRFeatureValue_default_instance_;
    new (ptr) ::example::AdCVRFeatureValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::AdCVRFeatureValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdCVRFeatureValue_echo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdCVRFeatureValue_echo_2eproto}, {}};

static void InitDefaultsscc_info_AdFeatureKey_echo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_AdFeatureKey_default_instance_;
    new (ptr) ::example::AdFeatureKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::AdFeatureKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdFeatureKey_echo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdFeatureKey_echo_2eproto}, {}};

static void InitDefaultsscc_info_AdFeatureValue_echo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_AdFeatureValue_default_instance_;
    new (ptr) ::example::AdFeatureValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::AdFeatureValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdFeatureValue_echo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdFeatureValue_echo_2eproto}, {}};

static void InitDefaultsscc_info_AdInfo4Rank_echo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_AdInfo4Rank_default_instance_;
    new (ptr) ::example::AdInfo4Rank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::AdInfo4Rank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AdInfo4Rank_echo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AdInfo4Rank_echo_2eproto}, {
      &scc_info_AdInfo_adinfo_2eproto.base,
      &scc_info_AdFeatureValue_echo_2eproto.base,
      &scc_info_AdFeatureKey_echo_2eproto.base,
      &scc_info_AdCVRFeatureValue_echo_2eproto.base,}};

static void InitDefaultsscc_info_EchoRequest_echo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_EchoRequest_default_instance_;
    new (ptr) ::example::EchoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::EchoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EchoRequest_echo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EchoRequest_echo_2eproto}, {}};

static void InitDefaultsscc_info_EchoResponse_echo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_EchoResponse_default_instance_;
    new (ptr) ::example::EchoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::EchoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EchoResponse_echo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EchoResponse_echo_2eproto}, {}};

static void InitDefaultsscc_info_QueryInfo_echo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_QueryInfo_default_instance_;
    new (ptr) ::example::QueryInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::QueryInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueryInfo_echo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_QueryInfo_echo_2eproto}, {
      &scc_info_AdInfo4Rank_echo_2eproto.base,
      &scc_info_ConsFeaFull_consistent_5ffeature_2eproto.base,}};

static void InitDefaultsscc_info_RankRequest_echo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_RankRequest_default_instance_;
    new (ptr) ::example::RankRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::RankRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RankRequest_echo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RankRequest_echo_2eproto}, {
      &scc_info_RankStruct_echo_2eproto.base,}};

static void InitDefaultsscc_info_RankResponse_echo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_RankResponse_default_instance_;
    new (ptr) ::example::RankResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::RankResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankResponse_echo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RankResponse_echo_2eproto}, {}};

static void InitDefaultsscc_info_RankStruct_echo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_RankStruct_default_instance_;
    new (ptr) ::example::RankStruct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::RankStruct::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RankStruct_echo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RankStruct_echo_2eproto}, {
      &scc_info_VisitInfo_echo_2eproto.base,
      &scc_info_QueryInfo_echo_2eproto.base,}};

static void InitDefaultsscc_info_VisitInfo_echo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::_VisitInfo_default_instance_;
    new (ptr) ::example::VisitInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::VisitInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VisitInfo_echo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VisitInfo_echo_2eproto}, {
      &scc_info_UserOaidFeature_userbehavior_2eproto.base,
      &scc_info_OrderInfoFeature_orderfeature_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_echo_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_echo_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_echo_2eproto[2];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_echo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::example::EchoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::EchoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::EchoRequest, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::example::EchoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::EchoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::EchoResponse, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::example::AdFeatureKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::AdFeatureKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::AdFeatureKey, sign_),
  PROTOBUF_FIELD_OFFSET(::example::AdFeatureKey, slot_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::example::AdFeatureValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::AdFeatureValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::AdFeatureValue, show_),
  PROTOBUF_FIELD_OFFSET(::example::AdFeatureValue, clk_),
  PROTOBUF_FIELD_OFFSET(::example::AdFeatureValue, weight_),
  PROTOBUF_FIELD_OFFSET(::example::AdFeatureValue, fm_array_),
  PROTOBUF_FIELD_OFFSET(::example::AdFeatureValue, dwlr_w_),
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::example::AdCVRFeatureValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::AdCVRFeatureValue, emb_w_),
  PROTOBUF_FIELD_OFFSET(::example::AdInfo4Rank, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::AdInfo4Rank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::AdInfo4Rank, adinfo_),
  PROTOBUF_FIELD_OFFSET(::example::AdInfo4Rank, rankscore_),
  PROTOBUF_FIELD_OFFSET(::example::AdInfo4Rank, ctr_),
  PROTOBUF_FIELD_OFFSET(::example::AdInfo4Rank, adid_),
  PROTOBUF_FIELD_OFFSET(::example::AdInfo4Rank, feature_values_),
  PROTOBUF_FIELD_OFFSET(::example::AdInfo4Rank, feature_keys_),
  PROTOBUF_FIELD_OFFSET(::example::AdInfo4Rank, cvr_),
  PROTOBUF_FIELD_OFFSET(::example::AdInfo4Rank, cvr_feature_values_),
  PROTOBUF_FIELD_OFFSET(::example::AdInfo4Rank, cvr_feature_keys_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::example::VisitInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::VisitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::VisitInfo, province_),
  PROTOBUF_FIELD_OFFSET(::example::VisitInfo, citystr_),
  PROTOBUF_FIELD_OFFSET(::example::VisitInfo, city_),
  PROTOBUF_FIELD_OFFSET(::example::VisitInfo, pvid_),
  PROTOBUF_FIELD_OFFSET(::example::VisitInfo, oaid_),
  PROTOBUF_FIELD_OFFSET(::example::VisitInfo, oaid_fea_),
  PROTOBUF_FIELD_OFFSET(::example::VisitInfo, order_feature_),
  5,
  0,
  6,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::example::QueryInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::QueryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::QueryInfo, query_),
  PROTOBUF_FIELD_OFFSET(::example::QueryInfo, adlist_),
  PROTOBUF_FIELD_OFFSET(::example::QueryInfo, is_cons_fea_),
  PROTOBUF_FIELD_OFFSET(::example::QueryInfo, cons_fea_full_),
  0,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::example::RankStruct, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::RankStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::RankStruct, visitinfo_),
  PROTOBUF_FIELD_OFFSET(::example::RankStruct, querylist_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::example::RankRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::RankRequest, rank_struct_),
  PROTOBUF_FIELD_OFFSET(::example::RankResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::RankResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::RankResponse, rank_response_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::example::EchoRequest)},
  { 7, 13, sizeof(::example::EchoResponse)},
  { 14, 21, sizeof(::example::AdFeatureKey)},
  { 23, 33, sizeof(::example::AdFeatureValue)},
  { 38, -1, sizeof(::example::AdCVRFeatureValue)},
  { 44, 58, sizeof(::example::AdInfo4Rank)},
  { 67, 79, sizeof(::example::VisitInfo)},
  { 86, 95, sizeof(::example::QueryInfo)},
  { 99, 106, sizeof(::example::RankStruct)},
  { 108, -1, sizeof(::example::RankRequest)},
  { 114, 120, sizeof(::example::RankResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_EchoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_EchoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_AdFeatureKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_AdFeatureValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_AdCVRFeatureValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_AdInfo4Rank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_VisitInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_QueryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_RankStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_RankRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::example::_RankResponse_default_instance_),
};

const char descriptor_table_protodef_echo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\necho.proto\022\007example\032\014adinfo.proto\032\022ord"
  "erfeature.proto\032\022userbehavior.proto\032\030con"
  "sistent_feature.proto\"\036\n\013EchoRequest\022\017\n\007"
  "message\030\001 \002(\t\"\037\n\014EchoResponse\022\017\n\007message"
  "\030\001 \002(\t\"-\n\014AdFeatureKey\022\017\n\004sign\030\001 \001(\004:\0010\022"
  "\014\n\004slot\030\002 \001(\r\"m\n\016AdFeatureValue\022\017\n\004show\030"
  "\001 \001(\002:\0010\022\016\n\003clk\030\002 \001(\002:\0010\022\021\n\006weight\030\003 \001(\002"
  ":\0010\022\024\n\010fm_array\030\004 \003(\002B\002\020\001\022\021\n\006dwlr_w\030\005 \001("
  "\002:\0010\"&\n\021AdCVRFeatureValue\022\021\n\005emb_w\030\001 \003(\002"
  "B\002\020\001\"\257\002\n\013AdInfo4Rank\022\036\n\006adinfo\030\001 \001(\0132\016.a"
  "dinfo.AdInfo\022\021\n\trankscore\030\002 \001(\001\022\013\n\003ctr\030\003"
  " \001(\001\022\014\n\004adid\030\004 \001(\004\022/\n\016feature_values\030\005 \003"
  "(\0132\027.example.AdFeatureValue\022+\n\014feature_k"
  "eys\030\006 \003(\0132\025.example.AdFeatureKey\022\013\n\003cvr\030"
  "\007 \001(\001\0226\n\022cvr_feature_values\030\010 \003(\0132\032.exam"
  "ple.AdCVRFeatureValue\022/\n\020cvr_feature_key"
  "s\030\t \003(\0132\025.example.AdFeatureKey\"\300\001\n\tVisit"
  "Info\022\020\n\010province\030\001 \001(\r\022\017\n\007citystr\030\002 \001(\t\022"
  "\014\n\004city\030\003 \001(\r\022\014\n\004pvid\030\004 \001(\t\022\014\n\004oaid\030\005 \001("
  "\t\022/\n\010oaid_fea\030\006 \001(\0132\035.userbehavior.UserO"
  "aidFeature\0225\n\rorder_feature\030\007 \001(\0132\036.orde"
  "rfeature.OrderInfoFeature\"\202\001\n\tQueryInfo\022"
  "\r\n\005query\030\001 \001(\014\022$\n\006adlist\030\002 \003(\0132\024.example"
  ".AdInfo4Rank\022\023\n\013is_cons_fea\030\003 \001(\010\022+\n\rcon"
  "s_fea_full\030\004 \001(\0132\024.consfea.ConsFeaFull\"Z"
  "\n\nRankStruct\022%\n\tvisitinfo\030\001 \001(\0132\022.exampl"
  "e.VisitInfo\022%\n\tquerylist\030\002 \003(\0132\022.example"
  ".QueryInfo\"7\n\013RankRequest\022(\n\013rank_struct"
  "\030\001 \003(\0132\023.example.RankStruct\"%\n\014RankRespo"
  "nse\022\025\n\rrank_response\030\001 \001(\t2B\n\013EchoServic"
  "e\0223\n\004Echo\022\024.example.EchoRequest\032\025.exampl"
  "e.EchoResponse2B\n\013RankService\0223\n\004Rank\022\024."
  "example.RankRequest\032\025.example.RankRespon"
  "seB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_echo_2eproto_deps[4] = {
  &::descriptor_table_adinfo_2eproto,
  &::descriptor_table_consistent_5ffeature_2eproto,
  &::descriptor_table_orderfeature_2eproto,
  &::descriptor_table_userbehavior_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_echo_2eproto_sccs[11] = {
  &scc_info_AdCVRFeatureValue_echo_2eproto.base,
  &scc_info_AdFeatureKey_echo_2eproto.base,
  &scc_info_AdFeatureValue_echo_2eproto.base,
  &scc_info_AdInfo4Rank_echo_2eproto.base,
  &scc_info_EchoRequest_echo_2eproto.base,
  &scc_info_EchoResponse_echo_2eproto.base,
  &scc_info_QueryInfo_echo_2eproto.base,
  &scc_info_RankRequest_echo_2eproto.base,
  &scc_info_RankResponse_echo_2eproto.base,
  &scc_info_RankStruct_echo_2eproto.base,
  &scc_info_VisitInfo_echo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_echo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_echo_2eproto = {
  false, false, descriptor_table_protodef_echo_2eproto, "echo.proto", 1327,
  &descriptor_table_echo_2eproto_once, descriptor_table_echo_2eproto_sccs, descriptor_table_echo_2eproto_deps, 11, 4,
  schemas, file_default_instances, TableStruct_echo_2eproto::offsets,
  file_level_metadata_echo_2eproto, 11, file_level_enum_descriptors_echo_2eproto, file_level_service_descriptors_echo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_echo_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_echo_2eproto)), true);
namespace example {

// ===================================================================

void EchoRequest::InitAsDefaultInstance() {
}
class EchoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EchoRequest>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EchoRequest::EchoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:example.EchoRequest)
}
EchoRequest::EchoRequest(const EchoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:example.EchoRequest)
}

void EchoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EchoRequest_echo_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EchoRequest::~EchoRequest() {
  // @@protoc_insertion_point(destructor:example.EchoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EchoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EchoRequest::ArenaDtor(void* object) {
  EchoRequest* _this = reinterpret_cast< EchoRequest* >(object);
  (void)_this;
}
void EchoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EchoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EchoRequest& EchoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EchoRequest_echo_2eproto.base);
  return *internal_default_instance();
}


void EchoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:example.EchoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "example.EchoRequest.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EchoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.EchoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "example.EchoRequest.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.EchoRequest)
  return target;
}

size_t EchoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.EchoRequest)
  size_t total_size = 0;

  // required string message = 1;
  if (_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EchoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.EchoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EchoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.EchoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.EchoRequest)
    MergeFrom(*source);
  }
}

void EchoRequest::MergeFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.EchoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
}

void EchoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoRequest::CopyFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EchoRequest::InternalSwap(EchoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EchoResponse::InitAsDefaultInstance() {
}
class EchoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<EchoResponse>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EchoResponse::EchoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:example.EchoResponse)
}
EchoResponse::EchoResponse(const EchoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:example.EchoResponse)
}

void EchoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EchoResponse_echo_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EchoResponse::~EchoResponse() {
  // @@protoc_insertion_point(destructor:example.EchoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EchoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EchoResponse::ArenaDtor(void* object) {
  EchoResponse* _this = reinterpret_cast< EchoResponse* >(object);
  (void)_this;
}
void EchoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EchoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EchoResponse& EchoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EchoResponse_echo_2eproto.base);
  return *internal_default_instance();
}


void EchoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:example.EchoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "example.EchoResponse.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EchoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.EchoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "example.EchoResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.EchoResponse)
  return target;
}

size_t EchoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.EchoResponse)
  size_t total_size = 0;

  // required string message = 1;
  if (_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EchoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.EchoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EchoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.EchoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.EchoResponse)
    MergeFrom(*source);
  }
}

void EchoResponse::MergeFrom(const EchoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.EchoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
}

void EchoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoResponse::CopyFrom(const EchoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EchoResponse::InternalSwap(EchoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdFeatureKey::InitAsDefaultInstance() {
}
class AdFeatureKey::_Internal {
 public:
  using HasBits = decltype(std::declval<AdFeatureKey>()._has_bits_);
  static void set_has_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AdFeatureKey::AdFeatureKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:example.AdFeatureKey)
}
AdFeatureKey::AdFeatureKey(const AdFeatureKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sign_, &from.sign_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_) -
    reinterpret_cast<char*>(&sign_)) + sizeof(slot_));
  // @@protoc_insertion_point(copy_constructor:example.AdFeatureKey)
}

void AdFeatureKey::SharedCtor() {
  ::memset(&sign_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&sign_)) + sizeof(slot_));
}

AdFeatureKey::~AdFeatureKey() {
  // @@protoc_insertion_point(destructor:example.AdFeatureKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdFeatureKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AdFeatureKey::ArenaDtor(void* object) {
  AdFeatureKey* _this = reinterpret_cast< AdFeatureKey* >(object);
  (void)_this;
}
void AdFeatureKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdFeatureKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdFeatureKey& AdFeatureKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdFeatureKey_echo_2eproto.base);
  return *internal_default_instance();
}


void AdFeatureKey::Clear() {
// @@protoc_insertion_point(message_clear_start:example.AdFeatureKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sign_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_) -
        reinterpret_cast<char*>(&sign_)) + sizeof(slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdFeatureKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 sign = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sign(&has_bits);
          sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdFeatureKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.AdFeatureKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sign = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sign(), target);
  }

  // optional uint32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.AdFeatureKey)
  return target;
}

size_t AdFeatureKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.AdFeatureKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 sign = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sign());
    }

    // optional uint32 slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdFeatureKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.AdFeatureKey)
  GOOGLE_DCHECK_NE(&from, this);
  const AdFeatureKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdFeatureKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.AdFeatureKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.AdFeatureKey)
    MergeFrom(*source);
  }
}

void AdFeatureKey::MergeFrom(const AdFeatureKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.AdFeatureKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sign_ = from.sign_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_ = from.slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdFeatureKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.AdFeatureKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdFeatureKey::CopyFrom(const AdFeatureKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.AdFeatureKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdFeatureKey::IsInitialized() const {
  return true;
}

void AdFeatureKey::InternalSwap(AdFeatureKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdFeatureKey, slot_)
      + sizeof(AdFeatureKey::slot_)
      - PROTOBUF_FIELD_OFFSET(AdFeatureKey, sign_)>(
          reinterpret_cast<char*>(&sign_),
          reinterpret_cast<char*>(&other->sign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdFeatureKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdFeatureValue::InitAsDefaultInstance() {
}
class AdFeatureValue::_Internal {
 public:
  using HasBits = decltype(std::declval<AdFeatureValue>()._has_bits_);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dwlr_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AdFeatureValue::AdFeatureValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fm_array_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:example.AdFeatureValue)
}
AdFeatureValue::AdFeatureValue(const AdFeatureValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fm_array_(from.fm_array_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&show_, &from.show_,
    static_cast<size_t>(reinterpret_cast<char*>(&dwlr_w_) -
    reinterpret_cast<char*>(&show_)) + sizeof(dwlr_w_));
  // @@protoc_insertion_point(copy_constructor:example.AdFeatureValue)
}

void AdFeatureValue::SharedCtor() {
  ::memset(&show_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dwlr_w_) -
      reinterpret_cast<char*>(&show_)) + sizeof(dwlr_w_));
}

AdFeatureValue::~AdFeatureValue() {
  // @@protoc_insertion_point(destructor:example.AdFeatureValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdFeatureValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AdFeatureValue::ArenaDtor(void* object) {
  AdFeatureValue* _this = reinterpret_cast< AdFeatureValue* >(object);
  (void)_this;
}
void AdFeatureValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdFeatureValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdFeatureValue& AdFeatureValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdFeatureValue_echo_2eproto.base);
  return *internal_default_instance();
}


void AdFeatureValue::Clear() {
// @@protoc_insertion_point(message_clear_start:example.AdFeatureValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fm_array_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&show_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dwlr_w_) -
        reinterpret_cast<char*>(&show_)) + sizeof(dwlr_w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdFeatureValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float show = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_show(&has_bits);
          show_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float clk = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_clk(&has_bits);
          clk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float weight = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float fm_array = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fm_array(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_fm_array(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dwlr_w = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_dwlr_w(&has_bits);
          dwlr_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdFeatureValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.AdFeatureValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float show = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_show(), target);
  }

  // optional float clk = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_clk(), target);
  }

  // optional float weight = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_weight(), target);
  }

  // repeated float fm_array = 4 [packed = true];
  if (this->_internal_fm_array_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_fm_array(), target);
  }

  // optional float dwlr_w = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_dwlr_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.AdFeatureValue)
  return target;
}

size_t AdFeatureValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.AdFeatureValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float fm_array = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fm_array_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fm_array_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float show = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float clk = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float weight = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float dwlr_w = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdFeatureValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.AdFeatureValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AdFeatureValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdFeatureValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.AdFeatureValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.AdFeatureValue)
    MergeFrom(*source);
  }
}

void AdFeatureValue::MergeFrom(const AdFeatureValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.AdFeatureValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fm_array_.MergeFrom(from.fm_array_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      show_ = from.show_;
    }
    if (cached_has_bits & 0x00000002u) {
      clk_ = from.clk_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      dwlr_w_ = from.dwlr_w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdFeatureValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.AdFeatureValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdFeatureValue::CopyFrom(const AdFeatureValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.AdFeatureValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdFeatureValue::IsInitialized() const {
  return true;
}

void AdFeatureValue::InternalSwap(AdFeatureValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fm_array_.InternalSwap(&other->fm_array_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdFeatureValue, dwlr_w_)
      + sizeof(AdFeatureValue::dwlr_w_)
      - PROTOBUF_FIELD_OFFSET(AdFeatureValue, show_)>(
          reinterpret_cast<char*>(&show_),
          reinterpret_cast<char*>(&other->show_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdFeatureValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdCVRFeatureValue::InitAsDefaultInstance() {
}
class AdCVRFeatureValue::_Internal {
 public:
};

AdCVRFeatureValue::AdCVRFeatureValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  emb_w_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:example.AdCVRFeatureValue)
}
AdCVRFeatureValue::AdCVRFeatureValue(const AdCVRFeatureValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      emb_w_(from.emb_w_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:example.AdCVRFeatureValue)
}

void AdCVRFeatureValue::SharedCtor() {
}

AdCVRFeatureValue::~AdCVRFeatureValue() {
  // @@protoc_insertion_point(destructor:example.AdCVRFeatureValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdCVRFeatureValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AdCVRFeatureValue::ArenaDtor(void* object) {
  AdCVRFeatureValue* _this = reinterpret_cast< AdCVRFeatureValue* >(object);
  (void)_this;
}
void AdCVRFeatureValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdCVRFeatureValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdCVRFeatureValue& AdCVRFeatureValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdCVRFeatureValue_echo_2eproto.base);
  return *internal_default_instance();
}


void AdCVRFeatureValue::Clear() {
// @@protoc_insertion_point(message_clear_start:example.AdCVRFeatureValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emb_w_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdCVRFeatureValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float emb_w = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_emb_w(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_emb_w(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdCVRFeatureValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.AdCVRFeatureValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float emb_w = 1 [packed = true];
  if (this->_internal_emb_w_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_emb_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.AdCVRFeatureValue)
  return target;
}

size_t AdCVRFeatureValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.AdCVRFeatureValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float emb_w = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_emb_w_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _emb_w_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdCVRFeatureValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.AdCVRFeatureValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AdCVRFeatureValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdCVRFeatureValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.AdCVRFeatureValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.AdCVRFeatureValue)
    MergeFrom(*source);
  }
}

void AdCVRFeatureValue::MergeFrom(const AdCVRFeatureValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.AdCVRFeatureValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emb_w_.MergeFrom(from.emb_w_);
}

void AdCVRFeatureValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.AdCVRFeatureValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdCVRFeatureValue::CopyFrom(const AdCVRFeatureValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.AdCVRFeatureValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdCVRFeatureValue::IsInitialized() const {
  return true;
}

void AdCVRFeatureValue::InternalSwap(AdCVRFeatureValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  emb_w_.InternalSwap(&other->emb_w_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdCVRFeatureValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdInfo4Rank::InitAsDefaultInstance() {
  ::example::_AdInfo4Rank_default_instance_._instance.get_mutable()->adinfo_ = const_cast< ::adinfo::AdInfo*>(
      ::adinfo::AdInfo::internal_default_instance());
}
class AdInfo4Rank::_Internal {
 public:
  using HasBits = decltype(std::declval<AdInfo4Rank>()._has_bits_);
  static const ::adinfo::AdInfo& adinfo(const AdInfo4Rank* msg);
  static void set_has_adinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rankscore(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ctr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_adid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cvr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::adinfo::AdInfo&
AdInfo4Rank::_Internal::adinfo(const AdInfo4Rank* msg) {
  return *msg->adinfo_;
}
void AdInfo4Rank::clear_adinfo() {
  if (adinfo_ != nullptr) adinfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AdInfo4Rank::AdInfo4Rank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  feature_values_(arena),
  feature_keys_(arena),
  cvr_feature_values_(arena),
  cvr_feature_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:example.AdInfo4Rank)
}
AdInfo4Rank::AdInfo4Rank(const AdInfo4Rank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      feature_values_(from.feature_values_),
      feature_keys_(from.feature_keys_),
      cvr_feature_values_(from.cvr_feature_values_),
      cvr_feature_keys_(from.cvr_feature_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_adinfo()) {
    adinfo_ = new ::adinfo::AdInfo(*from.adinfo_);
  } else {
    adinfo_ = nullptr;
  }
  ::memcpy(&rankscore_, &from.rankscore_,
    static_cast<size_t>(reinterpret_cast<char*>(&cvr_) -
    reinterpret_cast<char*>(&rankscore_)) + sizeof(cvr_));
  // @@protoc_insertion_point(copy_constructor:example.AdInfo4Rank)
}

void AdInfo4Rank::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdInfo4Rank_echo_2eproto.base);
  ::memset(&adinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cvr_) -
      reinterpret_cast<char*>(&adinfo_)) + sizeof(cvr_));
}

AdInfo4Rank::~AdInfo4Rank() {
  // @@protoc_insertion_point(destructor:example.AdInfo4Rank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdInfo4Rank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete adinfo_;
}

void AdInfo4Rank::ArenaDtor(void* object) {
  AdInfo4Rank* _this = reinterpret_cast< AdInfo4Rank* >(object);
  (void)_this;
}
void AdInfo4Rank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdInfo4Rank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdInfo4Rank& AdInfo4Rank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdInfo4Rank_echo_2eproto.base);
  return *internal_default_instance();
}


void AdInfo4Rank::Clear() {
// @@protoc_insertion_point(message_clear_start:example.AdInfo4Rank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_values_.Clear();
  feature_keys_.Clear();
  cvr_feature_values_.Clear();
  cvr_feature_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(adinfo_ != nullptr);
    adinfo_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&rankscore_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cvr_) -
        reinterpret_cast<char*>(&rankscore_)) + sizeof(cvr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdInfo4Rank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .adinfo.AdInfo adinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_adinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double rankscore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_rankscore(&has_bits);
          rankscore_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ctr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_ctr(&has_bits);
          ctr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint64 adid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_adid(&has_bits);
          adid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .example.AdFeatureValue feature_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .example.AdFeatureKey feature_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double cvr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_cvr(&has_bits);
          cvr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .example.AdCVRFeatureValue cvr_feature_values = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cvr_feature_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .example.AdFeatureKey cvr_feature_keys = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cvr_feature_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdInfo4Rank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.AdInfo4Rank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .adinfo.AdInfo adinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::adinfo(this), target, stream);
  }

  // optional double rankscore = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rankscore(), target);
  }

  // optional double ctr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_ctr(), target);
  }

  // optional uint64 adid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_adid(), target);
  }

  // repeated .example.AdFeatureValue feature_values = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_feature_values(i), target, stream);
  }

  // repeated .example.AdFeatureKey feature_keys = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_feature_keys(i), target, stream);
  }

  // optional double cvr = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_cvr(), target);
  }

  // repeated .example.AdCVRFeatureValue cvr_feature_values = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cvr_feature_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_cvr_feature_values(i), target, stream);
  }

  // repeated .example.AdFeatureKey cvr_feature_keys = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cvr_feature_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_cvr_feature_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.AdInfo4Rank)
  return target;
}

size_t AdInfo4Rank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.AdInfo4Rank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .example.AdFeatureValue feature_values = 5;
  total_size += 1UL * this->_internal_feature_values_size();
  for (const auto& msg : this->feature_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .example.AdFeatureKey feature_keys = 6;
  total_size += 1UL * this->_internal_feature_keys_size();
  for (const auto& msg : this->feature_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .example.AdCVRFeatureValue cvr_feature_values = 8;
  total_size += 1UL * this->_internal_cvr_feature_values_size();
  for (const auto& msg : this->cvr_feature_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .example.AdFeatureKey cvr_feature_keys = 9;
  total_size += 1UL * this->_internal_cvr_feature_keys_size();
  for (const auto& msg : this->cvr_feature_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .adinfo.AdInfo adinfo = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adinfo_);
    }

    // optional double rankscore = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double ctr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 adid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_adid());
    }

    // optional double cvr = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdInfo4Rank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.AdInfo4Rank)
  GOOGLE_DCHECK_NE(&from, this);
  const AdInfo4Rank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdInfo4Rank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.AdInfo4Rank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.AdInfo4Rank)
    MergeFrom(*source);
  }
}

void AdInfo4Rank::MergeFrom(const AdInfo4Rank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.AdInfo4Rank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_values_.MergeFrom(from.feature_values_);
  feature_keys_.MergeFrom(from.feature_keys_);
  cvr_feature_values_.MergeFrom(from.cvr_feature_values_);
  cvr_feature_keys_.MergeFrom(from.cvr_feature_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_adinfo()->::adinfo::AdInfo::MergeFrom(from._internal_adinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      rankscore_ = from.rankscore_;
    }
    if (cached_has_bits & 0x00000004u) {
      ctr_ = from.ctr_;
    }
    if (cached_has_bits & 0x00000008u) {
      adid_ = from.adid_;
    }
    if (cached_has_bits & 0x00000010u) {
      cvr_ = from.cvr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdInfo4Rank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.AdInfo4Rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdInfo4Rank::CopyFrom(const AdInfo4Rank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.AdInfo4Rank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdInfo4Rank::IsInitialized() const {
  if (_internal_has_adinfo()) {
    if (!adinfo_->IsInitialized()) return false;
  }
  return true;
}

void AdInfo4Rank::InternalSwap(AdInfo4Rank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feature_values_.InternalSwap(&other->feature_values_);
  feature_keys_.InternalSwap(&other->feature_keys_);
  cvr_feature_values_.InternalSwap(&other->cvr_feature_values_);
  cvr_feature_keys_.InternalSwap(&other->cvr_feature_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdInfo4Rank, cvr_)
      + sizeof(AdInfo4Rank::cvr_)
      - PROTOBUF_FIELD_OFFSET(AdInfo4Rank, adinfo_)>(
          reinterpret_cast<char*>(&adinfo_),
          reinterpret_cast<char*>(&other->adinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdInfo4Rank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisitInfo::InitAsDefaultInstance() {
  ::example::_VisitInfo_default_instance_._instance.get_mutable()->oaid_fea_ = const_cast< ::userbehavior::UserOaidFeature*>(
      ::userbehavior::UserOaidFeature::internal_default_instance());
  ::example::_VisitInfo_default_instance_._instance.get_mutable()->order_feature_ = const_cast< ::orderfeature::OrderInfoFeature*>(
      ::orderfeature::OrderInfoFeature::internal_default_instance());
}
class VisitInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VisitInfo>()._has_bits_);
  static void set_has_province(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_citystr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_city(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pvid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_oaid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::userbehavior::UserOaidFeature& oaid_fea(const VisitInfo* msg);
  static void set_has_oaid_fea(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::orderfeature::OrderInfoFeature& order_feature(const VisitInfo* msg);
  static void set_has_order_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::userbehavior::UserOaidFeature&
VisitInfo::_Internal::oaid_fea(const VisitInfo* msg) {
  return *msg->oaid_fea_;
}
const ::orderfeature::OrderInfoFeature&
VisitInfo::_Internal::order_feature(const VisitInfo* msg) {
  return *msg->order_feature_;
}
void VisitInfo::clear_oaid_fea() {
  if (oaid_fea_ != nullptr) oaid_fea_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void VisitInfo::clear_order_feature() {
  if (order_feature_ != nullptr) order_feature_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
VisitInfo::VisitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:example.VisitInfo)
}
VisitInfo::VisitInfo(const VisitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  citystr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_citystr()) {
    citystr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_citystr(),
      GetArena());
  }
  pvid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pvid()) {
    pvid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pvid(),
      GetArena());
  }
  oaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_oaid()) {
    oaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_oaid(),
      GetArena());
  }
  if (from._internal_has_oaid_fea()) {
    oaid_fea_ = new ::userbehavior::UserOaidFeature(*from.oaid_fea_);
  } else {
    oaid_fea_ = nullptr;
  }
  if (from._internal_has_order_feature()) {
    order_feature_ = new ::orderfeature::OrderInfoFeature(*from.order_feature_);
  } else {
    order_feature_ = nullptr;
  }
  ::memcpy(&province_, &from.province_,
    static_cast<size_t>(reinterpret_cast<char*>(&city_) -
    reinterpret_cast<char*>(&province_)) + sizeof(city_));
  // @@protoc_insertion_point(copy_constructor:example.VisitInfo)
}

void VisitInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisitInfo_echo_2eproto.base);
  citystr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pvid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oaid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&oaid_fea_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&city_) -
      reinterpret_cast<char*>(&oaid_fea_)) + sizeof(city_));
}

VisitInfo::~VisitInfo() {
  // @@protoc_insertion_point(destructor:example.VisitInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VisitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  citystr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pvid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oaid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete oaid_fea_;
  if (this != internal_default_instance()) delete order_feature_;
}

void VisitInfo::ArenaDtor(void* object) {
  VisitInfo* _this = reinterpret_cast< VisitInfo* >(object);
  (void)_this;
}
void VisitInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisitInfo& VisitInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisitInfo_echo_2eproto.base);
  return *internal_default_instance();
}


void VisitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:example.VisitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      citystr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pvid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      oaid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(oaid_fea_ != nullptr);
      oaid_fea_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(order_feature_ != nullptr);
      order_feature_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&province_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&city_) -
        reinterpret_cast<char*>(&province_)) + sizeof(city_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisitInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 province = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_province(&has_bits);
          province_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string citystr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_citystr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "example.VisitInfo.citystr");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 city = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_city(&has_bits);
          city_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pvid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pvid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "example.VisitInfo.pvid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string oaid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_oaid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "example.VisitInfo.oaid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .userbehavior.UserOaidFeature oaid_fea = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_oaid_fea(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .orderfeature.OrderInfoFeature order_feature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisitInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.VisitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 province = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_province(), target);
  }

  // optional string citystr = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_citystr().data(), static_cast<int>(this->_internal_citystr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "example.VisitInfo.citystr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_citystr(), target);
  }

  // optional uint32 city = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_city(), target);
  }

  // optional string pvid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pvid().data(), static_cast<int>(this->_internal_pvid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "example.VisitInfo.pvid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pvid(), target);
  }

  // optional string oaid = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_oaid().data(), static_cast<int>(this->_internal_oaid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "example.VisitInfo.oaid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_oaid(), target);
  }

  // optional .userbehavior.UserOaidFeature oaid_fea = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::oaid_fea(this), target, stream);
  }

  // optional .orderfeature.OrderInfoFeature order_feature = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::order_feature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.VisitInfo)
  return target;
}

size_t VisitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.VisitInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string citystr = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_citystr());
    }

    // optional string pvid = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pvid());
    }

    // optional string oaid = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oaid());
    }

    // optional .userbehavior.UserOaidFeature oaid_fea = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oaid_fea_);
    }

    // optional .orderfeature.OrderInfoFeature order_feature = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_feature_);
    }

    // optional uint32 province = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_province());
    }

    // optional uint32 city = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_city());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisitInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.VisitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VisitInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisitInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.VisitInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.VisitInfo)
    MergeFrom(*source);
  }
}

void VisitInfo::MergeFrom(const VisitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.VisitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_citystr(from._internal_citystr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pvid(from._internal_pvid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_oaid(from._internal_oaid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_oaid_fea()->::userbehavior::UserOaidFeature::MergeFrom(from._internal_oaid_fea());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_order_feature()->::orderfeature::OrderInfoFeature::MergeFrom(from._internal_order_feature());
    }
    if (cached_has_bits & 0x00000020u) {
      province_ = from.province_;
    }
    if (cached_has_bits & 0x00000040u) {
      city_ = from.city_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VisitInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.VisitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisitInfo::CopyFrom(const VisitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.VisitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisitInfo::IsInitialized() const {
  return true;
}

void VisitInfo::InternalSwap(VisitInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  citystr_.Swap(&other->citystr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pvid_.Swap(&other->pvid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  oaid_.Swap(&other->oaid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisitInfo, city_)
      + sizeof(VisitInfo::city_)
      - PROTOBUF_FIELD_OFFSET(VisitInfo, oaid_fea_)>(
          reinterpret_cast<char*>(&oaid_fea_),
          reinterpret_cast<char*>(&other->oaid_fea_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisitInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryInfo::InitAsDefaultInstance() {
  ::example::_QueryInfo_default_instance_._instance.get_mutable()->cons_fea_full_ = const_cast< ::consfea::ConsFeaFull*>(
      ::consfea::ConsFeaFull::internal_default_instance());
}
class QueryInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryInfo>()._has_bits_);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_cons_fea(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::consfea::ConsFeaFull& cons_fea_full(const QueryInfo* msg);
  static void set_has_cons_fea_full(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::consfea::ConsFeaFull&
QueryInfo::_Internal::cons_fea_full(const QueryInfo* msg) {
  return *msg->cons_fea_full_;
}
void QueryInfo::clear_cons_fea_full() {
  if (cons_fea_full_ != nullptr) cons_fea_full_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
QueryInfo::QueryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  adlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:example.QueryInfo)
}
QueryInfo::QueryInfo(const QueryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      adlist_(from.adlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_query()) {
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_query(),
      GetArena());
  }
  if (from._internal_has_cons_fea_full()) {
    cons_fea_full_ = new ::consfea::ConsFeaFull(*from.cons_fea_full_);
  } else {
    cons_fea_full_ = nullptr;
  }
  is_cons_fea_ = from.is_cons_fea_;
  // @@protoc_insertion_point(copy_constructor:example.QueryInfo)
}

void QueryInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryInfo_echo_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cons_fea_full_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_cons_fea_) -
      reinterpret_cast<char*>(&cons_fea_full_)) + sizeof(is_cons_fea_));
}

QueryInfo::~QueryInfo() {
  // @@protoc_insertion_point(destructor:example.QueryInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cons_fea_full_;
}

void QueryInfo::ArenaDtor(void* object) {
  QueryInfo* _this = reinterpret_cast< QueryInfo* >(object);
  (void)_this;
}
void QueryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryInfo& QueryInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryInfo_echo_2eproto.base);
  return *internal_default_instance();
}


void QueryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:example.QueryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  adlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      query_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cons_fea_full_ != nullptr);
      cons_fea_full_->Clear();
    }
  }
  is_cons_fea_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .example.AdInfo4Rank adlist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_cons_fea = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_cons_fea(&has_bits);
          is_cons_fea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .consfea.ConsFeaFull cons_fea_full = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cons_fea_full(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.QueryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes query = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_query(), target);
  }

  // repeated .example.AdInfo4Rank adlist = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_adlist(i), target, stream);
  }

  // optional bool is_cons_fea = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_cons_fea(), target);
  }

  // optional .consfea.ConsFeaFull cons_fea_full = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cons_fea_full(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.QueryInfo)
  return target;
}

size_t QueryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.QueryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .example.AdInfo4Rank adlist = 2;
  total_size += 1UL * this->_internal_adlist_size();
  for (const auto& msg : this->adlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes query = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_query());
    }

    // optional .consfea.ConsFeaFull cons_fea_full = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cons_fea_full_);
    }

    // optional bool is_cons_fea = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.QueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.QueryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.QueryInfo)
    MergeFrom(*source);
  }
}

void QueryInfo::MergeFrom(const QueryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.QueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  adlist_.MergeFrom(from.adlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_query(from._internal_query());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cons_fea_full()->::consfea::ConsFeaFull::MergeFrom(from._internal_cons_fea_full());
    }
    if (cached_has_bits & 0x00000004u) {
      is_cons_fea_ = from.is_cons_fea_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryInfo::CopyFrom(const QueryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryInfo::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(adlist_)) return false;
  return true;
}

void QueryInfo::InternalSwap(QueryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  adlist_.InternalSwap(&other->adlist_);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryInfo, is_cons_fea_)
      + sizeof(QueryInfo::is_cons_fea_)
      - PROTOBUF_FIELD_OFFSET(QueryInfo, cons_fea_full_)>(
          reinterpret_cast<char*>(&cons_fea_full_),
          reinterpret_cast<char*>(&other->cons_fea_full_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankStruct::InitAsDefaultInstance() {
  ::example::_RankStruct_default_instance_._instance.get_mutable()->visitinfo_ = const_cast< ::example::VisitInfo*>(
      ::example::VisitInfo::internal_default_instance());
}
class RankStruct::_Internal {
 public:
  using HasBits = decltype(std::declval<RankStruct>()._has_bits_);
  static const ::example::VisitInfo& visitinfo(const RankStruct* msg);
  static void set_has_visitinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::example::VisitInfo&
RankStruct::_Internal::visitinfo(const RankStruct* msg) {
  return *msg->visitinfo_;
}
RankStruct::RankStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  querylist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:example.RankStruct)
}
RankStruct::RankStruct(const RankStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      querylist_(from.querylist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_visitinfo()) {
    visitinfo_ = new ::example::VisitInfo(*from.visitinfo_);
  } else {
    visitinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:example.RankStruct)
}

void RankStruct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankStruct_echo_2eproto.base);
  visitinfo_ = nullptr;
}

RankStruct::~RankStruct() {
  // @@protoc_insertion_point(destructor:example.RankStruct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RankStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete visitinfo_;
}

void RankStruct::ArenaDtor(void* object) {
  RankStruct* _this = reinterpret_cast< RankStruct* >(object);
  (void)_this;
}
void RankStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RankStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankStruct& RankStruct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankStruct_echo_2eproto.base);
  return *internal_default_instance();
}


void RankStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:example.RankStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  querylist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(visitinfo_ != nullptr);
    visitinfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RankStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .example.VisitInfo visitinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_visitinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .example.QueryInfo querylist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_querylist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RankStruct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.RankStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .example.VisitInfo visitinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::visitinfo(this), target, stream);
  }

  // repeated .example.QueryInfo querylist = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_querylist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_querylist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.RankStruct)
  return target;
}

size_t RankStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.RankStruct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .example.QueryInfo querylist = 2;
  total_size += 1UL * this->_internal_querylist_size();
  for (const auto& msg : this->querylist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .example.VisitInfo visitinfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visitinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.RankStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const RankStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.RankStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.RankStruct)
    MergeFrom(*source);
  }
}

void RankStruct::MergeFrom(const RankStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.RankStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  querylist_.MergeFrom(from.querylist_);
  if (from._internal_has_visitinfo()) {
    _internal_mutable_visitinfo()->::example::VisitInfo::MergeFrom(from._internal_visitinfo());
  }
}

void RankStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.RankStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankStruct::CopyFrom(const RankStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.RankStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankStruct::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(querylist_)) return false;
  return true;
}

void RankStruct::InternalSwap(RankStruct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  querylist_.InternalSwap(&other->querylist_);
  swap(visitinfo_, other->visitinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankStruct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankRequest::InitAsDefaultInstance() {
}
class RankRequest::_Internal {
 public:
};

RankRequest::RankRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rank_struct_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:example.RankRequest)
}
RankRequest::RankRequest(const RankRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rank_struct_(from.rank_struct_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:example.RankRequest)
}

void RankRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankRequest_echo_2eproto.base);
}

RankRequest::~RankRequest() {
  // @@protoc_insertion_point(destructor:example.RankRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RankRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RankRequest::ArenaDtor(void* object) {
  RankRequest* _this = reinterpret_cast< RankRequest* >(object);
  (void)_this;
}
void RankRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RankRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankRequest& RankRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankRequest_echo_2eproto.base);
  return *internal_default_instance();
}


void RankRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:example.RankRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rank_struct_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RankRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .example.RankStruct rank_struct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rank_struct(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RankRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.RankRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .example.RankStruct rank_struct = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rank_struct_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rank_struct(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.RankRequest)
  return target;
}

size_t RankRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.RankRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .example.RankStruct rank_struct = 1;
  total_size += 1UL * this->_internal_rank_struct_size();
  for (const auto& msg : this->rank_struct_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.RankRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RankRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.RankRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.RankRequest)
    MergeFrom(*source);
  }
}

void RankRequest::MergeFrom(const RankRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.RankRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rank_struct_.MergeFrom(from.rank_struct_);
}

void RankRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.RankRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankRequest::CopyFrom(const RankRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.RankRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rank_struct_)) return false;
  return true;
}

void RankRequest::InternalSwap(RankRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rank_struct_.InternalSwap(&other->rank_struct_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankResponse::InitAsDefaultInstance() {
}
class RankResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RankResponse>()._has_bits_);
  static void set_has_rank_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RankResponse::RankResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:example.RankResponse)
}
RankResponse::RankResponse(const RankResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rank_response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rank_response()) {
    rank_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rank_response(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:example.RankResponse)
}

void RankResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankResponse_echo_2eproto.base);
  rank_response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RankResponse::~RankResponse() {
  // @@protoc_insertion_point(destructor:example.RankResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RankResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rank_response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RankResponse::ArenaDtor(void* object) {
  RankResponse* _this = reinterpret_cast< RankResponse* >(object);
  (void)_this;
}
void RankResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RankResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankResponse& RankResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankResponse_echo_2eproto.base);
  return *internal_default_instance();
}


void RankResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:example.RankResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rank_response_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RankResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string rank_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rank_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "example.RankResponse.rank_response");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RankResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.RankResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string rank_response = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rank_response().data(), static_cast<int>(this->_internal_rank_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "example.RankResponse.rank_response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rank_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.RankResponse)
  return target;
}

size_t RankResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.RankResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string rank_response = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rank_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.RankResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RankResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.RankResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.RankResponse)
    MergeFrom(*source);
  }
}

void RankResponse::MergeFrom(const RankResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.RankResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rank_response()) {
    _internal_set_rank_response(from._internal_rank_response());
  }
}

void RankResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.RankResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankResponse::CopyFrom(const RankResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.RankResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankResponse::IsInitialized() const {
  return true;
}

void RankResponse::InternalSwap(RankResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rank_response_.Swap(&other->rank_response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RankResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

EchoService::~EchoService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* EchoService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_echo_2eproto);
  return file_level_service_descriptors_echo_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* EchoService::GetDescriptor() {
  return descriptor();
}

void EchoService::Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::example::EchoRequest*,
                         ::example::EchoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Echo() not implemented.");
  done->Run();
}

void EchoService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_echo_2eproto[0]);
  switch(method->index()) {
    case 0:
      Echo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::example::EchoRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::example::EchoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& EchoService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::example::EchoRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& EchoService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::example::EchoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

EchoService_Stub::EchoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
EchoService_Stub::EchoService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
EchoService_Stub::~EchoService_Stub() {
  if (owns_channel_) delete channel_;
}

void EchoService_Stub::Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::example::EchoRequest* request,
                              ::example::EchoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

RankService::~RankService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RankService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_echo_2eproto);
  return file_level_service_descriptors_echo_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RankService::GetDescriptor() {
  return descriptor();
}

void RankService::Rank(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::example::RankRequest*,
                         ::example::RankResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Rank() not implemented.");
  done->Run();
}

void RankService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_echo_2eproto[1]);
  switch(method->index()) {
    case 0:
      Rank(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::example::RankRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::example::RankResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RankService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::example::RankRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RankService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::example::RankResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RankService_Stub::RankService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RankService_Stub::RankService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RankService_Stub::~RankService_Stub() {
  if (owns_channel_) delete channel_;
}

void RankService_Stub::Rank(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::example::RankRequest* request,
                              ::example::RankResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace example
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::example::EchoRequest* Arena::CreateMaybeMessage< ::example::EchoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::example::EchoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::example::EchoResponse* Arena::CreateMaybeMessage< ::example::EchoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::example::EchoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::example::AdFeatureKey* Arena::CreateMaybeMessage< ::example::AdFeatureKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::example::AdFeatureKey >(arena);
}
template<> PROTOBUF_NOINLINE ::example::AdFeatureValue* Arena::CreateMaybeMessage< ::example::AdFeatureValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::example::AdFeatureValue >(arena);
}
template<> PROTOBUF_NOINLINE ::example::AdCVRFeatureValue* Arena::CreateMaybeMessage< ::example::AdCVRFeatureValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::example::AdCVRFeatureValue >(arena);
}
template<> PROTOBUF_NOINLINE ::example::AdInfo4Rank* Arena::CreateMaybeMessage< ::example::AdInfo4Rank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::example::AdInfo4Rank >(arena);
}
template<> PROTOBUF_NOINLINE ::example::VisitInfo* Arena::CreateMaybeMessage< ::example::VisitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::example::VisitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::example::QueryInfo* Arena::CreateMaybeMessage< ::example::QueryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::example::QueryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::example::RankStruct* Arena::CreateMaybeMessage< ::example::RankStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::example::RankStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::example::RankRequest* Arena::CreateMaybeMessage< ::example::RankRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::example::RankRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::example::RankResponse* Arena::CreateMaybeMessage< ::example::RankResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::example::RankResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
