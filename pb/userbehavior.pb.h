// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userbehavior.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userbehavior_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userbehavior_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userbehavior_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userbehavior_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userbehavior_2eproto;
namespace userbehavior {
class UserBehavior;
class UserBehaviorDefaultTypeInternal;
extern UserBehaviorDefaultTypeInternal _UserBehavior_default_instance_;
class UserOaidFeature;
class UserOaidFeatureDefaultTypeInternal;
extern UserOaidFeatureDefaultTypeInternal _UserOaidFeature_default_instance_;
}  // namespace userbehavior
PROTOBUF_NAMESPACE_OPEN
template<> ::userbehavior::UserBehavior* Arena::CreateMaybeMessage<::userbehavior::UserBehavior>(Arena*);
template<> ::userbehavior::UserOaidFeature* Arena::CreateMaybeMessage<::userbehavior::UserOaidFeature>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userbehavior {

// ===================================================================

class UserBehavior PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userbehavior.UserBehavior) */ {
 public:
  inline UserBehavior() : UserBehavior(nullptr) {};
  virtual ~UserBehavior();

  UserBehavior(const UserBehavior& from);
  UserBehavior(UserBehavior&& from) noexcept
    : UserBehavior() {
    *this = ::std::move(from);
  }

  inline UserBehavior& operator=(const UserBehavior& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserBehavior& operator=(UserBehavior&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserBehavior& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserBehavior* internal_default_instance() {
    return reinterpret_cast<const UserBehavior*>(
               &_UserBehavior_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserBehavior& a, UserBehavior& b) {
    a.Swap(&b);
  }
  inline void Swap(UserBehavior* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserBehavior* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserBehavior* New() const final {
    return CreateMaybeMessage<UserBehavior>(nullptr);
  }

  UserBehavior* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserBehavior>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserBehavior& from);
  void MergeFrom(const UserBehavior& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserBehavior* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userbehavior.UserBehavior";
  }
  protected:
  explicit UserBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userbehavior_2eproto);
    return ::descriptor_table_userbehavior_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 2,
    kSearchtimeFieldNumber = 1,
    kPlatformFieldNumber = 3,
  };
  // optional string query = 2;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_query();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_query(
      std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // optional uint64 searchtime = 1;
  bool has_searchtime() const;
  private:
  bool _internal_has_searchtime() const;
  public:
  void clear_searchtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 searchtime() const;
  void set_searchtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_searchtime() const;
  void _internal_set_searchtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 platform = 3;
  bool has_platform() const;
  private:
  bool _internal_has_platform() const;
  public:
  void clear_platform();
  ::PROTOBUF_NAMESPACE_ID::uint32 platform() const;
  void set_platform(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_platform() const;
  void _internal_set_platform(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:userbehavior.UserBehavior)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::uint64 searchtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 platform_;
  friend struct ::TableStruct_userbehavior_2eproto;
};
// -------------------------------------------------------------------

class UserOaidFeature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:userbehavior.UserOaidFeature) */ {
 public:
  inline UserOaidFeature() : UserOaidFeature(nullptr) {};
  virtual ~UserOaidFeature();

  UserOaidFeature(const UserOaidFeature& from);
  UserOaidFeature(UserOaidFeature&& from) noexcept
    : UserOaidFeature() {
    *this = ::std::move(from);
  }

  inline UserOaidFeature& operator=(const UserOaidFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOaidFeature& operator=(UserOaidFeature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserOaidFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserOaidFeature* internal_default_instance() {
    return reinterpret_cast<const UserOaidFeature*>(
               &_UserOaidFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserOaidFeature& a, UserOaidFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(UserOaidFeature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserOaidFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserOaidFeature* New() const final {
    return CreateMaybeMessage<UserOaidFeature>(nullptr);
  }

  UserOaidFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserOaidFeature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserOaidFeature& from);
  void MergeFrom(const UserOaidFeature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserOaidFeature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userbehavior.UserOaidFeature";
  }
  protected:
  explicit UserOaidFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userbehavior_2eproto);
    return ::descriptor_table_userbehavior_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOaidFeaFieldNumber = 1,
  };
  // optional string oaid_fea = 1;
  bool has_oaid_fea() const;
  private:
  bool _internal_has_oaid_fea() const;
  public:
  void clear_oaid_fea();
  const std::string& oaid_fea() const;
  void set_oaid_fea(const std::string& value);
  void set_oaid_fea(std::string&& value);
  void set_oaid_fea(const char* value);
  void set_oaid_fea(const char* value, size_t size);
  std::string* mutable_oaid_fea();
  std::string* release_oaid_fea();
  void set_allocated_oaid_fea(std::string* oaid_fea);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_oaid_fea();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_oaid_fea(
      std::string* oaid_fea);
  private:
  const std::string& _internal_oaid_fea() const;
  void _internal_set_oaid_fea(const std::string& value);
  std::string* _internal_mutable_oaid_fea();
  public:

  // @@protoc_insertion_point(class_scope:userbehavior.UserOaidFeature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oaid_fea_;
  friend struct ::TableStruct_userbehavior_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserBehavior

// optional uint64 searchtime = 1;
inline bool UserBehavior::_internal_has_searchtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserBehavior::has_searchtime() const {
  return _internal_has_searchtime();
}
inline void UserBehavior::clear_searchtime() {
  searchtime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserBehavior::_internal_searchtime() const {
  return searchtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserBehavior::searchtime() const {
  // @@protoc_insertion_point(field_get:userbehavior.UserBehavior.searchtime)
  return _internal_searchtime();
}
inline void UserBehavior::_internal_set_searchtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  searchtime_ = value;
}
inline void UserBehavior::set_searchtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_searchtime(value);
  // @@protoc_insertion_point(field_set:userbehavior.UserBehavior.searchtime)
}

// optional string query = 2;
inline bool UserBehavior::_internal_has_query() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserBehavior::has_query() const {
  return _internal_has_query();
}
inline void UserBehavior::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserBehavior::query() const {
  // @@protoc_insertion_point(field_get:userbehavior.UserBehavior.query)
  return _internal_query();
}
inline void UserBehavior::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:userbehavior.UserBehavior.query)
}
inline std::string* UserBehavior::mutable_query() {
  // @@protoc_insertion_point(field_mutable:userbehavior.UserBehavior.query)
  return _internal_mutable_query();
}
inline const std::string& UserBehavior::_internal_query() const {
  return query_.Get();
}
inline void UserBehavior::_internal_set_query(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserBehavior::set_query(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:userbehavior.UserBehavior.query)
}
inline void UserBehavior::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:userbehavior.UserBehavior.query)
}
inline void UserBehavior::set_query(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:userbehavior.UserBehavior.query)
}
inline std::string* UserBehavior::_internal_mutable_query() {
  _has_bits_[0] |= 0x00000001u;
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserBehavior::release_query() {
  // @@protoc_insertion_point(field_release:userbehavior.UserBehavior.query)
  if (!_internal_has_query()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return query_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserBehavior::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:userbehavior.UserBehavior.query)
}
inline std::string* UserBehavior::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:userbehavior.UserBehavior.query)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return query_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserBehavior::unsafe_arena_set_allocated_query(
    std::string* query) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (query != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  query_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      query, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:userbehavior.UserBehavior.query)
}

// optional uint32 platform = 3;
inline bool UserBehavior::_internal_has_platform() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserBehavior::has_platform() const {
  return _internal_has_platform();
}
inline void UserBehavior::clear_platform() {
  platform_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserBehavior::_internal_platform() const {
  return platform_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserBehavior::platform() const {
  // @@protoc_insertion_point(field_get:userbehavior.UserBehavior.platform)
  return _internal_platform();
}
inline void UserBehavior::_internal_set_platform(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  platform_ = value;
}
inline void UserBehavior::set_platform(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:userbehavior.UserBehavior.platform)
}

// -------------------------------------------------------------------

// UserOaidFeature

// optional string oaid_fea = 1;
inline bool UserOaidFeature::_internal_has_oaid_fea() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserOaidFeature::has_oaid_fea() const {
  return _internal_has_oaid_fea();
}
inline void UserOaidFeature::clear_oaid_fea() {
  oaid_fea_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserOaidFeature::oaid_fea() const {
  // @@protoc_insertion_point(field_get:userbehavior.UserOaidFeature.oaid_fea)
  return _internal_oaid_fea();
}
inline void UserOaidFeature::set_oaid_fea(const std::string& value) {
  _internal_set_oaid_fea(value);
  // @@protoc_insertion_point(field_set:userbehavior.UserOaidFeature.oaid_fea)
}
inline std::string* UserOaidFeature::mutable_oaid_fea() {
  // @@protoc_insertion_point(field_mutable:userbehavior.UserOaidFeature.oaid_fea)
  return _internal_mutable_oaid_fea();
}
inline const std::string& UserOaidFeature::_internal_oaid_fea() const {
  return oaid_fea_.Get();
}
inline void UserOaidFeature::_internal_set_oaid_fea(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  oaid_fea_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserOaidFeature::set_oaid_fea(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  oaid_fea_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:userbehavior.UserOaidFeature.oaid_fea)
}
inline void UserOaidFeature::set_oaid_fea(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  oaid_fea_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:userbehavior.UserOaidFeature.oaid_fea)
}
inline void UserOaidFeature::set_oaid_fea(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  oaid_fea_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:userbehavior.UserOaidFeature.oaid_fea)
}
inline std::string* UserOaidFeature::_internal_mutable_oaid_fea() {
  _has_bits_[0] |= 0x00000001u;
  return oaid_fea_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserOaidFeature::release_oaid_fea() {
  // @@protoc_insertion_point(field_release:userbehavior.UserOaidFeature.oaid_fea)
  if (!_internal_has_oaid_fea()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return oaid_fea_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserOaidFeature::set_allocated_oaid_fea(std::string* oaid_fea) {
  if (oaid_fea != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  oaid_fea_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oaid_fea,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:userbehavior.UserOaidFeature.oaid_fea)
}
inline std::string* UserOaidFeature::unsafe_arena_release_oaid_fea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:userbehavior.UserOaidFeature.oaid_fea)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return oaid_fea_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserOaidFeature::unsafe_arena_set_allocated_oaid_fea(
    std::string* oaid_fea) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (oaid_fea != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  oaid_fea_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      oaid_fea, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:userbehavior.UserOaidFeature.oaid_fea)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userbehavior

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userbehavior_2eproto
