// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_echo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_echo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "adinfo.pb.h"
#include "orderfeature.pb.h"
#include "userbehavior.pb.h"
#include "consistent_feature.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_echo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_echo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_echo_2eproto;
namespace example {
class AdCVRFeatureValue;
class AdCVRFeatureValueDefaultTypeInternal;
extern AdCVRFeatureValueDefaultTypeInternal _AdCVRFeatureValue_default_instance_;
class AdFeatureKey;
class AdFeatureKeyDefaultTypeInternal;
extern AdFeatureKeyDefaultTypeInternal _AdFeatureKey_default_instance_;
class AdFeatureValue;
class AdFeatureValueDefaultTypeInternal;
extern AdFeatureValueDefaultTypeInternal _AdFeatureValue_default_instance_;
class AdInfo4Rank;
class AdInfo4RankDefaultTypeInternal;
extern AdInfo4RankDefaultTypeInternal _AdInfo4Rank_default_instance_;
class EchoRequest;
class EchoRequestDefaultTypeInternal;
extern EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
class EchoResponse;
class EchoResponseDefaultTypeInternal;
extern EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;
class QueryInfo;
class QueryInfoDefaultTypeInternal;
extern QueryInfoDefaultTypeInternal _QueryInfo_default_instance_;
class RankRequest;
class RankRequestDefaultTypeInternal;
extern RankRequestDefaultTypeInternal _RankRequest_default_instance_;
class RankResponse;
class RankResponseDefaultTypeInternal;
extern RankResponseDefaultTypeInternal _RankResponse_default_instance_;
class RankStruct;
class RankStructDefaultTypeInternal;
extern RankStructDefaultTypeInternal _RankStruct_default_instance_;
class VisitInfo;
class VisitInfoDefaultTypeInternal;
extern VisitInfoDefaultTypeInternal _VisitInfo_default_instance_;
}  // namespace example
PROTOBUF_NAMESPACE_OPEN
template<> ::example::AdCVRFeatureValue* Arena::CreateMaybeMessage<::example::AdCVRFeatureValue>(Arena*);
template<> ::example::AdFeatureKey* Arena::CreateMaybeMessage<::example::AdFeatureKey>(Arena*);
template<> ::example::AdFeatureValue* Arena::CreateMaybeMessage<::example::AdFeatureValue>(Arena*);
template<> ::example::AdInfo4Rank* Arena::CreateMaybeMessage<::example::AdInfo4Rank>(Arena*);
template<> ::example::EchoRequest* Arena::CreateMaybeMessage<::example::EchoRequest>(Arena*);
template<> ::example::EchoResponse* Arena::CreateMaybeMessage<::example::EchoResponse>(Arena*);
template<> ::example::QueryInfo* Arena::CreateMaybeMessage<::example::QueryInfo>(Arena*);
template<> ::example::RankRequest* Arena::CreateMaybeMessage<::example::RankRequest>(Arena*);
template<> ::example::RankResponse* Arena::CreateMaybeMessage<::example::RankResponse>(Arena*);
template<> ::example::RankStruct* Arena::CreateMaybeMessage<::example::RankStruct>(Arena*);
template<> ::example::VisitInfo* Arena::CreateMaybeMessage<::example::VisitInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace example {

// ===================================================================

class EchoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.EchoRequest) */ {
 public:
  inline EchoRequest() : EchoRequest(nullptr) {};
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);
  EchoRequest(EchoRequest&& from) noexcept
    : EchoRequest() {
    *this = ::std::move(from);
  }

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoRequest& operator=(EchoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoRequest* internal_default_instance() {
    return reinterpret_cast<const EchoRequest*>(
               &_EchoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EchoRequest& a, EchoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoRequest* New() const final {
    return CreateMaybeMessage<EchoRequest>(nullptr);
  }

  EchoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.EchoRequest";
  }
  protected:
  explicit EchoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_echo_2eproto);
    return ::descriptor_table_echo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:example.EchoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class EchoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.EchoResponse) */ {
 public:
  inline EchoResponse() : EchoResponse(nullptr) {};
  virtual ~EchoResponse();

  EchoResponse(const EchoResponse& from);
  EchoResponse(EchoResponse&& from) noexcept
    : EchoResponse() {
    *this = ::std::move(from);
  }

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResponse& operator=(EchoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EchoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResponse*>(
               &_EchoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EchoResponse& a, EchoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoResponse* New() const final {
    return CreateMaybeMessage<EchoResponse>(nullptr);
  }

  EchoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.EchoResponse";
  }
  protected:
  explicit EchoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_echo_2eproto);
    return ::descriptor_table_echo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:example.EchoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class AdFeatureKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.AdFeatureKey) */ {
 public:
  inline AdFeatureKey() : AdFeatureKey(nullptr) {};
  virtual ~AdFeatureKey();

  AdFeatureKey(const AdFeatureKey& from);
  AdFeatureKey(AdFeatureKey&& from) noexcept
    : AdFeatureKey() {
    *this = ::std::move(from);
  }

  inline AdFeatureKey& operator=(const AdFeatureKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdFeatureKey& operator=(AdFeatureKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdFeatureKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdFeatureKey* internal_default_instance() {
    return reinterpret_cast<const AdFeatureKey*>(
               &_AdFeatureKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AdFeatureKey& a, AdFeatureKey& b) {
    a.Swap(&b);
  }
  inline void Swap(AdFeatureKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdFeatureKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdFeatureKey* New() const final {
    return CreateMaybeMessage<AdFeatureKey>(nullptr);
  }

  AdFeatureKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdFeatureKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdFeatureKey& from);
  void MergeFrom(const AdFeatureKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdFeatureKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.AdFeatureKey";
  }
  protected:
  explicit AdFeatureKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_echo_2eproto);
    return ::descriptor_table_echo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignFieldNumber = 1,
    kSlotFieldNumber = 2,
  };
  // optional uint64 sign = 1 [default = 0];
  bool has_sign() const;
  private:
  bool _internal_has_sign() const;
  public:
  void clear_sign();
  ::PROTOBUF_NAMESPACE_ID::uint64 sign() const;
  void set_sign(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sign() const;
  void _internal_set_sign(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 slot = 2;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:example.AdFeatureKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sign_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class AdFeatureValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.AdFeatureValue) */ {
 public:
  inline AdFeatureValue() : AdFeatureValue(nullptr) {};
  virtual ~AdFeatureValue();

  AdFeatureValue(const AdFeatureValue& from);
  AdFeatureValue(AdFeatureValue&& from) noexcept
    : AdFeatureValue() {
    *this = ::std::move(from);
  }

  inline AdFeatureValue& operator=(const AdFeatureValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdFeatureValue& operator=(AdFeatureValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdFeatureValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdFeatureValue* internal_default_instance() {
    return reinterpret_cast<const AdFeatureValue*>(
               &_AdFeatureValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AdFeatureValue& a, AdFeatureValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AdFeatureValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdFeatureValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdFeatureValue* New() const final {
    return CreateMaybeMessage<AdFeatureValue>(nullptr);
  }

  AdFeatureValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdFeatureValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdFeatureValue& from);
  void MergeFrom(const AdFeatureValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdFeatureValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.AdFeatureValue";
  }
  protected:
  explicit AdFeatureValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_echo_2eproto);
    return ::descriptor_table_echo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFmArrayFieldNumber = 4,
    kShowFieldNumber = 1,
    kClkFieldNumber = 2,
    kWeightFieldNumber = 3,
    kDwlrWFieldNumber = 5,
  };
  // repeated float fm_array = 4 [packed = true];
  int fm_array_size() const;
  private:
  int _internal_fm_array_size() const;
  public:
  void clear_fm_array();
  private:
  float _internal_fm_array(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fm_array() const;
  void _internal_add_fm_array(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fm_array();
  public:
  float fm_array(int index) const;
  void set_fm_array(int index, float value);
  void add_fm_array(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fm_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fm_array();

  // optional float show = 1 [default = 0];
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  float show() const;
  void set_show(float value);
  private:
  float _internal_show() const;
  void _internal_set_show(float value);
  public:

  // optional float clk = 2 [default = 0];
  bool has_clk() const;
  private:
  bool _internal_has_clk() const;
  public:
  void clear_clk();
  float clk() const;
  void set_clk(float value);
  private:
  float _internal_clk() const;
  void _internal_set_clk(float value);
  public:

  // optional float weight = 3 [default = 0];
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // optional float dwlr_w = 5 [default = 0];
  bool has_dwlr_w() const;
  private:
  bool _internal_has_dwlr_w() const;
  public:
  void clear_dwlr_w();
  float dwlr_w() const;
  void set_dwlr_w(float value);
  private:
  float _internal_dwlr_w() const;
  void _internal_set_dwlr_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:example.AdFeatureValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fm_array_;
  mutable std::atomic<int> _fm_array_cached_byte_size_;
  float show_;
  float clk_;
  float weight_;
  float dwlr_w_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class AdCVRFeatureValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.AdCVRFeatureValue) */ {
 public:
  inline AdCVRFeatureValue() : AdCVRFeatureValue(nullptr) {};
  virtual ~AdCVRFeatureValue();

  AdCVRFeatureValue(const AdCVRFeatureValue& from);
  AdCVRFeatureValue(AdCVRFeatureValue&& from) noexcept
    : AdCVRFeatureValue() {
    *this = ::std::move(from);
  }

  inline AdCVRFeatureValue& operator=(const AdCVRFeatureValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdCVRFeatureValue& operator=(AdCVRFeatureValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdCVRFeatureValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdCVRFeatureValue* internal_default_instance() {
    return reinterpret_cast<const AdCVRFeatureValue*>(
               &_AdCVRFeatureValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AdCVRFeatureValue& a, AdCVRFeatureValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AdCVRFeatureValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdCVRFeatureValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdCVRFeatureValue* New() const final {
    return CreateMaybeMessage<AdCVRFeatureValue>(nullptr);
  }

  AdCVRFeatureValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdCVRFeatureValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdCVRFeatureValue& from);
  void MergeFrom(const AdCVRFeatureValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdCVRFeatureValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.AdCVRFeatureValue";
  }
  protected:
  explicit AdCVRFeatureValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_echo_2eproto);
    return ::descriptor_table_echo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmbWFieldNumber = 1,
  };
  // repeated float emb_w = 1 [packed = true];
  int emb_w_size() const;
  private:
  int _internal_emb_w_size() const;
  public:
  void clear_emb_w();
  private:
  float _internal_emb_w(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_emb_w() const;
  void _internal_add_emb_w(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_emb_w();
  public:
  float emb_w(int index) const;
  void set_emb_w(int index, float value);
  void add_emb_w(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      emb_w() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_emb_w();

  // @@protoc_insertion_point(class_scope:example.AdCVRFeatureValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > emb_w_;
  mutable std::atomic<int> _emb_w_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class AdInfo4Rank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.AdInfo4Rank) */ {
 public:
  inline AdInfo4Rank() : AdInfo4Rank(nullptr) {};
  virtual ~AdInfo4Rank();

  AdInfo4Rank(const AdInfo4Rank& from);
  AdInfo4Rank(AdInfo4Rank&& from) noexcept
    : AdInfo4Rank() {
    *this = ::std::move(from);
  }

  inline AdInfo4Rank& operator=(const AdInfo4Rank& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdInfo4Rank& operator=(AdInfo4Rank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdInfo4Rank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdInfo4Rank* internal_default_instance() {
    return reinterpret_cast<const AdInfo4Rank*>(
               &_AdInfo4Rank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AdInfo4Rank& a, AdInfo4Rank& b) {
    a.Swap(&b);
  }
  inline void Swap(AdInfo4Rank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdInfo4Rank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdInfo4Rank* New() const final {
    return CreateMaybeMessage<AdInfo4Rank>(nullptr);
  }

  AdInfo4Rank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdInfo4Rank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdInfo4Rank& from);
  void MergeFrom(const AdInfo4Rank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdInfo4Rank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.AdInfo4Rank";
  }
  protected:
  explicit AdInfo4Rank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_echo_2eproto);
    return ::descriptor_table_echo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureValuesFieldNumber = 5,
    kFeatureKeysFieldNumber = 6,
    kCvrFeatureValuesFieldNumber = 8,
    kCvrFeatureKeysFieldNumber = 9,
    kAdinfoFieldNumber = 1,
    kRankscoreFieldNumber = 2,
    kCtrFieldNumber = 3,
    kAdidFieldNumber = 4,
    kCvrFieldNumber = 7,
  };
  // repeated .example.AdFeatureValue feature_values = 5;
  int feature_values_size() const;
  private:
  int _internal_feature_values_size() const;
  public:
  void clear_feature_values();
  ::example::AdFeatureValue* mutable_feature_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureValue >*
      mutable_feature_values();
  private:
  const ::example::AdFeatureValue& _internal_feature_values(int index) const;
  ::example::AdFeatureValue* _internal_add_feature_values();
  public:
  const ::example::AdFeatureValue& feature_values(int index) const;
  ::example::AdFeatureValue* add_feature_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureValue >&
      feature_values() const;

  // repeated .example.AdFeatureKey feature_keys = 6;
  int feature_keys_size() const;
  private:
  int _internal_feature_keys_size() const;
  public:
  void clear_feature_keys();
  ::example::AdFeatureKey* mutable_feature_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureKey >*
      mutable_feature_keys();
  private:
  const ::example::AdFeatureKey& _internal_feature_keys(int index) const;
  ::example::AdFeatureKey* _internal_add_feature_keys();
  public:
  const ::example::AdFeatureKey& feature_keys(int index) const;
  ::example::AdFeatureKey* add_feature_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureKey >&
      feature_keys() const;

  // repeated .example.AdCVRFeatureValue cvr_feature_values = 8;
  int cvr_feature_values_size() const;
  private:
  int _internal_cvr_feature_values_size() const;
  public:
  void clear_cvr_feature_values();
  ::example::AdCVRFeatureValue* mutable_cvr_feature_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdCVRFeatureValue >*
      mutable_cvr_feature_values();
  private:
  const ::example::AdCVRFeatureValue& _internal_cvr_feature_values(int index) const;
  ::example::AdCVRFeatureValue* _internal_add_cvr_feature_values();
  public:
  const ::example::AdCVRFeatureValue& cvr_feature_values(int index) const;
  ::example::AdCVRFeatureValue* add_cvr_feature_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdCVRFeatureValue >&
      cvr_feature_values() const;

  // repeated .example.AdFeatureKey cvr_feature_keys = 9;
  int cvr_feature_keys_size() const;
  private:
  int _internal_cvr_feature_keys_size() const;
  public:
  void clear_cvr_feature_keys();
  ::example::AdFeatureKey* mutable_cvr_feature_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureKey >*
      mutable_cvr_feature_keys();
  private:
  const ::example::AdFeatureKey& _internal_cvr_feature_keys(int index) const;
  ::example::AdFeatureKey* _internal_add_cvr_feature_keys();
  public:
  const ::example::AdFeatureKey& cvr_feature_keys(int index) const;
  ::example::AdFeatureKey* add_cvr_feature_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureKey >&
      cvr_feature_keys() const;

  // optional .adinfo.AdInfo adinfo = 1;
  bool has_adinfo() const;
  private:
  bool _internal_has_adinfo() const;
  public:
  void clear_adinfo();
  const ::adinfo::AdInfo& adinfo() const;
  ::adinfo::AdInfo* release_adinfo();
  ::adinfo::AdInfo* mutable_adinfo();
  void set_allocated_adinfo(::adinfo::AdInfo* adinfo);
  private:
  const ::adinfo::AdInfo& _internal_adinfo() const;
  ::adinfo::AdInfo* _internal_mutable_adinfo();
  public:
  void unsafe_arena_set_allocated_adinfo(
      ::adinfo::AdInfo* adinfo);
  ::adinfo::AdInfo* unsafe_arena_release_adinfo();

  // optional double rankscore = 2;
  bool has_rankscore() const;
  private:
  bool _internal_has_rankscore() const;
  public:
  void clear_rankscore();
  double rankscore() const;
  void set_rankscore(double value);
  private:
  double _internal_rankscore() const;
  void _internal_set_rankscore(double value);
  public:

  // optional double ctr = 3;
  bool has_ctr() const;
  private:
  bool _internal_has_ctr() const;
  public:
  void clear_ctr();
  double ctr() const;
  void set_ctr(double value);
  private:
  double _internal_ctr() const;
  void _internal_set_ctr(double value);
  public:

  // optional uint64 adid = 4;
  bool has_adid() const;
  private:
  bool _internal_has_adid() const;
  public:
  void clear_adid();
  ::PROTOBUF_NAMESPACE_ID::uint64 adid() const;
  void set_adid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_adid() const;
  void _internal_set_adid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double cvr = 7;
  bool has_cvr() const;
  private:
  bool _internal_has_cvr() const;
  public:
  void clear_cvr();
  double cvr() const;
  void set_cvr(double value);
  private:
  double _internal_cvr() const;
  void _internal_set_cvr(double value);
  public:

  // @@protoc_insertion_point(class_scope:example.AdInfo4Rank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureValue > feature_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureKey > feature_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdCVRFeatureValue > cvr_feature_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureKey > cvr_feature_keys_;
  ::adinfo::AdInfo* adinfo_;
  double rankscore_;
  double ctr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 adid_;
  double cvr_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class VisitInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.VisitInfo) */ {
 public:
  inline VisitInfo() : VisitInfo(nullptr) {};
  virtual ~VisitInfo();

  VisitInfo(const VisitInfo& from);
  VisitInfo(VisitInfo&& from) noexcept
    : VisitInfo() {
    *this = ::std::move(from);
  }

  inline VisitInfo& operator=(const VisitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisitInfo& operator=(VisitInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisitInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisitInfo* internal_default_instance() {
    return reinterpret_cast<const VisitInfo*>(
               &_VisitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VisitInfo& a, VisitInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VisitInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisitInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisitInfo* New() const final {
    return CreateMaybeMessage<VisitInfo>(nullptr);
  }

  VisitInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisitInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisitInfo& from);
  void MergeFrom(const VisitInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisitInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.VisitInfo";
  }
  protected:
  explicit VisitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_echo_2eproto);
    return ::descriptor_table_echo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCitystrFieldNumber = 2,
    kPvidFieldNumber = 4,
    kOaidFieldNumber = 5,
    kOaidFeaFieldNumber = 6,
    kOrderFeatureFieldNumber = 7,
    kProvinceFieldNumber = 1,
    kCityFieldNumber = 3,
  };
  // optional string citystr = 2;
  bool has_citystr() const;
  private:
  bool _internal_has_citystr() const;
  public:
  void clear_citystr();
  const std::string& citystr() const;
  void set_citystr(const std::string& value);
  void set_citystr(std::string&& value);
  void set_citystr(const char* value);
  void set_citystr(const char* value, size_t size);
  std::string* mutable_citystr();
  std::string* release_citystr();
  void set_allocated_citystr(std::string* citystr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_citystr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_citystr(
      std::string* citystr);
  private:
  const std::string& _internal_citystr() const;
  void _internal_set_citystr(const std::string& value);
  std::string* _internal_mutable_citystr();
  public:

  // optional string pvid = 4;
  bool has_pvid() const;
  private:
  bool _internal_has_pvid() const;
  public:
  void clear_pvid();
  const std::string& pvid() const;
  void set_pvid(const std::string& value);
  void set_pvid(std::string&& value);
  void set_pvid(const char* value);
  void set_pvid(const char* value, size_t size);
  std::string* mutable_pvid();
  std::string* release_pvid();
  void set_allocated_pvid(std::string* pvid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pvid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pvid(
      std::string* pvid);
  private:
  const std::string& _internal_pvid() const;
  void _internal_set_pvid(const std::string& value);
  std::string* _internal_mutable_pvid();
  public:

  // optional string oaid = 5;
  bool has_oaid() const;
  private:
  bool _internal_has_oaid() const;
  public:
  void clear_oaid();
  const std::string& oaid() const;
  void set_oaid(const std::string& value);
  void set_oaid(std::string&& value);
  void set_oaid(const char* value);
  void set_oaid(const char* value, size_t size);
  std::string* mutable_oaid();
  std::string* release_oaid();
  void set_allocated_oaid(std::string* oaid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_oaid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_oaid(
      std::string* oaid);
  private:
  const std::string& _internal_oaid() const;
  void _internal_set_oaid(const std::string& value);
  std::string* _internal_mutable_oaid();
  public:

  // optional .userbehavior.UserOaidFeature oaid_fea = 6;
  bool has_oaid_fea() const;
  private:
  bool _internal_has_oaid_fea() const;
  public:
  void clear_oaid_fea();
  const ::userbehavior::UserOaidFeature& oaid_fea() const;
  ::userbehavior::UserOaidFeature* release_oaid_fea();
  ::userbehavior::UserOaidFeature* mutable_oaid_fea();
  void set_allocated_oaid_fea(::userbehavior::UserOaidFeature* oaid_fea);
  private:
  const ::userbehavior::UserOaidFeature& _internal_oaid_fea() const;
  ::userbehavior::UserOaidFeature* _internal_mutable_oaid_fea();
  public:
  void unsafe_arena_set_allocated_oaid_fea(
      ::userbehavior::UserOaidFeature* oaid_fea);
  ::userbehavior::UserOaidFeature* unsafe_arena_release_oaid_fea();

  // optional .orderfeature.OrderInfoFeature order_feature = 7;
  bool has_order_feature() const;
  private:
  bool _internal_has_order_feature() const;
  public:
  void clear_order_feature();
  const ::orderfeature::OrderInfoFeature& order_feature() const;
  ::orderfeature::OrderInfoFeature* release_order_feature();
  ::orderfeature::OrderInfoFeature* mutable_order_feature();
  void set_allocated_order_feature(::orderfeature::OrderInfoFeature* order_feature);
  private:
  const ::orderfeature::OrderInfoFeature& _internal_order_feature() const;
  ::orderfeature::OrderInfoFeature* _internal_mutable_order_feature();
  public:
  void unsafe_arena_set_allocated_order_feature(
      ::orderfeature::OrderInfoFeature* order_feature);
  ::orderfeature::OrderInfoFeature* unsafe_arena_release_order_feature();

  // optional uint32 province = 1;
  bool has_province() const;
  private:
  bool _internal_has_province() const;
  public:
  void clear_province();
  ::PROTOBUF_NAMESPACE_ID::uint32 province() const;
  void set_province(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_province() const;
  void _internal_set_province(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 city = 3;
  bool has_city() const;
  private:
  bool _internal_has_city() const;
  public:
  void clear_city();
  ::PROTOBUF_NAMESPACE_ID::uint32 city() const;
  void set_city(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_city() const;
  void _internal_set_city(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:example.VisitInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr citystr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pvid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oaid_;
  ::userbehavior::UserOaidFeature* oaid_fea_;
  ::orderfeature::OrderInfoFeature* order_feature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 province_;
  ::PROTOBUF_NAMESPACE_ID::uint32 city_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class QueryInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.QueryInfo) */ {
 public:
  inline QueryInfo() : QueryInfo(nullptr) {};
  virtual ~QueryInfo();

  QueryInfo(const QueryInfo& from);
  QueryInfo(QueryInfo&& from) noexcept
    : QueryInfo() {
    *this = ::std::move(from);
  }

  inline QueryInfo& operator=(const QueryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryInfo& operator=(QueryInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryInfo* internal_default_instance() {
    return reinterpret_cast<const QueryInfo*>(
               &_QueryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryInfo& a, QueryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryInfo* New() const final {
    return CreateMaybeMessage<QueryInfo>(nullptr);
  }

  QueryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryInfo& from);
  void MergeFrom(const QueryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.QueryInfo";
  }
  protected:
  explicit QueryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_echo_2eproto);
    return ::descriptor_table_echo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdlistFieldNumber = 2,
    kQueryFieldNumber = 1,
    kConsFeaFullFieldNumber = 4,
    kIsConsFeaFieldNumber = 3,
  };
  // repeated .example.AdInfo4Rank adlist = 2;
  int adlist_size() const;
  private:
  int _internal_adlist_size() const;
  public:
  void clear_adlist();
  ::example::AdInfo4Rank* mutable_adlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdInfo4Rank >*
      mutable_adlist();
  private:
  const ::example::AdInfo4Rank& _internal_adlist(int index) const;
  ::example::AdInfo4Rank* _internal_add_adlist();
  public:
  const ::example::AdInfo4Rank& adlist(int index) const;
  ::example::AdInfo4Rank* add_adlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdInfo4Rank >&
      adlist() const;

  // optional bytes query = 1;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const void* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_query();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_query(
      std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // optional .consfea.ConsFeaFull cons_fea_full = 4;
  bool has_cons_fea_full() const;
  private:
  bool _internal_has_cons_fea_full() const;
  public:
  void clear_cons_fea_full();
  const ::consfea::ConsFeaFull& cons_fea_full() const;
  ::consfea::ConsFeaFull* release_cons_fea_full();
  ::consfea::ConsFeaFull* mutable_cons_fea_full();
  void set_allocated_cons_fea_full(::consfea::ConsFeaFull* cons_fea_full);
  private:
  const ::consfea::ConsFeaFull& _internal_cons_fea_full() const;
  ::consfea::ConsFeaFull* _internal_mutable_cons_fea_full();
  public:
  void unsafe_arena_set_allocated_cons_fea_full(
      ::consfea::ConsFeaFull* cons_fea_full);
  ::consfea::ConsFeaFull* unsafe_arena_release_cons_fea_full();

  // optional bool is_cons_fea = 3;
  bool has_is_cons_fea() const;
  private:
  bool _internal_has_is_cons_fea() const;
  public:
  void clear_is_cons_fea();
  bool is_cons_fea() const;
  void set_is_cons_fea(bool value);
  private:
  bool _internal_is_cons_fea() const;
  void _internal_set_is_cons_fea(bool value);
  public:

  // @@protoc_insertion_point(class_scope:example.QueryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdInfo4Rank > adlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::consfea::ConsFeaFull* cons_fea_full_;
  bool is_cons_fea_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class RankStruct PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.RankStruct) */ {
 public:
  inline RankStruct() : RankStruct(nullptr) {};
  virtual ~RankStruct();

  RankStruct(const RankStruct& from);
  RankStruct(RankStruct&& from) noexcept
    : RankStruct() {
    *this = ::std::move(from);
  }

  inline RankStruct& operator=(const RankStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankStruct& operator=(RankStruct&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankStruct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankStruct* internal_default_instance() {
    return reinterpret_cast<const RankStruct*>(
               &_RankStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RankStruct& a, RankStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(RankStruct* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankStruct* New() const final {
    return CreateMaybeMessage<RankStruct>(nullptr);
  }

  RankStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankStruct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankStruct& from);
  void MergeFrom(const RankStruct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankStruct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.RankStruct";
  }
  protected:
  explicit RankStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_echo_2eproto);
    return ::descriptor_table_echo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuerylistFieldNumber = 2,
    kVisitinfoFieldNumber = 1,
  };
  // repeated .example.QueryInfo querylist = 2;
  int querylist_size() const;
  private:
  int _internal_querylist_size() const;
  public:
  void clear_querylist();
  ::example::QueryInfo* mutable_querylist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::QueryInfo >*
      mutable_querylist();
  private:
  const ::example::QueryInfo& _internal_querylist(int index) const;
  ::example::QueryInfo* _internal_add_querylist();
  public:
  const ::example::QueryInfo& querylist(int index) const;
  ::example::QueryInfo* add_querylist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::QueryInfo >&
      querylist() const;

  // optional .example.VisitInfo visitinfo = 1;
  bool has_visitinfo() const;
  private:
  bool _internal_has_visitinfo() const;
  public:
  void clear_visitinfo();
  const ::example::VisitInfo& visitinfo() const;
  ::example::VisitInfo* release_visitinfo();
  ::example::VisitInfo* mutable_visitinfo();
  void set_allocated_visitinfo(::example::VisitInfo* visitinfo);
  private:
  const ::example::VisitInfo& _internal_visitinfo() const;
  ::example::VisitInfo* _internal_mutable_visitinfo();
  public:
  void unsafe_arena_set_allocated_visitinfo(
      ::example::VisitInfo* visitinfo);
  ::example::VisitInfo* unsafe_arena_release_visitinfo();

  // @@protoc_insertion_point(class_scope:example.RankStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::QueryInfo > querylist_;
  ::example::VisitInfo* visitinfo_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class RankRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.RankRequest) */ {
 public:
  inline RankRequest() : RankRequest(nullptr) {};
  virtual ~RankRequest();

  RankRequest(const RankRequest& from);
  RankRequest(RankRequest&& from) noexcept
    : RankRequest() {
    *this = ::std::move(from);
  }

  inline RankRequest& operator=(const RankRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankRequest& operator=(RankRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankRequest* internal_default_instance() {
    return reinterpret_cast<const RankRequest*>(
               &_RankRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RankRequest& a, RankRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RankRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankRequest* New() const final {
    return CreateMaybeMessage<RankRequest>(nullptr);
  }

  RankRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankRequest& from);
  void MergeFrom(const RankRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.RankRequest";
  }
  protected:
  explicit RankRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_echo_2eproto);
    return ::descriptor_table_echo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankStructFieldNumber = 1,
  };
  // repeated .example.RankStruct rank_struct = 1;
  int rank_struct_size() const;
  private:
  int _internal_rank_struct_size() const;
  public:
  void clear_rank_struct();
  ::example::RankStruct* mutable_rank_struct(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::RankStruct >*
      mutable_rank_struct();
  private:
  const ::example::RankStruct& _internal_rank_struct(int index) const;
  ::example::RankStruct* _internal_add_rank_struct();
  public:
  const ::example::RankStruct& rank_struct(int index) const;
  ::example::RankStruct* add_rank_struct();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::RankStruct >&
      rank_struct() const;

  // @@protoc_insertion_point(class_scope:example.RankRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::RankStruct > rank_struct_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class RankResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.RankResponse) */ {
 public:
  inline RankResponse() : RankResponse(nullptr) {};
  virtual ~RankResponse();

  RankResponse(const RankResponse& from);
  RankResponse(RankResponse&& from) noexcept
    : RankResponse() {
    *this = ::std::move(from);
  }

  inline RankResponse& operator=(const RankResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankResponse& operator=(RankResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankResponse* internal_default_instance() {
    return reinterpret_cast<const RankResponse*>(
               &_RankResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RankResponse& a, RankResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RankResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankResponse* New() const final {
    return CreateMaybeMessage<RankResponse>(nullptr);
  }

  RankResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankResponse& from);
  void MergeFrom(const RankResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.RankResponse";
  }
  protected:
  explicit RankResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_echo_2eproto);
    return ::descriptor_table_echo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankResponseFieldNumber = 1,
  };
  // optional string rank_response = 1;
  bool has_rank_response() const;
  private:
  bool _internal_has_rank_response() const;
  public:
  void clear_rank_response();
  const std::string& rank_response() const;
  void set_rank_response(const std::string& value);
  void set_rank_response(std::string&& value);
  void set_rank_response(const char* value);
  void set_rank_response(const char* value, size_t size);
  std::string* mutable_rank_response();
  std::string* release_rank_response();
  void set_allocated_rank_response(std::string* rank_response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rank_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rank_response(
      std::string* rank_response);
  private:
  const std::string& _internal_rank_response() const;
  void _internal_set_rank_response(const std::string& value);
  std::string* _internal_mutable_rank_response();
  public:

  // @@protoc_insertion_point(class_scope:example.RankResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rank_response_;
  friend struct ::TableStruct_echo_2eproto;
};
// ===================================================================

class EchoService_Stub;

class EchoService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EchoService() {};
 public:
  virtual ~EchoService();

  typedef EchoService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::example::EchoRequest* request,
                       ::example::EchoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService);
};

class EchoService_Stub : public EchoService {
 public:
  EchoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  EchoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~EchoService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements EchoService ------------------------------------------

  void Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::example::EchoRequest* request,
                       ::example::EchoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService_Stub);
};


// -------------------------------------------------------------------

class RankService_Stub;

class RankService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RankService() {};
 public:
  virtual ~RankService();

  typedef RankService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Rank(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::example::RankRequest* request,
                       ::example::RankResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RankService);
};

class RankService_Stub : public RankService {
 public:
  RankService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RankService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RankService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RankService ------------------------------------------

  void Rank(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::example::RankRequest* request,
                       ::example::RankResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RankService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EchoRequest

// required string message = 1;
inline bool EchoRequest::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EchoRequest::has_message() const {
  return _internal_has_message();
}
inline void EchoRequest::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EchoRequest::message() const {
  // @@protoc_insertion_point(field_get:example.EchoRequest.message)
  return _internal_message();
}
inline void EchoRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:example.EchoRequest.message)
}
inline std::string* EchoRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:example.EchoRequest.message)
  return _internal_mutable_message();
}
inline const std::string& EchoRequest::_internal_message() const {
  return message_.Get();
}
inline void EchoRequest::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EchoRequest::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.EchoRequest.message)
}
inline void EchoRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.EchoRequest.message)
}
inline void EchoRequest::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.EchoRequest.message)
}
inline std::string* EchoRequest::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EchoRequest::release_message() {
  // @@protoc_insertion_point(field_release:example.EchoRequest.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.EchoRequest.message)
}
inline std::string* EchoRequest::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.EchoRequest.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EchoRequest::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.EchoRequest.message)
}

// -------------------------------------------------------------------

// EchoResponse

// required string message = 1;
inline bool EchoResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EchoResponse::has_message() const {
  return _internal_has_message();
}
inline void EchoResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EchoResponse::message() const {
  // @@protoc_insertion_point(field_get:example.EchoResponse.message)
  return _internal_message();
}
inline void EchoResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:example.EchoResponse.message)
}
inline std::string* EchoResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:example.EchoResponse.message)
  return _internal_mutable_message();
}
inline const std::string& EchoResponse::_internal_message() const {
  return message_.Get();
}
inline void EchoResponse::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EchoResponse::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.EchoResponse.message)
}
inline void EchoResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.EchoResponse.message)
}
inline void EchoResponse::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.EchoResponse.message)
}
inline std::string* EchoResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EchoResponse::release_message() {
  // @@protoc_insertion_point(field_release:example.EchoResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EchoResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.EchoResponse.message)
}
inline std::string* EchoResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.EchoResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EchoResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.EchoResponse.message)
}

// -------------------------------------------------------------------

// AdFeatureKey

// optional uint64 sign = 1 [default = 0];
inline bool AdFeatureKey::_internal_has_sign() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AdFeatureKey::has_sign() const {
  return _internal_has_sign();
}
inline void AdFeatureKey::clear_sign() {
  sign_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdFeatureKey::_internal_sign() const {
  return sign_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdFeatureKey::sign() const {
  // @@protoc_insertion_point(field_get:example.AdFeatureKey.sign)
  return _internal_sign();
}
inline void AdFeatureKey::_internal_set_sign(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  sign_ = value;
}
inline void AdFeatureKey::set_sign(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:example.AdFeatureKey.sign)
}

// optional uint32 slot = 2;
inline bool AdFeatureKey::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdFeatureKey::has_slot() const {
  return _internal_has_slot();
}
inline void AdFeatureKey::clear_slot() {
  slot_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdFeatureKey::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdFeatureKey::slot() const {
  // @@protoc_insertion_point(field_get:example.AdFeatureKey.slot)
  return _internal_slot();
}
inline void AdFeatureKey::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  slot_ = value;
}
inline void AdFeatureKey::set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:example.AdFeatureKey.slot)
}

// -------------------------------------------------------------------

// AdFeatureValue

// optional float show = 1 [default = 0];
inline bool AdFeatureValue::_internal_has_show() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AdFeatureValue::has_show() const {
  return _internal_has_show();
}
inline void AdFeatureValue::clear_show() {
  show_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float AdFeatureValue::_internal_show() const {
  return show_;
}
inline float AdFeatureValue::show() const {
  // @@protoc_insertion_point(field_get:example.AdFeatureValue.show)
  return _internal_show();
}
inline void AdFeatureValue::_internal_set_show(float value) {
  _has_bits_[0] |= 0x00000001u;
  show_ = value;
}
inline void AdFeatureValue::set_show(float value) {
  _internal_set_show(value);
  // @@protoc_insertion_point(field_set:example.AdFeatureValue.show)
}

// optional float clk = 2 [default = 0];
inline bool AdFeatureValue::_internal_has_clk() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdFeatureValue::has_clk() const {
  return _internal_has_clk();
}
inline void AdFeatureValue::clear_clk() {
  clk_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float AdFeatureValue::_internal_clk() const {
  return clk_;
}
inline float AdFeatureValue::clk() const {
  // @@protoc_insertion_point(field_get:example.AdFeatureValue.clk)
  return _internal_clk();
}
inline void AdFeatureValue::_internal_set_clk(float value) {
  _has_bits_[0] |= 0x00000002u;
  clk_ = value;
}
inline void AdFeatureValue::set_clk(float value) {
  _internal_set_clk(value);
  // @@protoc_insertion_point(field_set:example.AdFeatureValue.clk)
}

// optional float weight = 3 [default = 0];
inline bool AdFeatureValue::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AdFeatureValue::has_weight() const {
  return _internal_has_weight();
}
inline void AdFeatureValue::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float AdFeatureValue::_internal_weight() const {
  return weight_;
}
inline float AdFeatureValue::weight() const {
  // @@protoc_insertion_point(field_get:example.AdFeatureValue.weight)
  return _internal_weight();
}
inline void AdFeatureValue::_internal_set_weight(float value) {
  _has_bits_[0] |= 0x00000004u;
  weight_ = value;
}
inline void AdFeatureValue::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:example.AdFeatureValue.weight)
}

// repeated float fm_array = 4 [packed = true];
inline int AdFeatureValue::_internal_fm_array_size() const {
  return fm_array_.size();
}
inline int AdFeatureValue::fm_array_size() const {
  return _internal_fm_array_size();
}
inline void AdFeatureValue::clear_fm_array() {
  fm_array_.Clear();
}
inline float AdFeatureValue::_internal_fm_array(int index) const {
  return fm_array_.Get(index);
}
inline float AdFeatureValue::fm_array(int index) const {
  // @@protoc_insertion_point(field_get:example.AdFeatureValue.fm_array)
  return _internal_fm_array(index);
}
inline void AdFeatureValue::set_fm_array(int index, float value) {
  fm_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:example.AdFeatureValue.fm_array)
}
inline void AdFeatureValue::_internal_add_fm_array(float value) {
  fm_array_.Add(value);
}
inline void AdFeatureValue::add_fm_array(float value) {
  _internal_add_fm_array(value);
  // @@protoc_insertion_point(field_add:example.AdFeatureValue.fm_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AdFeatureValue::_internal_fm_array() const {
  return fm_array_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AdFeatureValue::fm_array() const {
  // @@protoc_insertion_point(field_list:example.AdFeatureValue.fm_array)
  return _internal_fm_array();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AdFeatureValue::_internal_mutable_fm_array() {
  return &fm_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AdFeatureValue::mutable_fm_array() {
  // @@protoc_insertion_point(field_mutable_list:example.AdFeatureValue.fm_array)
  return _internal_mutable_fm_array();
}

// optional float dwlr_w = 5 [default = 0];
inline bool AdFeatureValue::_internal_has_dwlr_w() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AdFeatureValue::has_dwlr_w() const {
  return _internal_has_dwlr_w();
}
inline void AdFeatureValue::clear_dwlr_w() {
  dwlr_w_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float AdFeatureValue::_internal_dwlr_w() const {
  return dwlr_w_;
}
inline float AdFeatureValue::dwlr_w() const {
  // @@protoc_insertion_point(field_get:example.AdFeatureValue.dwlr_w)
  return _internal_dwlr_w();
}
inline void AdFeatureValue::_internal_set_dwlr_w(float value) {
  _has_bits_[0] |= 0x00000008u;
  dwlr_w_ = value;
}
inline void AdFeatureValue::set_dwlr_w(float value) {
  _internal_set_dwlr_w(value);
  // @@protoc_insertion_point(field_set:example.AdFeatureValue.dwlr_w)
}

// -------------------------------------------------------------------

// AdCVRFeatureValue

// repeated float emb_w = 1 [packed = true];
inline int AdCVRFeatureValue::_internal_emb_w_size() const {
  return emb_w_.size();
}
inline int AdCVRFeatureValue::emb_w_size() const {
  return _internal_emb_w_size();
}
inline void AdCVRFeatureValue::clear_emb_w() {
  emb_w_.Clear();
}
inline float AdCVRFeatureValue::_internal_emb_w(int index) const {
  return emb_w_.Get(index);
}
inline float AdCVRFeatureValue::emb_w(int index) const {
  // @@protoc_insertion_point(field_get:example.AdCVRFeatureValue.emb_w)
  return _internal_emb_w(index);
}
inline void AdCVRFeatureValue::set_emb_w(int index, float value) {
  emb_w_.Set(index, value);
  // @@protoc_insertion_point(field_set:example.AdCVRFeatureValue.emb_w)
}
inline void AdCVRFeatureValue::_internal_add_emb_w(float value) {
  emb_w_.Add(value);
}
inline void AdCVRFeatureValue::add_emb_w(float value) {
  _internal_add_emb_w(value);
  // @@protoc_insertion_point(field_add:example.AdCVRFeatureValue.emb_w)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AdCVRFeatureValue::_internal_emb_w() const {
  return emb_w_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AdCVRFeatureValue::emb_w() const {
  // @@protoc_insertion_point(field_list:example.AdCVRFeatureValue.emb_w)
  return _internal_emb_w();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AdCVRFeatureValue::_internal_mutable_emb_w() {
  return &emb_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AdCVRFeatureValue::mutable_emb_w() {
  // @@protoc_insertion_point(field_mutable_list:example.AdCVRFeatureValue.emb_w)
  return _internal_mutable_emb_w();
}

// -------------------------------------------------------------------

// AdInfo4Rank

// optional .adinfo.AdInfo adinfo = 1;
inline bool AdInfo4Rank::_internal_has_adinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || adinfo_ != nullptr);
  return value;
}
inline bool AdInfo4Rank::has_adinfo() const {
  return _internal_has_adinfo();
}
inline const ::adinfo::AdInfo& AdInfo4Rank::_internal_adinfo() const {
  const ::adinfo::AdInfo* p = adinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::adinfo::AdInfo*>(
      &::adinfo::_AdInfo_default_instance_);
}
inline const ::adinfo::AdInfo& AdInfo4Rank::adinfo() const {
  // @@protoc_insertion_point(field_get:example.AdInfo4Rank.adinfo)
  return _internal_adinfo();
}
inline void AdInfo4Rank::unsafe_arena_set_allocated_adinfo(
    ::adinfo::AdInfo* adinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adinfo_);
  }
  adinfo_ = adinfo;
  if (adinfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.AdInfo4Rank.adinfo)
}
inline ::adinfo::AdInfo* AdInfo4Rank::release_adinfo() {
  auto temp = unsafe_arena_release_adinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::adinfo::AdInfo* AdInfo4Rank::unsafe_arena_release_adinfo() {
  // @@protoc_insertion_point(field_release:example.AdInfo4Rank.adinfo)
  _has_bits_[0] &= ~0x00000001u;
  ::adinfo::AdInfo* temp = adinfo_;
  adinfo_ = nullptr;
  return temp;
}
inline ::adinfo::AdInfo* AdInfo4Rank::_internal_mutable_adinfo() {
  _has_bits_[0] |= 0x00000001u;
  if (adinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::adinfo::AdInfo>(GetArena());
    adinfo_ = p;
  }
  return adinfo_;
}
inline ::adinfo::AdInfo* AdInfo4Rank::mutable_adinfo() {
  // @@protoc_insertion_point(field_mutable:example.AdInfo4Rank.adinfo)
  return _internal_mutable_adinfo();
}
inline void AdInfo4Rank::set_allocated_adinfo(::adinfo::AdInfo* adinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(adinfo_);
  }
  if (adinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adinfo)->GetArena();
    if (message_arena != submessage_arena) {
      adinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  adinfo_ = adinfo;
  // @@protoc_insertion_point(field_set_allocated:example.AdInfo4Rank.adinfo)
}

// optional double rankscore = 2;
inline bool AdInfo4Rank::_internal_has_rankscore() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdInfo4Rank::has_rankscore() const {
  return _internal_has_rankscore();
}
inline void AdInfo4Rank::clear_rankscore() {
  rankscore_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double AdInfo4Rank::_internal_rankscore() const {
  return rankscore_;
}
inline double AdInfo4Rank::rankscore() const {
  // @@protoc_insertion_point(field_get:example.AdInfo4Rank.rankscore)
  return _internal_rankscore();
}
inline void AdInfo4Rank::_internal_set_rankscore(double value) {
  _has_bits_[0] |= 0x00000002u;
  rankscore_ = value;
}
inline void AdInfo4Rank::set_rankscore(double value) {
  _internal_set_rankscore(value);
  // @@protoc_insertion_point(field_set:example.AdInfo4Rank.rankscore)
}

// optional double ctr = 3;
inline bool AdInfo4Rank::_internal_has_ctr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AdInfo4Rank::has_ctr() const {
  return _internal_has_ctr();
}
inline void AdInfo4Rank::clear_ctr() {
  ctr_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double AdInfo4Rank::_internal_ctr() const {
  return ctr_;
}
inline double AdInfo4Rank::ctr() const {
  // @@protoc_insertion_point(field_get:example.AdInfo4Rank.ctr)
  return _internal_ctr();
}
inline void AdInfo4Rank::_internal_set_ctr(double value) {
  _has_bits_[0] |= 0x00000004u;
  ctr_ = value;
}
inline void AdInfo4Rank::set_ctr(double value) {
  _internal_set_ctr(value);
  // @@protoc_insertion_point(field_set:example.AdInfo4Rank.ctr)
}

// optional uint64 adid = 4;
inline bool AdInfo4Rank::_internal_has_adid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AdInfo4Rank::has_adid() const {
  return _internal_has_adid();
}
inline void AdInfo4Rank::clear_adid() {
  adid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdInfo4Rank::_internal_adid() const {
  return adid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdInfo4Rank::adid() const {
  // @@protoc_insertion_point(field_get:example.AdInfo4Rank.adid)
  return _internal_adid();
}
inline void AdInfo4Rank::_internal_set_adid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  adid_ = value;
}
inline void AdInfo4Rank::set_adid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_adid(value);
  // @@protoc_insertion_point(field_set:example.AdInfo4Rank.adid)
}

// repeated .example.AdFeatureValue feature_values = 5;
inline int AdInfo4Rank::_internal_feature_values_size() const {
  return feature_values_.size();
}
inline int AdInfo4Rank::feature_values_size() const {
  return _internal_feature_values_size();
}
inline void AdInfo4Rank::clear_feature_values() {
  feature_values_.Clear();
}
inline ::example::AdFeatureValue* AdInfo4Rank::mutable_feature_values(int index) {
  // @@protoc_insertion_point(field_mutable:example.AdInfo4Rank.feature_values)
  return feature_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureValue >*
AdInfo4Rank::mutable_feature_values() {
  // @@protoc_insertion_point(field_mutable_list:example.AdInfo4Rank.feature_values)
  return &feature_values_;
}
inline const ::example::AdFeatureValue& AdInfo4Rank::_internal_feature_values(int index) const {
  return feature_values_.Get(index);
}
inline const ::example::AdFeatureValue& AdInfo4Rank::feature_values(int index) const {
  // @@protoc_insertion_point(field_get:example.AdInfo4Rank.feature_values)
  return _internal_feature_values(index);
}
inline ::example::AdFeatureValue* AdInfo4Rank::_internal_add_feature_values() {
  return feature_values_.Add();
}
inline ::example::AdFeatureValue* AdInfo4Rank::add_feature_values() {
  // @@protoc_insertion_point(field_add:example.AdInfo4Rank.feature_values)
  return _internal_add_feature_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureValue >&
AdInfo4Rank::feature_values() const {
  // @@protoc_insertion_point(field_list:example.AdInfo4Rank.feature_values)
  return feature_values_;
}

// repeated .example.AdFeatureKey feature_keys = 6;
inline int AdInfo4Rank::_internal_feature_keys_size() const {
  return feature_keys_.size();
}
inline int AdInfo4Rank::feature_keys_size() const {
  return _internal_feature_keys_size();
}
inline void AdInfo4Rank::clear_feature_keys() {
  feature_keys_.Clear();
}
inline ::example::AdFeatureKey* AdInfo4Rank::mutable_feature_keys(int index) {
  // @@protoc_insertion_point(field_mutable:example.AdInfo4Rank.feature_keys)
  return feature_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureKey >*
AdInfo4Rank::mutable_feature_keys() {
  // @@protoc_insertion_point(field_mutable_list:example.AdInfo4Rank.feature_keys)
  return &feature_keys_;
}
inline const ::example::AdFeatureKey& AdInfo4Rank::_internal_feature_keys(int index) const {
  return feature_keys_.Get(index);
}
inline const ::example::AdFeatureKey& AdInfo4Rank::feature_keys(int index) const {
  // @@protoc_insertion_point(field_get:example.AdInfo4Rank.feature_keys)
  return _internal_feature_keys(index);
}
inline ::example::AdFeatureKey* AdInfo4Rank::_internal_add_feature_keys() {
  return feature_keys_.Add();
}
inline ::example::AdFeatureKey* AdInfo4Rank::add_feature_keys() {
  // @@protoc_insertion_point(field_add:example.AdInfo4Rank.feature_keys)
  return _internal_add_feature_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureKey >&
AdInfo4Rank::feature_keys() const {
  // @@protoc_insertion_point(field_list:example.AdInfo4Rank.feature_keys)
  return feature_keys_;
}

// optional double cvr = 7;
inline bool AdInfo4Rank::_internal_has_cvr() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AdInfo4Rank::has_cvr() const {
  return _internal_has_cvr();
}
inline void AdInfo4Rank::clear_cvr() {
  cvr_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double AdInfo4Rank::_internal_cvr() const {
  return cvr_;
}
inline double AdInfo4Rank::cvr() const {
  // @@protoc_insertion_point(field_get:example.AdInfo4Rank.cvr)
  return _internal_cvr();
}
inline void AdInfo4Rank::_internal_set_cvr(double value) {
  _has_bits_[0] |= 0x00000010u;
  cvr_ = value;
}
inline void AdInfo4Rank::set_cvr(double value) {
  _internal_set_cvr(value);
  // @@protoc_insertion_point(field_set:example.AdInfo4Rank.cvr)
}

// repeated .example.AdCVRFeatureValue cvr_feature_values = 8;
inline int AdInfo4Rank::_internal_cvr_feature_values_size() const {
  return cvr_feature_values_.size();
}
inline int AdInfo4Rank::cvr_feature_values_size() const {
  return _internal_cvr_feature_values_size();
}
inline void AdInfo4Rank::clear_cvr_feature_values() {
  cvr_feature_values_.Clear();
}
inline ::example::AdCVRFeatureValue* AdInfo4Rank::mutable_cvr_feature_values(int index) {
  // @@protoc_insertion_point(field_mutable:example.AdInfo4Rank.cvr_feature_values)
  return cvr_feature_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdCVRFeatureValue >*
AdInfo4Rank::mutable_cvr_feature_values() {
  // @@protoc_insertion_point(field_mutable_list:example.AdInfo4Rank.cvr_feature_values)
  return &cvr_feature_values_;
}
inline const ::example::AdCVRFeatureValue& AdInfo4Rank::_internal_cvr_feature_values(int index) const {
  return cvr_feature_values_.Get(index);
}
inline const ::example::AdCVRFeatureValue& AdInfo4Rank::cvr_feature_values(int index) const {
  // @@protoc_insertion_point(field_get:example.AdInfo4Rank.cvr_feature_values)
  return _internal_cvr_feature_values(index);
}
inline ::example::AdCVRFeatureValue* AdInfo4Rank::_internal_add_cvr_feature_values() {
  return cvr_feature_values_.Add();
}
inline ::example::AdCVRFeatureValue* AdInfo4Rank::add_cvr_feature_values() {
  // @@protoc_insertion_point(field_add:example.AdInfo4Rank.cvr_feature_values)
  return _internal_add_cvr_feature_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdCVRFeatureValue >&
AdInfo4Rank::cvr_feature_values() const {
  // @@protoc_insertion_point(field_list:example.AdInfo4Rank.cvr_feature_values)
  return cvr_feature_values_;
}

// repeated .example.AdFeatureKey cvr_feature_keys = 9;
inline int AdInfo4Rank::_internal_cvr_feature_keys_size() const {
  return cvr_feature_keys_.size();
}
inline int AdInfo4Rank::cvr_feature_keys_size() const {
  return _internal_cvr_feature_keys_size();
}
inline void AdInfo4Rank::clear_cvr_feature_keys() {
  cvr_feature_keys_.Clear();
}
inline ::example::AdFeatureKey* AdInfo4Rank::mutable_cvr_feature_keys(int index) {
  // @@protoc_insertion_point(field_mutable:example.AdInfo4Rank.cvr_feature_keys)
  return cvr_feature_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureKey >*
AdInfo4Rank::mutable_cvr_feature_keys() {
  // @@protoc_insertion_point(field_mutable_list:example.AdInfo4Rank.cvr_feature_keys)
  return &cvr_feature_keys_;
}
inline const ::example::AdFeatureKey& AdInfo4Rank::_internal_cvr_feature_keys(int index) const {
  return cvr_feature_keys_.Get(index);
}
inline const ::example::AdFeatureKey& AdInfo4Rank::cvr_feature_keys(int index) const {
  // @@protoc_insertion_point(field_get:example.AdInfo4Rank.cvr_feature_keys)
  return _internal_cvr_feature_keys(index);
}
inline ::example::AdFeatureKey* AdInfo4Rank::_internal_add_cvr_feature_keys() {
  return cvr_feature_keys_.Add();
}
inline ::example::AdFeatureKey* AdInfo4Rank::add_cvr_feature_keys() {
  // @@protoc_insertion_point(field_add:example.AdInfo4Rank.cvr_feature_keys)
  return _internal_add_cvr_feature_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdFeatureKey >&
AdInfo4Rank::cvr_feature_keys() const {
  // @@protoc_insertion_point(field_list:example.AdInfo4Rank.cvr_feature_keys)
  return cvr_feature_keys_;
}

// -------------------------------------------------------------------

// VisitInfo

// optional uint32 province = 1;
inline bool VisitInfo::_internal_has_province() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VisitInfo::has_province() const {
  return _internal_has_province();
}
inline void VisitInfo::clear_province() {
  province_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisitInfo::_internal_province() const {
  return province_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisitInfo::province() const {
  // @@protoc_insertion_point(field_get:example.VisitInfo.province)
  return _internal_province();
}
inline void VisitInfo::_internal_set_province(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  province_ = value;
}
inline void VisitInfo::set_province(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_province(value);
  // @@protoc_insertion_point(field_set:example.VisitInfo.province)
}

// optional string citystr = 2;
inline bool VisitInfo::_internal_has_citystr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VisitInfo::has_citystr() const {
  return _internal_has_citystr();
}
inline void VisitInfo::clear_citystr() {
  citystr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VisitInfo::citystr() const {
  // @@protoc_insertion_point(field_get:example.VisitInfo.citystr)
  return _internal_citystr();
}
inline void VisitInfo::set_citystr(const std::string& value) {
  _internal_set_citystr(value);
  // @@protoc_insertion_point(field_set:example.VisitInfo.citystr)
}
inline std::string* VisitInfo::mutable_citystr() {
  // @@protoc_insertion_point(field_mutable:example.VisitInfo.citystr)
  return _internal_mutable_citystr();
}
inline const std::string& VisitInfo::_internal_citystr() const {
  return citystr_.Get();
}
inline void VisitInfo::_internal_set_citystr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  citystr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VisitInfo::set_citystr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  citystr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.VisitInfo.citystr)
}
inline void VisitInfo::set_citystr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  citystr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.VisitInfo.citystr)
}
inline void VisitInfo::set_citystr(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  citystr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.VisitInfo.citystr)
}
inline std::string* VisitInfo::_internal_mutable_citystr() {
  _has_bits_[0] |= 0x00000001u;
  return citystr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VisitInfo::release_citystr() {
  // @@protoc_insertion_point(field_release:example.VisitInfo.citystr)
  if (!_internal_has_citystr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return citystr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VisitInfo::set_allocated_citystr(std::string* citystr) {
  if (citystr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  citystr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), citystr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.VisitInfo.citystr)
}
inline std::string* VisitInfo::unsafe_arena_release_citystr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.VisitInfo.citystr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return citystr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VisitInfo::unsafe_arena_set_allocated_citystr(
    std::string* citystr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (citystr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  citystr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      citystr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.VisitInfo.citystr)
}

// optional uint32 city = 3;
inline bool VisitInfo::_internal_has_city() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VisitInfo::has_city() const {
  return _internal_has_city();
}
inline void VisitInfo::clear_city() {
  city_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisitInfo::_internal_city() const {
  return city_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisitInfo::city() const {
  // @@protoc_insertion_point(field_get:example.VisitInfo.city)
  return _internal_city();
}
inline void VisitInfo::_internal_set_city(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  city_ = value;
}
inline void VisitInfo::set_city(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:example.VisitInfo.city)
}

// optional string pvid = 4;
inline bool VisitInfo::_internal_has_pvid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VisitInfo::has_pvid() const {
  return _internal_has_pvid();
}
inline void VisitInfo::clear_pvid() {
  pvid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VisitInfo::pvid() const {
  // @@protoc_insertion_point(field_get:example.VisitInfo.pvid)
  return _internal_pvid();
}
inline void VisitInfo::set_pvid(const std::string& value) {
  _internal_set_pvid(value);
  // @@protoc_insertion_point(field_set:example.VisitInfo.pvid)
}
inline std::string* VisitInfo::mutable_pvid() {
  // @@protoc_insertion_point(field_mutable:example.VisitInfo.pvid)
  return _internal_mutable_pvid();
}
inline const std::string& VisitInfo::_internal_pvid() const {
  return pvid_.Get();
}
inline void VisitInfo::_internal_set_pvid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pvid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VisitInfo::set_pvid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pvid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.VisitInfo.pvid)
}
inline void VisitInfo::set_pvid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pvid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.VisitInfo.pvid)
}
inline void VisitInfo::set_pvid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pvid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.VisitInfo.pvid)
}
inline std::string* VisitInfo::_internal_mutable_pvid() {
  _has_bits_[0] |= 0x00000002u;
  return pvid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VisitInfo::release_pvid() {
  // @@protoc_insertion_point(field_release:example.VisitInfo.pvid)
  if (!_internal_has_pvid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pvid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VisitInfo::set_allocated_pvid(std::string* pvid) {
  if (pvid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pvid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pvid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.VisitInfo.pvid)
}
inline std::string* VisitInfo::unsafe_arena_release_pvid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.VisitInfo.pvid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return pvid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VisitInfo::unsafe_arena_set_allocated_pvid(
    std::string* pvid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pvid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pvid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pvid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.VisitInfo.pvid)
}

// optional string oaid = 5;
inline bool VisitInfo::_internal_has_oaid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VisitInfo::has_oaid() const {
  return _internal_has_oaid();
}
inline void VisitInfo::clear_oaid() {
  oaid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VisitInfo::oaid() const {
  // @@protoc_insertion_point(field_get:example.VisitInfo.oaid)
  return _internal_oaid();
}
inline void VisitInfo::set_oaid(const std::string& value) {
  _internal_set_oaid(value);
  // @@protoc_insertion_point(field_set:example.VisitInfo.oaid)
}
inline std::string* VisitInfo::mutable_oaid() {
  // @@protoc_insertion_point(field_mutable:example.VisitInfo.oaid)
  return _internal_mutable_oaid();
}
inline const std::string& VisitInfo::_internal_oaid() const {
  return oaid_.Get();
}
inline void VisitInfo::_internal_set_oaid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  oaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VisitInfo::set_oaid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  oaid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.VisitInfo.oaid)
}
inline void VisitInfo::set_oaid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  oaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.VisitInfo.oaid)
}
inline void VisitInfo::set_oaid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  oaid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.VisitInfo.oaid)
}
inline std::string* VisitInfo::_internal_mutable_oaid() {
  _has_bits_[0] |= 0x00000004u;
  return oaid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VisitInfo::release_oaid() {
  // @@protoc_insertion_point(field_release:example.VisitInfo.oaid)
  if (!_internal_has_oaid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return oaid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VisitInfo::set_allocated_oaid(std::string* oaid) {
  if (oaid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  oaid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oaid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.VisitInfo.oaid)
}
inline std::string* VisitInfo::unsafe_arena_release_oaid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.VisitInfo.oaid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return oaid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VisitInfo::unsafe_arena_set_allocated_oaid(
    std::string* oaid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (oaid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  oaid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      oaid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.VisitInfo.oaid)
}

// optional .userbehavior.UserOaidFeature oaid_fea = 6;
inline bool VisitInfo::_internal_has_oaid_fea() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || oaid_fea_ != nullptr);
  return value;
}
inline bool VisitInfo::has_oaid_fea() const {
  return _internal_has_oaid_fea();
}
inline const ::userbehavior::UserOaidFeature& VisitInfo::_internal_oaid_fea() const {
  const ::userbehavior::UserOaidFeature* p = oaid_fea_;
  return p != nullptr ? *p : *reinterpret_cast<const ::userbehavior::UserOaidFeature*>(
      &::userbehavior::_UserOaidFeature_default_instance_);
}
inline const ::userbehavior::UserOaidFeature& VisitInfo::oaid_fea() const {
  // @@protoc_insertion_point(field_get:example.VisitInfo.oaid_fea)
  return _internal_oaid_fea();
}
inline void VisitInfo::unsafe_arena_set_allocated_oaid_fea(
    ::userbehavior::UserOaidFeature* oaid_fea) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oaid_fea_);
  }
  oaid_fea_ = oaid_fea;
  if (oaid_fea) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.VisitInfo.oaid_fea)
}
inline ::userbehavior::UserOaidFeature* VisitInfo::release_oaid_fea() {
  auto temp = unsafe_arena_release_oaid_fea();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::userbehavior::UserOaidFeature* VisitInfo::unsafe_arena_release_oaid_fea() {
  // @@protoc_insertion_point(field_release:example.VisitInfo.oaid_fea)
  _has_bits_[0] &= ~0x00000008u;
  ::userbehavior::UserOaidFeature* temp = oaid_fea_;
  oaid_fea_ = nullptr;
  return temp;
}
inline ::userbehavior::UserOaidFeature* VisitInfo::_internal_mutable_oaid_fea() {
  _has_bits_[0] |= 0x00000008u;
  if (oaid_fea_ == nullptr) {
    auto* p = CreateMaybeMessage<::userbehavior::UserOaidFeature>(GetArena());
    oaid_fea_ = p;
  }
  return oaid_fea_;
}
inline ::userbehavior::UserOaidFeature* VisitInfo::mutable_oaid_fea() {
  // @@protoc_insertion_point(field_mutable:example.VisitInfo.oaid_fea)
  return _internal_mutable_oaid_fea();
}
inline void VisitInfo::set_allocated_oaid_fea(::userbehavior::UserOaidFeature* oaid_fea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oaid_fea_);
  }
  if (oaid_fea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oaid_fea)->GetArena();
    if (message_arena != submessage_arena) {
      oaid_fea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oaid_fea, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  oaid_fea_ = oaid_fea;
  // @@protoc_insertion_point(field_set_allocated:example.VisitInfo.oaid_fea)
}

// optional .orderfeature.OrderInfoFeature order_feature = 7;
inline bool VisitInfo::_internal_has_order_feature() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || order_feature_ != nullptr);
  return value;
}
inline bool VisitInfo::has_order_feature() const {
  return _internal_has_order_feature();
}
inline const ::orderfeature::OrderInfoFeature& VisitInfo::_internal_order_feature() const {
  const ::orderfeature::OrderInfoFeature* p = order_feature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::orderfeature::OrderInfoFeature*>(
      &::orderfeature::_OrderInfoFeature_default_instance_);
}
inline const ::orderfeature::OrderInfoFeature& VisitInfo::order_feature() const {
  // @@protoc_insertion_point(field_get:example.VisitInfo.order_feature)
  return _internal_order_feature();
}
inline void VisitInfo::unsafe_arena_set_allocated_order_feature(
    ::orderfeature::OrderInfoFeature* order_feature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_feature_);
  }
  order_feature_ = order_feature;
  if (order_feature) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.VisitInfo.order_feature)
}
inline ::orderfeature::OrderInfoFeature* VisitInfo::release_order_feature() {
  auto temp = unsafe_arena_release_order_feature();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::orderfeature::OrderInfoFeature* VisitInfo::unsafe_arena_release_order_feature() {
  // @@protoc_insertion_point(field_release:example.VisitInfo.order_feature)
  _has_bits_[0] &= ~0x00000010u;
  ::orderfeature::OrderInfoFeature* temp = order_feature_;
  order_feature_ = nullptr;
  return temp;
}
inline ::orderfeature::OrderInfoFeature* VisitInfo::_internal_mutable_order_feature() {
  _has_bits_[0] |= 0x00000010u;
  if (order_feature_ == nullptr) {
    auto* p = CreateMaybeMessage<::orderfeature::OrderInfoFeature>(GetArena());
    order_feature_ = p;
  }
  return order_feature_;
}
inline ::orderfeature::OrderInfoFeature* VisitInfo::mutable_order_feature() {
  // @@protoc_insertion_point(field_mutable:example.VisitInfo.order_feature)
  return _internal_mutable_order_feature();
}
inline void VisitInfo::set_allocated_order_feature(::orderfeature::OrderInfoFeature* order_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_feature_);
  }
  if (order_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_feature)->GetArena();
    if (message_arena != submessage_arena) {
      order_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_feature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  order_feature_ = order_feature;
  // @@protoc_insertion_point(field_set_allocated:example.VisitInfo.order_feature)
}

// -------------------------------------------------------------------

// QueryInfo

// optional bytes query = 1;
inline bool QueryInfo::_internal_has_query() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QueryInfo::has_query() const {
  return _internal_has_query();
}
inline void QueryInfo::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QueryInfo::query() const {
  // @@protoc_insertion_point(field_get:example.QueryInfo.query)
  return _internal_query();
}
inline void QueryInfo::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:example.QueryInfo.query)
}
inline std::string* QueryInfo::mutable_query() {
  // @@protoc_insertion_point(field_mutable:example.QueryInfo.query)
  return _internal_mutable_query();
}
inline const std::string& QueryInfo::_internal_query() const {
  return query_.Get();
}
inline void QueryInfo::_internal_set_query(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryInfo::set_query(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.QueryInfo.query)
}
inline void QueryInfo::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.QueryInfo.query)
}
inline void QueryInfo::set_query(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.QueryInfo.query)
}
inline std::string* QueryInfo::_internal_mutable_query() {
  _has_bits_[0] |= 0x00000001u;
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryInfo::release_query() {
  // @@protoc_insertion_point(field_release:example.QueryInfo.query)
  if (!_internal_has_query()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return query_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryInfo::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.QueryInfo.query)
}
inline std::string* QueryInfo::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.QueryInfo.query)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return query_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryInfo::unsafe_arena_set_allocated_query(
    std::string* query) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (query != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  query_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      query, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.QueryInfo.query)
}

// repeated .example.AdInfo4Rank adlist = 2;
inline int QueryInfo::_internal_adlist_size() const {
  return adlist_.size();
}
inline int QueryInfo::adlist_size() const {
  return _internal_adlist_size();
}
inline void QueryInfo::clear_adlist() {
  adlist_.Clear();
}
inline ::example::AdInfo4Rank* QueryInfo::mutable_adlist(int index) {
  // @@protoc_insertion_point(field_mutable:example.QueryInfo.adlist)
  return adlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdInfo4Rank >*
QueryInfo::mutable_adlist() {
  // @@protoc_insertion_point(field_mutable_list:example.QueryInfo.adlist)
  return &adlist_;
}
inline const ::example::AdInfo4Rank& QueryInfo::_internal_adlist(int index) const {
  return adlist_.Get(index);
}
inline const ::example::AdInfo4Rank& QueryInfo::adlist(int index) const {
  // @@protoc_insertion_point(field_get:example.QueryInfo.adlist)
  return _internal_adlist(index);
}
inline ::example::AdInfo4Rank* QueryInfo::_internal_add_adlist() {
  return adlist_.Add();
}
inline ::example::AdInfo4Rank* QueryInfo::add_adlist() {
  // @@protoc_insertion_point(field_add:example.QueryInfo.adlist)
  return _internal_add_adlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::AdInfo4Rank >&
QueryInfo::adlist() const {
  // @@protoc_insertion_point(field_list:example.QueryInfo.adlist)
  return adlist_;
}

// optional bool is_cons_fea = 3;
inline bool QueryInfo::_internal_has_is_cons_fea() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool QueryInfo::has_is_cons_fea() const {
  return _internal_has_is_cons_fea();
}
inline void QueryInfo::clear_is_cons_fea() {
  is_cons_fea_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool QueryInfo::_internal_is_cons_fea() const {
  return is_cons_fea_;
}
inline bool QueryInfo::is_cons_fea() const {
  // @@protoc_insertion_point(field_get:example.QueryInfo.is_cons_fea)
  return _internal_is_cons_fea();
}
inline void QueryInfo::_internal_set_is_cons_fea(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_cons_fea_ = value;
}
inline void QueryInfo::set_is_cons_fea(bool value) {
  _internal_set_is_cons_fea(value);
  // @@protoc_insertion_point(field_set:example.QueryInfo.is_cons_fea)
}

// optional .consfea.ConsFeaFull cons_fea_full = 4;
inline bool QueryInfo::_internal_has_cons_fea_full() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cons_fea_full_ != nullptr);
  return value;
}
inline bool QueryInfo::has_cons_fea_full() const {
  return _internal_has_cons_fea_full();
}
inline const ::consfea::ConsFeaFull& QueryInfo::_internal_cons_fea_full() const {
  const ::consfea::ConsFeaFull* p = cons_fea_full_;
  return p != nullptr ? *p : *reinterpret_cast<const ::consfea::ConsFeaFull*>(
      &::consfea::_ConsFeaFull_default_instance_);
}
inline const ::consfea::ConsFeaFull& QueryInfo::cons_fea_full() const {
  // @@protoc_insertion_point(field_get:example.QueryInfo.cons_fea_full)
  return _internal_cons_fea_full();
}
inline void QueryInfo::unsafe_arena_set_allocated_cons_fea_full(
    ::consfea::ConsFeaFull* cons_fea_full) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cons_fea_full_);
  }
  cons_fea_full_ = cons_fea_full;
  if (cons_fea_full) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.QueryInfo.cons_fea_full)
}
inline ::consfea::ConsFeaFull* QueryInfo::release_cons_fea_full() {
  auto temp = unsafe_arena_release_cons_fea_full();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::consfea::ConsFeaFull* QueryInfo::unsafe_arena_release_cons_fea_full() {
  // @@protoc_insertion_point(field_release:example.QueryInfo.cons_fea_full)
  _has_bits_[0] &= ~0x00000002u;
  ::consfea::ConsFeaFull* temp = cons_fea_full_;
  cons_fea_full_ = nullptr;
  return temp;
}
inline ::consfea::ConsFeaFull* QueryInfo::_internal_mutable_cons_fea_full() {
  _has_bits_[0] |= 0x00000002u;
  if (cons_fea_full_ == nullptr) {
    auto* p = CreateMaybeMessage<::consfea::ConsFeaFull>(GetArena());
    cons_fea_full_ = p;
  }
  return cons_fea_full_;
}
inline ::consfea::ConsFeaFull* QueryInfo::mutable_cons_fea_full() {
  // @@protoc_insertion_point(field_mutable:example.QueryInfo.cons_fea_full)
  return _internal_mutable_cons_fea_full();
}
inline void QueryInfo::set_allocated_cons_fea_full(::consfea::ConsFeaFull* cons_fea_full) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cons_fea_full_);
  }
  if (cons_fea_full) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cons_fea_full)->GetArena();
    if (message_arena != submessage_arena) {
      cons_fea_full = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cons_fea_full, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cons_fea_full_ = cons_fea_full;
  // @@protoc_insertion_point(field_set_allocated:example.QueryInfo.cons_fea_full)
}

// -------------------------------------------------------------------

// RankStruct

// optional .example.VisitInfo visitinfo = 1;
inline bool RankStruct::_internal_has_visitinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || visitinfo_ != nullptr);
  return value;
}
inline bool RankStruct::has_visitinfo() const {
  return _internal_has_visitinfo();
}
inline void RankStruct::clear_visitinfo() {
  if (visitinfo_ != nullptr) visitinfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::example::VisitInfo& RankStruct::_internal_visitinfo() const {
  const ::example::VisitInfo* p = visitinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::example::VisitInfo*>(
      &::example::_VisitInfo_default_instance_);
}
inline const ::example::VisitInfo& RankStruct::visitinfo() const {
  // @@protoc_insertion_point(field_get:example.RankStruct.visitinfo)
  return _internal_visitinfo();
}
inline void RankStruct::unsafe_arena_set_allocated_visitinfo(
    ::example::VisitInfo* visitinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visitinfo_);
  }
  visitinfo_ = visitinfo;
  if (visitinfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.RankStruct.visitinfo)
}
inline ::example::VisitInfo* RankStruct::release_visitinfo() {
  auto temp = unsafe_arena_release_visitinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::example::VisitInfo* RankStruct::unsafe_arena_release_visitinfo() {
  // @@protoc_insertion_point(field_release:example.RankStruct.visitinfo)
  _has_bits_[0] &= ~0x00000001u;
  ::example::VisitInfo* temp = visitinfo_;
  visitinfo_ = nullptr;
  return temp;
}
inline ::example::VisitInfo* RankStruct::_internal_mutable_visitinfo() {
  _has_bits_[0] |= 0x00000001u;
  if (visitinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::example::VisitInfo>(GetArena());
    visitinfo_ = p;
  }
  return visitinfo_;
}
inline ::example::VisitInfo* RankStruct::mutable_visitinfo() {
  // @@protoc_insertion_point(field_mutable:example.RankStruct.visitinfo)
  return _internal_mutable_visitinfo();
}
inline void RankStruct::set_allocated_visitinfo(::example::VisitInfo* visitinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete visitinfo_;
  }
  if (visitinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(visitinfo);
    if (message_arena != submessage_arena) {
      visitinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visitinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  visitinfo_ = visitinfo;
  // @@protoc_insertion_point(field_set_allocated:example.RankStruct.visitinfo)
}

// repeated .example.QueryInfo querylist = 2;
inline int RankStruct::_internal_querylist_size() const {
  return querylist_.size();
}
inline int RankStruct::querylist_size() const {
  return _internal_querylist_size();
}
inline void RankStruct::clear_querylist() {
  querylist_.Clear();
}
inline ::example::QueryInfo* RankStruct::mutable_querylist(int index) {
  // @@protoc_insertion_point(field_mutable:example.RankStruct.querylist)
  return querylist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::QueryInfo >*
RankStruct::mutable_querylist() {
  // @@protoc_insertion_point(field_mutable_list:example.RankStruct.querylist)
  return &querylist_;
}
inline const ::example::QueryInfo& RankStruct::_internal_querylist(int index) const {
  return querylist_.Get(index);
}
inline const ::example::QueryInfo& RankStruct::querylist(int index) const {
  // @@protoc_insertion_point(field_get:example.RankStruct.querylist)
  return _internal_querylist(index);
}
inline ::example::QueryInfo* RankStruct::_internal_add_querylist() {
  return querylist_.Add();
}
inline ::example::QueryInfo* RankStruct::add_querylist() {
  // @@protoc_insertion_point(field_add:example.RankStruct.querylist)
  return _internal_add_querylist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::QueryInfo >&
RankStruct::querylist() const {
  // @@protoc_insertion_point(field_list:example.RankStruct.querylist)
  return querylist_;
}

// -------------------------------------------------------------------

// RankRequest

// repeated .example.RankStruct rank_struct = 1;
inline int RankRequest::_internal_rank_struct_size() const {
  return rank_struct_.size();
}
inline int RankRequest::rank_struct_size() const {
  return _internal_rank_struct_size();
}
inline void RankRequest::clear_rank_struct() {
  rank_struct_.Clear();
}
inline ::example::RankStruct* RankRequest::mutable_rank_struct(int index) {
  // @@protoc_insertion_point(field_mutable:example.RankRequest.rank_struct)
  return rank_struct_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::RankStruct >*
RankRequest::mutable_rank_struct() {
  // @@protoc_insertion_point(field_mutable_list:example.RankRequest.rank_struct)
  return &rank_struct_;
}
inline const ::example::RankStruct& RankRequest::_internal_rank_struct(int index) const {
  return rank_struct_.Get(index);
}
inline const ::example::RankStruct& RankRequest::rank_struct(int index) const {
  // @@protoc_insertion_point(field_get:example.RankRequest.rank_struct)
  return _internal_rank_struct(index);
}
inline ::example::RankStruct* RankRequest::_internal_add_rank_struct() {
  return rank_struct_.Add();
}
inline ::example::RankStruct* RankRequest::add_rank_struct() {
  // @@protoc_insertion_point(field_add:example.RankRequest.rank_struct)
  return _internal_add_rank_struct();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::RankStruct >&
RankRequest::rank_struct() const {
  // @@protoc_insertion_point(field_list:example.RankRequest.rank_struct)
  return rank_struct_;
}

// -------------------------------------------------------------------

// RankResponse

// optional string rank_response = 1;
inline bool RankResponse::_internal_has_rank_response() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RankResponse::has_rank_response() const {
  return _internal_has_rank_response();
}
inline void RankResponse::clear_rank_response() {
  rank_response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RankResponse::rank_response() const {
  // @@protoc_insertion_point(field_get:example.RankResponse.rank_response)
  return _internal_rank_response();
}
inline void RankResponse::set_rank_response(const std::string& value) {
  _internal_set_rank_response(value);
  // @@protoc_insertion_point(field_set:example.RankResponse.rank_response)
}
inline std::string* RankResponse::mutable_rank_response() {
  // @@protoc_insertion_point(field_mutable:example.RankResponse.rank_response)
  return _internal_mutable_rank_response();
}
inline const std::string& RankResponse::_internal_rank_response() const {
  return rank_response_.Get();
}
inline void RankResponse::_internal_set_rank_response(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rank_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RankResponse::set_rank_response(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rank_response_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.RankResponse.rank_response)
}
inline void RankResponse::set_rank_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rank_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.RankResponse.rank_response)
}
inline void RankResponse::set_rank_response(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rank_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.RankResponse.rank_response)
}
inline std::string* RankResponse::_internal_mutable_rank_response() {
  _has_bits_[0] |= 0x00000001u;
  return rank_response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RankResponse::release_rank_response() {
  // @@protoc_insertion_point(field_release:example.RankResponse.rank_response)
  if (!_internal_has_rank_response()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rank_response_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RankResponse::set_allocated_rank_response(std::string* rank_response) {
  if (rank_response != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rank_response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rank_response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.RankResponse.rank_response)
}
inline std::string* RankResponse::unsafe_arena_release_rank_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.RankResponse.rank_response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return rank_response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RankResponse::unsafe_arena_set_allocated_rank_response(
    std::string* rank_response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rank_response != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rank_response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rank_response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.RankResponse.rank_response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace example

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_echo_2eproto
