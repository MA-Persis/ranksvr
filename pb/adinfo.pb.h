// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adinfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_adinfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_adinfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_adinfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_adinfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_adinfo_2eproto;
namespace adinfo {
class AdAccount;
class AdAccountDefaultTypeInternal;
extern AdAccountDefaultTypeInternal _AdAccount_default_instance_;
class AdInfo;
class AdInfoDefaultTypeInternal;
extern AdInfoDefaultTypeInternal _AdInfo_default_instance_;
}  // namespace adinfo
PROTOBUF_NAMESPACE_OPEN
template<> ::adinfo::AdAccount* Arena::CreateMaybeMessage<::adinfo::AdAccount>(Arena*);
template<> ::adinfo::AdInfo* Arena::CreateMaybeMessage<::adinfo::AdInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace adinfo {

// ===================================================================

class AdAccount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adinfo.AdAccount) */ {
 public:
  inline AdAccount() : AdAccount(nullptr) {};
  virtual ~AdAccount();

  AdAccount(const AdAccount& from);
  AdAccount(AdAccount&& from) noexcept
    : AdAccount() {
    *this = ::std::move(from);
  }

  inline AdAccount& operator=(const AdAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdAccount& operator=(AdAccount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdAccount* internal_default_instance() {
    return reinterpret_cast<const AdAccount*>(
               &_AdAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AdAccount& a, AdAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(AdAccount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdAccount* New() const final {
    return CreateMaybeMessage<AdAccount>(nullptr);
  }

  AdAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdAccount& from);
  void MergeFrom(const AdAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adinfo.AdAccount";
  }
  protected:
  explicit AdAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_adinfo_2eproto);
    return ::descriptor_table_adinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdIdFieldNumber = 1,
  };
  // required uint64 ad_id = 1;
  bool has_ad_id() const;
  private:
  bool _internal_has_ad_id() const;
  public:
  void clear_ad_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 ad_id() const;
  void set_ad_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ad_id() const;
  void _internal_set_ad_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:adinfo.AdAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ad_id_;
  friend struct ::TableStruct_adinfo_2eproto;
};
// -------------------------------------------------------------------

class AdInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adinfo.AdInfo) */ {
 public:
  inline AdInfo() : AdInfo(nullptr) {};
  virtual ~AdInfo();

  AdInfo(const AdInfo& from);
  AdInfo(AdInfo&& from) noexcept
    : AdInfo() {
    *this = ::std::move(from);
  }

  inline AdInfo& operator=(const AdInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdInfo& operator=(AdInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdInfo* internal_default_instance() {
    return reinterpret_cast<const AdInfo*>(
               &_AdInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AdInfo& a, AdInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AdInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdInfo* New() const final {
    return CreateMaybeMessage<AdInfo>(nullptr);
  }

  AdInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdInfo& from);
  void MergeFrom(const AdInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adinfo.AdInfo";
  }
  protected:
  explicit AdInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_adinfo_2eproto);
    return ::descriptor_table_adinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // required .adinfo.AdAccount account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::adinfo::AdAccount& account() const;
  ::adinfo::AdAccount* release_account();
  ::adinfo::AdAccount* mutable_account();
  void set_allocated_account(::adinfo::AdAccount* account);
  private:
  const ::adinfo::AdAccount& _internal_account() const;
  ::adinfo::AdAccount* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::adinfo::AdAccount* account);
  ::adinfo::AdAccount* unsafe_arena_release_account();

  // @@protoc_insertion_point(class_scope:adinfo.AdInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::adinfo::AdAccount* account_;
  friend struct ::TableStruct_adinfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AdAccount

// required uint64 ad_id = 1;
inline bool AdAccount::_internal_has_ad_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AdAccount::has_ad_id() const {
  return _internal_has_ad_id();
}
inline void AdAccount::clear_ad_id() {
  ad_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdAccount::_internal_ad_id() const {
  return ad_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdAccount::ad_id() const {
  // @@protoc_insertion_point(field_get:adinfo.AdAccount.ad_id)
  return _internal_ad_id();
}
inline void AdAccount::_internal_set_ad_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ad_id_ = value;
}
inline void AdAccount::set_ad_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ad_id(value);
  // @@protoc_insertion_point(field_set:adinfo.AdAccount.ad_id)
}

// -------------------------------------------------------------------

// AdInfo

// required .adinfo.AdAccount account = 1;
inline bool AdInfo::_internal_has_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || account_ != nullptr);
  return value;
}
inline bool AdInfo::has_account() const {
  return _internal_has_account();
}
inline void AdInfo::clear_account() {
  if (account_ != nullptr) account_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::adinfo::AdAccount& AdInfo::_internal_account() const {
  const ::adinfo::AdAccount* p = account_;
  return p != nullptr ? *p : *reinterpret_cast<const ::adinfo::AdAccount*>(
      &::adinfo::_AdAccount_default_instance_);
}
inline const ::adinfo::AdAccount& AdInfo::account() const {
  // @@protoc_insertion_point(field_get:adinfo.AdInfo.account)
  return _internal_account();
}
inline void AdInfo::unsafe_arena_set_allocated_account(
    ::adinfo::AdAccount* account) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_);
  }
  account_ = account;
  if (account) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adinfo.AdInfo.account)
}
inline ::adinfo::AdAccount* AdInfo::release_account() {
  auto temp = unsafe_arena_release_account();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::adinfo::AdAccount* AdInfo::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:adinfo.AdInfo.account)
  _has_bits_[0] &= ~0x00000001u;
  ::adinfo::AdAccount* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::adinfo::AdAccount* AdInfo::_internal_mutable_account() {
  _has_bits_[0] |= 0x00000001u;
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::adinfo::AdAccount>(GetArena());
    account_ = p;
  }
  return account_;
}
inline ::adinfo::AdAccount* AdInfo::mutable_account() {
  // @@protoc_insertion_point(field_mutable:adinfo.AdInfo.account)
  return _internal_mutable_account();
}
inline void AdInfo::set_allocated_account(::adinfo::AdAccount* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:adinfo.AdInfo.account)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace adinfo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_adinfo_2eproto
