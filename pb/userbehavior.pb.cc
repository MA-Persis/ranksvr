// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userbehavior.proto

#include "userbehavior.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace userbehavior {
class UserBehaviorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserBehavior> _instance;
} _UserBehavior_default_instance_;
class UserOaidFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserOaidFeature> _instance;
} _UserOaidFeature_default_instance_;
}  // namespace userbehavior
static void InitDefaultsscc_info_UserBehavior_userbehavior_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userbehavior::_UserBehavior_default_instance_;
    new (ptr) ::userbehavior::UserBehavior();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userbehavior::UserBehavior::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserBehavior_userbehavior_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserBehavior_userbehavior_2eproto}, {}};

static void InitDefaultsscc_info_UserOaidFeature_userbehavior_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userbehavior::_UserOaidFeature_default_instance_;
    new (ptr) ::userbehavior::UserOaidFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userbehavior::UserOaidFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserOaidFeature_userbehavior_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserOaidFeature_userbehavior_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_userbehavior_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_userbehavior_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_userbehavior_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_userbehavior_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::userbehavior::UserBehavior, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::userbehavior::UserBehavior, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userbehavior::UserBehavior, searchtime_),
  PROTOBUF_FIELD_OFFSET(::userbehavior::UserBehavior, query_),
  PROTOBUF_FIELD_OFFSET(::userbehavior::UserBehavior, platform_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::userbehavior::UserOaidFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::userbehavior::UserOaidFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::userbehavior::UserOaidFeature, oaid_fea_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::userbehavior::UserBehavior)},
  { 11, 17, sizeof(::userbehavior::UserOaidFeature)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userbehavior::_UserBehavior_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::userbehavior::_UserOaidFeature_default_instance_),
};

const char descriptor_table_protodef_userbehavior_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022userbehavior.proto\022\014userbehavior\"C\n\014Us"
  "erBehavior\022\022\n\nsearchtime\030\001 \001(\004\022\r\n\005query\030"
  "\002 \001(\t\022\020\n\010platform\030\003 \001(\r\"#\n\017UserOaidFeatu"
  "re\022\020\n\010oaid_fea\030\001 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_userbehavior_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_userbehavior_2eproto_sccs[2] = {
  &scc_info_UserBehavior_userbehavior_2eproto.base,
  &scc_info_UserOaidFeature_userbehavior_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_userbehavior_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userbehavior_2eproto = {
  false, false, descriptor_table_protodef_userbehavior_2eproto, "userbehavior.proto", 140,
  &descriptor_table_userbehavior_2eproto_once, descriptor_table_userbehavior_2eproto_sccs, descriptor_table_userbehavior_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_userbehavior_2eproto::offsets,
  file_level_metadata_userbehavior_2eproto, 2, file_level_enum_descriptors_userbehavior_2eproto, file_level_service_descriptors_userbehavior_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_userbehavior_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_userbehavior_2eproto)), true);
namespace userbehavior {

// ===================================================================

void UserBehavior::InitAsDefaultInstance() {
}
class UserBehavior::_Internal {
 public:
  using HasBits = decltype(std::declval<UserBehavior>()._has_bits_);
  static void set_has_searchtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UserBehavior::UserBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:userbehavior.UserBehavior)
}
UserBehavior::UserBehavior(const UserBehavior& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_query()) {
    query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_query(),
      GetArena());
  }
  ::memcpy(&searchtime_, &from.searchtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&platform_) -
    reinterpret_cast<char*>(&searchtime_)) + sizeof(platform_));
  // @@protoc_insertion_point(copy_constructor:userbehavior.UserBehavior)
}

void UserBehavior::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserBehavior_userbehavior_2eproto.base);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&searchtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&platform_) -
      reinterpret_cast<char*>(&searchtime_)) + sizeof(platform_));
}

UserBehavior::~UserBehavior() {
  // @@protoc_insertion_point(destructor:userbehavior.UserBehavior)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserBehavior::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserBehavior::ArenaDtor(void* object) {
  UserBehavior* _this = reinterpret_cast< UserBehavior* >(object);
  (void)_this;
}
void UserBehavior::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserBehavior::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserBehavior& UserBehavior::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserBehavior_userbehavior_2eproto.base);
  return *internal_default_instance();
}


void UserBehavior::Clear() {
// @@protoc_insertion_point(message_clear_start:userbehavior.UserBehavior)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    query_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&searchtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&platform_) -
        reinterpret_cast<char*>(&searchtime_)) + sizeof(platform_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserBehavior::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 searchtime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_searchtime(&has_bits);
          searchtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userbehavior.UserBehavior.query");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 platform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_platform(&has_bits);
          platform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserBehavior::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userbehavior.UserBehavior)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 searchtime = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_searchtime(), target);
  }

  // optional string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "userbehavior.UserBehavior.query");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_query(), target);
  }

  // optional uint32 platform = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_platform(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userbehavior.UserBehavior)
  return target;
}

size_t UserBehavior::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userbehavior.UserBehavior)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string query = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_query());
    }

    // optional uint64 searchtime = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_searchtime());
    }

    // optional uint32 platform = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_platform());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserBehavior::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userbehavior.UserBehavior)
  GOOGLE_DCHECK_NE(&from, this);
  const UserBehavior* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserBehavior>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userbehavior.UserBehavior)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userbehavior.UserBehavior)
    MergeFrom(*source);
  }
}

void UserBehavior::MergeFrom(const UserBehavior& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userbehavior.UserBehavior)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_query(from._internal_query());
    }
    if (cached_has_bits & 0x00000002u) {
      searchtime_ = from.searchtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      platform_ = from.platform_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserBehavior::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userbehavior.UserBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBehavior::CopyFrom(const UserBehavior& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userbehavior.UserBehavior)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBehavior::IsInitialized() const {
  return true;
}

void UserBehavior::InternalSwap(UserBehavior* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  query_.Swap(&other->query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserBehavior, platform_)
      + sizeof(UserBehavior::platform_)
      - PROTOBUF_FIELD_OFFSET(UserBehavior, searchtime_)>(
          reinterpret_cast<char*>(&searchtime_),
          reinterpret_cast<char*>(&other->searchtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserBehavior::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserOaidFeature::InitAsDefaultInstance() {
}
class UserOaidFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<UserOaidFeature>()._has_bits_);
  static void set_has_oaid_fea(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UserOaidFeature::UserOaidFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:userbehavior.UserOaidFeature)
}
UserOaidFeature::UserOaidFeature(const UserOaidFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oaid_fea_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_oaid_fea()) {
    oaid_fea_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_oaid_fea(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:userbehavior.UserOaidFeature)
}

void UserOaidFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserOaidFeature_userbehavior_2eproto.base);
  oaid_fea_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserOaidFeature::~UserOaidFeature() {
  // @@protoc_insertion_point(destructor:userbehavior.UserOaidFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserOaidFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  oaid_fea_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserOaidFeature::ArenaDtor(void* object) {
  UserOaidFeature* _this = reinterpret_cast< UserOaidFeature* >(object);
  (void)_this;
}
void UserOaidFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserOaidFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserOaidFeature& UserOaidFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserOaidFeature_userbehavior_2eproto.base);
  return *internal_default_instance();
}


void UserOaidFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:userbehavior.UserOaidFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    oaid_fea_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserOaidFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string oaid_fea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_oaid_fea();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "userbehavior.UserOaidFeature.oaid_fea");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserOaidFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userbehavior.UserOaidFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string oaid_fea = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_oaid_fea().data(), static_cast<int>(this->_internal_oaid_fea().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "userbehavior.UserOaidFeature.oaid_fea");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_oaid_fea(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userbehavior.UserOaidFeature)
  return target;
}

size_t UserOaidFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userbehavior.UserOaidFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string oaid_fea = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oaid_fea());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserOaidFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:userbehavior.UserOaidFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const UserOaidFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserOaidFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:userbehavior.UserOaidFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:userbehavior.UserOaidFeature)
    MergeFrom(*source);
  }
}

void UserOaidFeature::MergeFrom(const UserOaidFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userbehavior.UserOaidFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_oaid_fea()) {
    _internal_set_oaid_fea(from._internal_oaid_fea());
  }
}

void UserOaidFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:userbehavior.UserOaidFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOaidFeature::CopyFrom(const UserOaidFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userbehavior.UserOaidFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOaidFeature::IsInitialized() const {
  return true;
}

void UserOaidFeature::InternalSwap(UserOaidFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  oaid_fea_.Swap(&other->oaid_fea_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserOaidFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userbehavior
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::userbehavior::UserBehavior* Arena::CreateMaybeMessage< ::userbehavior::UserBehavior >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userbehavior::UserBehavior >(arena);
}
template<> PROTOBUF_NOINLINE ::userbehavior::UserOaidFeature* Arena::CreateMaybeMessage< ::userbehavior::UserOaidFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userbehavior::UserOaidFeature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
