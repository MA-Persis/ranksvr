// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consistent_feature.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_consistent_5ffeature_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_consistent_5ffeature_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_consistent_5ffeature_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_consistent_5ffeature_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_consistent_5ffeature_2eproto;
namespace consfea {
class AdQueryTerm;
class AdQueryTermDefaultTypeInternal;
extern AdQueryTermDefaultTypeInternal _AdQueryTerm_default_instance_;
class AsQueryTerm;
class AsQueryTermDefaultTypeInternal;
extern AsQueryTermDefaultTypeInternal _AsQueryTerm_default_instance_;
class ConsFeaAd;
class ConsFeaAdDefaultTypeInternal;
extern ConsFeaAdDefaultTypeInternal _ConsFeaAd_default_instance_;
class ConsFeaFull;
class ConsFeaFullDefaultTypeInternal;
extern ConsFeaFullDefaultTypeInternal _ConsFeaFull_default_instance_;
class ConsFeaQuery;
class ConsFeaQueryDefaultTypeInternal;
extern ConsFeaQueryDefaultTypeInternal _ConsFeaQuery_default_instance_;
class CurAdClickedAd;
class CurAdClickedAdDefaultTypeInternal;
extern CurAdClickedAdDefaultTypeInternal _CurAdClickedAd_default_instance_;
class CurAdComponentHistoryAd;
class CurAdComponentHistoryAdDefaultTypeInternal;
extern CurAdComponentHistoryAdDefaultTypeInternal _CurAdComponentHistoryAd_default_instance_;
class CurAdHistoryAd;
class CurAdHistoryAdDefaultTypeInternal;
extern CurAdHistoryAdDefaultTypeInternal _CurAdHistoryAd_default_instance_;
class CurAdStyleHistoryAd;
class CurAdStyleHistoryAdDefaultTypeInternal;
extern CurAdStyleHistoryAdDefaultTypeInternal _CurAdStyleHistoryAd_default_instance_;
class HisQueryTerm;
class HisQueryTermDefaultTypeInternal;
extern HisQueryTermDefaultTypeInternal _HisQueryTerm_default_instance_;
class HisQueryTermAd;
class HisQueryTermAdDefaultTypeInternal;
extern HisQueryTermAdDefaultTypeInternal _HisQueryTermAd_default_instance_;
class LastClickQueryTermMatchTitleNumAd;
class LastClickQueryTermMatchTitleNumAdDefaultTypeInternal;
extern LastClickQueryTermMatchTitleNumAdDefaultTypeInternal _LastClickQueryTermMatchTitleNumAd_default_instance_;
class Pre1Bidword;
class Pre1BidwordDefaultTypeInternal;
extern Pre1BidwordDefaultTypeInternal _Pre1Bidword_default_instance_;
class Pre1BidwordAd;
class Pre1BidwordAdDefaultTypeInternal;
extern Pre1BidwordAdDefaultTypeInternal _Pre1BidwordAd_default_instance_;
class PreAndCurQuery;
class PreAndCurQueryDefaultTypeInternal;
extern PreAndCurQueryDefaultTypeInternal _PreAndCurQuery_default_instance_;
class TopClickQueryTerm;
class TopClickQueryTermDefaultTypeInternal;
extern TopClickQueryTermDefaultTypeInternal _TopClickQueryTerm_default_instance_;
class TopClickQueryTermAd;
class TopClickQueryTermAdDefaultTypeInternal;
extern TopClickQueryTermAdDefaultTypeInternal _TopClickQueryTermAd_default_instance_;
}  // namespace consfea
PROTOBUF_NAMESPACE_OPEN
template<> ::consfea::AdQueryTerm* Arena::CreateMaybeMessage<::consfea::AdQueryTerm>(Arena*);
template<> ::consfea::AsQueryTerm* Arena::CreateMaybeMessage<::consfea::AsQueryTerm>(Arena*);
template<> ::consfea::ConsFeaAd* Arena::CreateMaybeMessage<::consfea::ConsFeaAd>(Arena*);
template<> ::consfea::ConsFeaFull* Arena::CreateMaybeMessage<::consfea::ConsFeaFull>(Arena*);
template<> ::consfea::ConsFeaQuery* Arena::CreateMaybeMessage<::consfea::ConsFeaQuery>(Arena*);
template<> ::consfea::CurAdClickedAd* Arena::CreateMaybeMessage<::consfea::CurAdClickedAd>(Arena*);
template<> ::consfea::CurAdComponentHistoryAd* Arena::CreateMaybeMessage<::consfea::CurAdComponentHistoryAd>(Arena*);
template<> ::consfea::CurAdHistoryAd* Arena::CreateMaybeMessage<::consfea::CurAdHistoryAd>(Arena*);
template<> ::consfea::CurAdStyleHistoryAd* Arena::CreateMaybeMessage<::consfea::CurAdStyleHistoryAd>(Arena*);
template<> ::consfea::HisQueryTerm* Arena::CreateMaybeMessage<::consfea::HisQueryTerm>(Arena*);
template<> ::consfea::HisQueryTermAd* Arena::CreateMaybeMessage<::consfea::HisQueryTermAd>(Arena*);
template<> ::consfea::LastClickQueryTermMatchTitleNumAd* Arena::CreateMaybeMessage<::consfea::LastClickQueryTermMatchTitleNumAd>(Arena*);
template<> ::consfea::Pre1Bidword* Arena::CreateMaybeMessage<::consfea::Pre1Bidword>(Arena*);
template<> ::consfea::Pre1BidwordAd* Arena::CreateMaybeMessage<::consfea::Pre1BidwordAd>(Arena*);
template<> ::consfea::PreAndCurQuery* Arena::CreateMaybeMessage<::consfea::PreAndCurQuery>(Arena*);
template<> ::consfea::TopClickQueryTerm* Arena::CreateMaybeMessage<::consfea::TopClickQueryTerm>(Arena*);
template<> ::consfea::TopClickQueryTermAd* Arena::CreateMaybeMessage<::consfea::TopClickQueryTermAd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace consfea {

// ===================================================================

class PreAndCurQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.PreAndCurQuery) */ {
 public:
  inline PreAndCurQuery() : PreAndCurQuery(nullptr) {};
  virtual ~PreAndCurQuery();

  PreAndCurQuery(const PreAndCurQuery& from);
  PreAndCurQuery(PreAndCurQuery&& from) noexcept
    : PreAndCurQuery() {
    *this = ::std::move(from);
  }

  inline PreAndCurQuery& operator=(const PreAndCurQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreAndCurQuery& operator=(PreAndCurQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreAndCurQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreAndCurQuery* internal_default_instance() {
    return reinterpret_cast<const PreAndCurQuery*>(
               &_PreAndCurQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PreAndCurQuery& a, PreAndCurQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(PreAndCurQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreAndCurQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreAndCurQuery* New() const final {
    return CreateMaybeMessage<PreAndCurQuery>(nullptr);
  }

  PreAndCurQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreAndCurQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreAndCurQuery& from);
  void MergeFrom(const PreAndCurQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreAndCurQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.PreAndCurQuery";
  }
  protected:
  explicit PreAndCurQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPre1QueryFieldNumber = 1,
    kQueryTextFieldNumber = 2,
  };
  // optional string pre1_query = 1;
  bool has_pre1_query() const;
  private:
  bool _internal_has_pre1_query() const;
  public:
  void clear_pre1_query();
  const std::string& pre1_query() const;
  void set_pre1_query(const std::string& value);
  void set_pre1_query(std::string&& value);
  void set_pre1_query(const char* value);
  void set_pre1_query(const char* value, size_t size);
  std::string* mutable_pre1_query();
  std::string* release_pre1_query();
  void set_allocated_pre1_query(std::string* pre1_query);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pre1_query();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pre1_query(
      std::string* pre1_query);
  private:
  const std::string& _internal_pre1_query() const;
  void _internal_set_pre1_query(const std::string& value);
  std::string* _internal_mutable_pre1_query();
  public:

  // optional string query_text = 2;
  bool has_query_text() const;
  private:
  bool _internal_has_query_text() const;
  public:
  void clear_query_text();
  const std::string& query_text() const;
  void set_query_text(const std::string& value);
  void set_query_text(std::string&& value);
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  std::string* mutable_query_text();
  std::string* release_query_text();
  void set_allocated_query_text(std::string* query_text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_query_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_query_text(
      std::string* query_text);
  private:
  const std::string& _internal_query_text() const;
  void _internal_set_query_text(const std::string& value);
  std::string* _internal_mutable_query_text();
  public:

  // @@protoc_insertion_point(class_scope:consfea.PreAndCurQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre1_query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_text_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class AdQueryTerm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.AdQueryTerm) */ {
 public:
  inline AdQueryTerm() : AdQueryTerm(nullptr) {};
  virtual ~AdQueryTerm();

  AdQueryTerm(const AdQueryTerm& from);
  AdQueryTerm(AdQueryTerm&& from) noexcept
    : AdQueryTerm() {
    *this = ::std::move(from);
  }

  inline AdQueryTerm& operator=(const AdQueryTerm& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdQueryTerm& operator=(AdQueryTerm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdQueryTerm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdQueryTerm* internal_default_instance() {
    return reinterpret_cast<const AdQueryTerm*>(
               &_AdQueryTerm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AdQueryTerm& a, AdQueryTerm& b) {
    a.Swap(&b);
  }
  inline void Swap(AdQueryTerm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdQueryTerm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdQueryTerm* New() const final {
    return CreateMaybeMessage<AdQueryTerm>(nullptr);
  }

  AdQueryTerm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdQueryTerm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdQueryTerm& from);
  void MergeFrom(const AdQueryTerm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdQueryTerm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.AdQueryTerm";
  }
  protected:
  explicit AdQueryTerm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdQueryTermNumFieldNumber = 1,
    kAdQueryTermMatchQueryNumFieldNumber = 2,
  };
  // optional uint32 ad_query_term_num = 1;
  bool has_ad_query_term_num() const;
  private:
  bool _internal_has_ad_query_term_num() const;
  public:
  void clear_ad_query_term_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 ad_query_term_num() const;
  void set_ad_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ad_query_term_num() const;
  void _internal_set_ad_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ad_query_term_match_query_num = 2;
  bool has_ad_query_term_match_query_num() const;
  private:
  bool _internal_has_ad_query_term_match_query_num() const;
  public:
  void clear_ad_query_term_match_query_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 ad_query_term_match_query_num() const;
  void set_ad_query_term_match_query_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ad_query_term_match_query_num() const;
  void _internal_set_ad_query_term_match_query_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:consfea.AdQueryTerm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ad_query_term_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ad_query_term_match_query_num_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class AsQueryTerm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.AsQueryTerm) */ {
 public:
  inline AsQueryTerm() : AsQueryTerm(nullptr) {};
  virtual ~AsQueryTerm();

  AsQueryTerm(const AsQueryTerm& from);
  AsQueryTerm(AsQueryTerm&& from) noexcept
    : AsQueryTerm() {
    *this = ::std::move(from);
  }

  inline AsQueryTerm& operator=(const AsQueryTerm& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsQueryTerm& operator=(AsQueryTerm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsQueryTerm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsQueryTerm* internal_default_instance() {
    return reinterpret_cast<const AsQueryTerm*>(
               &_AsQueryTerm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AsQueryTerm& a, AsQueryTerm& b) {
    a.Swap(&b);
  }
  inline void Swap(AsQueryTerm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AsQueryTerm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsQueryTerm* New() const final {
    return CreateMaybeMessage<AsQueryTerm>(nullptr);
  }

  AsQueryTerm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsQueryTerm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsQueryTerm& from);
  void MergeFrom(const AsQueryTerm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsQueryTerm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.AsQueryTerm";
  }
  protected:
  explicit AsQueryTerm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsQueryTermNumFieldNumber = 1,
    kAsQueryTermMatchQueryNumFieldNumber = 2,
  };
  // optional uint32 as_query_term_num = 1;
  bool has_as_query_term_num() const;
  private:
  bool _internal_has_as_query_term_num() const;
  public:
  void clear_as_query_term_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 as_query_term_num() const;
  void set_as_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as_query_term_num() const;
  void _internal_set_as_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 as_query_term_match_query_num = 2;
  bool has_as_query_term_match_query_num() const;
  private:
  bool _internal_has_as_query_term_match_query_num() const;
  public:
  void clear_as_query_term_match_query_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 as_query_term_match_query_num() const;
  void set_as_query_term_match_query_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as_query_term_match_query_num() const;
  void _internal_set_as_query_term_match_query_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:consfea.AsQueryTerm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 as_query_term_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 as_query_term_match_query_num_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class TopClickQueryTerm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.TopClickQueryTerm) */ {
 public:
  inline TopClickQueryTerm() : TopClickQueryTerm(nullptr) {};
  virtual ~TopClickQueryTerm();

  TopClickQueryTerm(const TopClickQueryTerm& from);
  TopClickQueryTerm(TopClickQueryTerm&& from) noexcept
    : TopClickQueryTerm() {
    *this = ::std::move(from);
  }

  inline TopClickQueryTerm& operator=(const TopClickQueryTerm& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopClickQueryTerm& operator=(TopClickQueryTerm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopClickQueryTerm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopClickQueryTerm* internal_default_instance() {
    return reinterpret_cast<const TopClickQueryTerm*>(
               &_TopClickQueryTerm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TopClickQueryTerm& a, TopClickQueryTerm& b) {
    a.Swap(&b);
  }
  inline void Swap(TopClickQueryTerm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopClickQueryTerm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopClickQueryTerm* New() const final {
    return CreateMaybeMessage<TopClickQueryTerm>(nullptr);
  }

  TopClickQueryTerm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopClickQueryTerm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopClickQueryTerm& from);
  void MergeFrom(const TopClickQueryTerm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopClickQueryTerm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.TopClickQueryTerm";
  }
  protected:
  explicit TopClickQueryTerm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopClickQueryTermNumFieldNumber = 1,
    kTopClickQueryTermMatchBidwordNumFieldNumber = 2,
  };
  // optional uint32 top_click_query_term_num = 1;
  bool has_top_click_query_term_num() const;
  private:
  bool _internal_has_top_click_query_term_num() const;
  public:
  void clear_top_click_query_term_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 top_click_query_term_num() const;
  void set_top_click_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top_click_query_term_num() const;
  void _internal_set_top_click_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 top_click_query_term_match_bidword_num = 2;
  bool has_top_click_query_term_match_bidword_num() const;
  private:
  bool _internal_has_top_click_query_term_match_bidword_num() const;
  public:
  void clear_top_click_query_term_match_bidword_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 top_click_query_term_match_bidword_num() const;
  void set_top_click_query_term_match_bidword_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top_click_query_term_match_bidword_num() const;
  void _internal_set_top_click_query_term_match_bidword_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:consfea.TopClickQueryTerm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_click_query_term_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_click_query_term_match_bidword_num_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class HisQueryTerm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.HisQueryTerm) */ {
 public:
  inline HisQueryTerm() : HisQueryTerm(nullptr) {};
  virtual ~HisQueryTerm();

  HisQueryTerm(const HisQueryTerm& from);
  HisQueryTerm(HisQueryTerm&& from) noexcept
    : HisQueryTerm() {
    *this = ::std::move(from);
  }

  inline HisQueryTerm& operator=(const HisQueryTerm& from) {
    CopyFrom(from);
    return *this;
  }
  inline HisQueryTerm& operator=(HisQueryTerm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HisQueryTerm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HisQueryTerm* internal_default_instance() {
    return reinterpret_cast<const HisQueryTerm*>(
               &_HisQueryTerm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HisQueryTerm& a, HisQueryTerm& b) {
    a.Swap(&b);
  }
  inline void Swap(HisQueryTerm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HisQueryTerm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HisQueryTerm* New() const final {
    return CreateMaybeMessage<HisQueryTerm>(nullptr);
  }

  HisQueryTerm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HisQueryTerm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HisQueryTerm& from);
  void MergeFrom(const HisQueryTerm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HisQueryTerm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.HisQueryTerm";
  }
  protected:
  explicit HisQueryTerm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHisQueryTermNumFieldNumber = 1,
    kHisQueryTermMatchBidwordNumFieldNumber = 2,
  };
  // optional uint32 his_query_term_num = 1;
  bool has_his_query_term_num() const;
  private:
  bool _internal_has_his_query_term_num() const;
  public:
  void clear_his_query_term_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 his_query_term_num() const;
  void set_his_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_his_query_term_num() const;
  void _internal_set_his_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 his_query_term_match_bidword_num = 2;
  bool has_his_query_term_match_bidword_num() const;
  private:
  bool _internal_has_his_query_term_match_bidword_num() const;
  public:
  void clear_his_query_term_match_bidword_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 his_query_term_match_bidword_num() const;
  void set_his_query_term_match_bidword_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_his_query_term_match_bidword_num() const;
  void _internal_set_his_query_term_match_bidword_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:consfea.HisQueryTerm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 his_query_term_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 his_query_term_match_bidword_num_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class Pre1Bidword PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.Pre1Bidword) */ {
 public:
  inline Pre1Bidword() : Pre1Bidword(nullptr) {};
  virtual ~Pre1Bidword();

  Pre1Bidword(const Pre1Bidword& from);
  Pre1Bidword(Pre1Bidword&& from) noexcept
    : Pre1Bidword() {
    *this = ::std::move(from);
  }

  inline Pre1Bidword& operator=(const Pre1Bidword& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pre1Bidword& operator=(Pre1Bidword&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pre1Bidword& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pre1Bidword* internal_default_instance() {
    return reinterpret_cast<const Pre1Bidword*>(
               &_Pre1Bidword_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Pre1Bidword& a, Pre1Bidword& b) {
    a.Swap(&b);
  }
  inline void Swap(Pre1Bidword* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pre1Bidword* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pre1Bidword* New() const final {
    return CreateMaybeMessage<Pre1Bidword>(nullptr);
  }

  Pre1Bidword* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pre1Bidword>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pre1Bidword& from);
  void MergeFrom(const Pre1Bidword& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pre1Bidword* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.Pre1Bidword";
  }
  protected:
  explicit Pre1Bidword(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPre1BidwordHasClkFieldNumber = 1,
    kBidwordTextFieldNumber = 2,
  };
  // optional string pre1_bidword_has_clk = 1;
  bool has_pre1_bidword_has_clk() const;
  private:
  bool _internal_has_pre1_bidword_has_clk() const;
  public:
  void clear_pre1_bidword_has_clk();
  const std::string& pre1_bidword_has_clk() const;
  void set_pre1_bidword_has_clk(const std::string& value);
  void set_pre1_bidword_has_clk(std::string&& value);
  void set_pre1_bidword_has_clk(const char* value);
  void set_pre1_bidword_has_clk(const char* value, size_t size);
  std::string* mutable_pre1_bidword_has_clk();
  std::string* release_pre1_bidword_has_clk();
  void set_allocated_pre1_bidword_has_clk(std::string* pre1_bidword_has_clk);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pre1_bidword_has_clk();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pre1_bidword_has_clk(
      std::string* pre1_bidword_has_clk);
  private:
  const std::string& _internal_pre1_bidword_has_clk() const;
  void _internal_set_pre1_bidword_has_clk(const std::string& value);
  std::string* _internal_mutable_pre1_bidword_has_clk();
  public:

  // optional string bidword_text = 2;
  bool has_bidword_text() const;
  private:
  bool _internal_has_bidword_text() const;
  public:
  void clear_bidword_text();
  const std::string& bidword_text() const;
  void set_bidword_text(const std::string& value);
  void set_bidword_text(std::string&& value);
  void set_bidword_text(const char* value);
  void set_bidword_text(const char* value, size_t size);
  std::string* mutable_bidword_text();
  std::string* release_bidword_text();
  void set_allocated_bidword_text(std::string* bidword_text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bidword_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bidword_text(
      std::string* bidword_text);
  private:
  const std::string& _internal_bidword_text() const;
  void _internal_set_bidword_text(const std::string& value);
  std::string* _internal_mutable_bidword_text();
  public:

  // @@protoc_insertion_point(class_scope:consfea.Pre1Bidword)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre1_bidword_has_clk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bidword_text_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class HisQueryTermAd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.HisQueryTermAd) */ {
 public:
  inline HisQueryTermAd() : HisQueryTermAd(nullptr) {};
  virtual ~HisQueryTermAd();

  HisQueryTermAd(const HisQueryTermAd& from);
  HisQueryTermAd(HisQueryTermAd&& from) noexcept
    : HisQueryTermAd() {
    *this = ::std::move(from);
  }

  inline HisQueryTermAd& operator=(const HisQueryTermAd& from) {
    CopyFrom(from);
    return *this;
  }
  inline HisQueryTermAd& operator=(HisQueryTermAd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HisQueryTermAd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HisQueryTermAd* internal_default_instance() {
    return reinterpret_cast<const HisQueryTermAd*>(
               &_HisQueryTermAd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HisQueryTermAd& a, HisQueryTermAd& b) {
    a.Swap(&b);
  }
  inline void Swap(HisQueryTermAd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HisQueryTermAd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HisQueryTermAd* New() const final {
    return CreateMaybeMessage<HisQueryTermAd>(nullptr);
  }

  HisQueryTermAd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HisQueryTermAd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HisQueryTermAd& from);
  void MergeFrom(const HisQueryTermAd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HisQueryTermAd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.HisQueryTermAd";
  }
  protected:
  explicit HisQueryTermAd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kHisQueryTermNumValueFieldNumber = 2,
    kHisQueryTermMatchBidwordNumValueFieldNumber = 3,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional uint32 his_query_term_num_value = 2;
  bool has_his_query_term_num_value() const;
  private:
  bool _internal_has_his_query_term_num_value() const;
  public:
  void clear_his_query_term_num_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 his_query_term_num_value() const;
  void set_his_query_term_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_his_query_term_num_value() const;
  void _internal_set_his_query_term_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 his_query_term_match_bidword_num_value = 3;
  bool has_his_query_term_match_bidword_num_value() const;
  private:
  bool _internal_has_his_query_term_match_bidword_num_value() const;
  public:
  void clear_his_query_term_match_bidword_num_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 his_query_term_match_bidword_num_value() const;
  void set_his_query_term_match_bidword_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_his_query_term_match_bidword_num_value() const;
  void _internal_set_his_query_term_match_bidword_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:consfea.HisQueryTermAd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 his_query_term_num_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 his_query_term_match_bidword_num_value_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class CurAdClickedAd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.CurAdClickedAd) */ {
 public:
  inline CurAdClickedAd() : CurAdClickedAd(nullptr) {};
  virtual ~CurAdClickedAd();

  CurAdClickedAd(const CurAdClickedAd& from);
  CurAdClickedAd(CurAdClickedAd&& from) noexcept
    : CurAdClickedAd() {
    *this = ::std::move(from);
  }

  inline CurAdClickedAd& operator=(const CurAdClickedAd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurAdClickedAd& operator=(CurAdClickedAd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurAdClickedAd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurAdClickedAd* internal_default_instance() {
    return reinterpret_cast<const CurAdClickedAd*>(
               &_CurAdClickedAd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CurAdClickedAd& a, CurAdClickedAd& b) {
    a.Swap(&b);
  }
  inline void Swap(CurAdClickedAd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurAdClickedAd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurAdClickedAd* New() const final {
    return CreateMaybeMessage<CurAdClickedAd>(nullptr);
  }

  CurAdClickedAd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurAdClickedAd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurAdClickedAd& from);
  void MergeFrom(const CurAdClickedAd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurAdClickedAd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.CurAdClickedAd";
  }
  protected:
  explicit CurAdClickedAd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:consfea.CurAdClickedAd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class CurAdHistoryAd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.CurAdHistoryAd) */ {
 public:
  inline CurAdHistoryAd() : CurAdHistoryAd(nullptr) {};
  virtual ~CurAdHistoryAd();

  CurAdHistoryAd(const CurAdHistoryAd& from);
  CurAdHistoryAd(CurAdHistoryAd&& from) noexcept
    : CurAdHistoryAd() {
    *this = ::std::move(from);
  }

  inline CurAdHistoryAd& operator=(const CurAdHistoryAd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurAdHistoryAd& operator=(CurAdHistoryAd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurAdHistoryAd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurAdHistoryAd* internal_default_instance() {
    return reinterpret_cast<const CurAdHistoryAd*>(
               &_CurAdHistoryAd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CurAdHistoryAd& a, CurAdHistoryAd& b) {
    a.Swap(&b);
  }
  inline void Swap(CurAdHistoryAd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurAdHistoryAd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurAdHistoryAd* New() const final {
    return CreateMaybeMessage<CurAdHistoryAd>(nullptr);
  }

  CurAdHistoryAd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurAdHistoryAd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurAdHistoryAd& from);
  void MergeFrom(const CurAdHistoryAd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurAdHistoryAd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.CurAdHistoryAd";
  }
  protected:
  explicit CurAdHistoryAd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:consfea.CurAdHistoryAd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class LastClickQueryTermMatchTitleNumAd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.LastClickQueryTermMatchTitleNumAd) */ {
 public:
  inline LastClickQueryTermMatchTitleNumAd() : LastClickQueryTermMatchTitleNumAd(nullptr) {};
  virtual ~LastClickQueryTermMatchTitleNumAd();

  LastClickQueryTermMatchTitleNumAd(const LastClickQueryTermMatchTitleNumAd& from);
  LastClickQueryTermMatchTitleNumAd(LastClickQueryTermMatchTitleNumAd&& from) noexcept
    : LastClickQueryTermMatchTitleNumAd() {
    *this = ::std::move(from);
  }

  inline LastClickQueryTermMatchTitleNumAd& operator=(const LastClickQueryTermMatchTitleNumAd& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastClickQueryTermMatchTitleNumAd& operator=(LastClickQueryTermMatchTitleNumAd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LastClickQueryTermMatchTitleNumAd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LastClickQueryTermMatchTitleNumAd* internal_default_instance() {
    return reinterpret_cast<const LastClickQueryTermMatchTitleNumAd*>(
               &_LastClickQueryTermMatchTitleNumAd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LastClickQueryTermMatchTitleNumAd& a, LastClickQueryTermMatchTitleNumAd& b) {
    a.Swap(&b);
  }
  inline void Swap(LastClickQueryTermMatchTitleNumAd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastClickQueryTermMatchTitleNumAd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LastClickQueryTermMatchTitleNumAd* New() const final {
    return CreateMaybeMessage<LastClickQueryTermMatchTitleNumAd>(nullptr);
  }

  LastClickQueryTermMatchTitleNumAd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LastClickQueryTermMatchTitleNumAd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LastClickQueryTermMatchTitleNumAd& from);
  void MergeFrom(const LastClickQueryTermMatchTitleNumAd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastClickQueryTermMatchTitleNumAd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.LastClickQueryTermMatchTitleNumAd";
  }
  protected:
  explicit LastClickQueryTermMatchTitleNumAd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional uint32 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:consfea.LastClickQueryTermMatchTitleNumAd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class Pre1BidwordAd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.Pre1BidwordAd) */ {
 public:
  inline Pre1BidwordAd() : Pre1BidwordAd(nullptr) {};
  virtual ~Pre1BidwordAd();

  Pre1BidwordAd(const Pre1BidwordAd& from);
  Pre1BidwordAd(Pre1BidwordAd&& from) noexcept
    : Pre1BidwordAd() {
    *this = ::std::move(from);
  }

  inline Pre1BidwordAd& operator=(const Pre1BidwordAd& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pre1BidwordAd& operator=(Pre1BidwordAd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pre1BidwordAd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pre1BidwordAd* internal_default_instance() {
    return reinterpret_cast<const Pre1BidwordAd*>(
               &_Pre1BidwordAd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Pre1BidwordAd& a, Pre1BidwordAd& b) {
    a.Swap(&b);
  }
  inline void Swap(Pre1BidwordAd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pre1BidwordAd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pre1BidwordAd* New() const final {
    return CreateMaybeMessage<Pre1BidwordAd>(nullptr);
  }

  Pre1BidwordAd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pre1BidwordAd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pre1BidwordAd& from);
  void MergeFrom(const Pre1BidwordAd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pre1BidwordAd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.Pre1BidwordAd";
  }
  protected:
  explicit Pre1BidwordAd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kPre1BidwordHasClkValueFieldNumber = 2,
    kBidwordTextValueFieldNumber = 3,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string pre1_bidword_has_clk_value = 2;
  bool has_pre1_bidword_has_clk_value() const;
  private:
  bool _internal_has_pre1_bidword_has_clk_value() const;
  public:
  void clear_pre1_bidword_has_clk_value();
  const std::string& pre1_bidword_has_clk_value() const;
  void set_pre1_bidword_has_clk_value(const std::string& value);
  void set_pre1_bidword_has_clk_value(std::string&& value);
  void set_pre1_bidword_has_clk_value(const char* value);
  void set_pre1_bidword_has_clk_value(const char* value, size_t size);
  std::string* mutable_pre1_bidword_has_clk_value();
  std::string* release_pre1_bidword_has_clk_value();
  void set_allocated_pre1_bidword_has_clk_value(std::string* pre1_bidword_has_clk_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pre1_bidword_has_clk_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pre1_bidword_has_clk_value(
      std::string* pre1_bidword_has_clk_value);
  private:
  const std::string& _internal_pre1_bidword_has_clk_value() const;
  void _internal_set_pre1_bidword_has_clk_value(const std::string& value);
  std::string* _internal_mutable_pre1_bidword_has_clk_value();
  public:

  // optional string bidword_text_value = 3;
  bool has_bidword_text_value() const;
  private:
  bool _internal_has_bidword_text_value() const;
  public:
  void clear_bidword_text_value();
  const std::string& bidword_text_value() const;
  void set_bidword_text_value(const std::string& value);
  void set_bidword_text_value(std::string&& value);
  void set_bidword_text_value(const char* value);
  void set_bidword_text_value(const char* value, size_t size);
  std::string* mutable_bidword_text_value();
  std::string* release_bidword_text_value();
  void set_allocated_bidword_text_value(std::string* bidword_text_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bidword_text_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bidword_text_value(
      std::string* bidword_text_value);
  private:
  const std::string& _internal_bidword_text_value() const;
  void _internal_set_bidword_text_value(const std::string& value);
  std::string* _internal_mutable_bidword_text_value();
  public:

  // @@protoc_insertion_point(class_scope:consfea.Pre1BidwordAd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre1_bidword_has_clk_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bidword_text_value_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class TopClickQueryTermAd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.TopClickQueryTermAd) */ {
 public:
  inline TopClickQueryTermAd() : TopClickQueryTermAd(nullptr) {};
  virtual ~TopClickQueryTermAd();

  TopClickQueryTermAd(const TopClickQueryTermAd& from);
  TopClickQueryTermAd(TopClickQueryTermAd&& from) noexcept
    : TopClickQueryTermAd() {
    *this = ::std::move(from);
  }

  inline TopClickQueryTermAd& operator=(const TopClickQueryTermAd& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopClickQueryTermAd& operator=(TopClickQueryTermAd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopClickQueryTermAd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopClickQueryTermAd* internal_default_instance() {
    return reinterpret_cast<const TopClickQueryTermAd*>(
               &_TopClickQueryTermAd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TopClickQueryTermAd& a, TopClickQueryTermAd& b) {
    a.Swap(&b);
  }
  inline void Swap(TopClickQueryTermAd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopClickQueryTermAd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopClickQueryTermAd* New() const final {
    return CreateMaybeMessage<TopClickQueryTermAd>(nullptr);
  }

  TopClickQueryTermAd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopClickQueryTermAd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopClickQueryTermAd& from);
  void MergeFrom(const TopClickQueryTermAd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopClickQueryTermAd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.TopClickQueryTermAd";
  }
  protected:
  explicit TopClickQueryTermAd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kTopClickQueryTermNumValueFieldNumber = 2,
    kTopClickQueryTermMatchBidwordNumValueFieldNumber = 3,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional uint32 top_click_query_term_num_value = 2;
  bool has_top_click_query_term_num_value() const;
  private:
  bool _internal_has_top_click_query_term_num_value() const;
  public:
  void clear_top_click_query_term_num_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 top_click_query_term_num_value() const;
  void set_top_click_query_term_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top_click_query_term_num_value() const;
  void _internal_set_top_click_query_term_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 top_click_query_term_match_bidword_num_value = 3;
  bool has_top_click_query_term_match_bidword_num_value() const;
  private:
  bool _internal_has_top_click_query_term_match_bidword_num_value() const;
  public:
  void clear_top_click_query_term_match_bidword_num_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 top_click_query_term_match_bidword_num_value() const;
  void set_top_click_query_term_match_bidword_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top_click_query_term_match_bidword_num_value() const;
  void _internal_set_top_click_query_term_match_bidword_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:consfea.TopClickQueryTermAd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_click_query_term_num_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_click_query_term_match_bidword_num_value_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class CurAdStyleHistoryAd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.CurAdStyleHistoryAd) */ {
 public:
  inline CurAdStyleHistoryAd() : CurAdStyleHistoryAd(nullptr) {};
  virtual ~CurAdStyleHistoryAd();

  CurAdStyleHistoryAd(const CurAdStyleHistoryAd& from);
  CurAdStyleHistoryAd(CurAdStyleHistoryAd&& from) noexcept
    : CurAdStyleHistoryAd() {
    *this = ::std::move(from);
  }

  inline CurAdStyleHistoryAd& operator=(const CurAdStyleHistoryAd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurAdStyleHistoryAd& operator=(CurAdStyleHistoryAd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurAdStyleHistoryAd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurAdStyleHistoryAd* internal_default_instance() {
    return reinterpret_cast<const CurAdStyleHistoryAd*>(
               &_CurAdStyleHistoryAd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CurAdStyleHistoryAd& a, CurAdStyleHistoryAd& b) {
    a.Swap(&b);
  }
  inline void Swap(CurAdStyleHistoryAd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurAdStyleHistoryAd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurAdStyleHistoryAd* New() const final {
    return CreateMaybeMessage<CurAdStyleHistoryAd>(nullptr);
  }

  CurAdStyleHistoryAd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurAdStyleHistoryAd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurAdStyleHistoryAd& from);
  void MergeFrom(const CurAdStyleHistoryAd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurAdStyleHistoryAd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.CurAdStyleHistoryAd";
  }
  protected:
  explicit CurAdStyleHistoryAd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:consfea.CurAdStyleHistoryAd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class CurAdComponentHistoryAd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.CurAdComponentHistoryAd) */ {
 public:
  inline CurAdComponentHistoryAd() : CurAdComponentHistoryAd(nullptr) {};
  virtual ~CurAdComponentHistoryAd();

  CurAdComponentHistoryAd(const CurAdComponentHistoryAd& from);
  CurAdComponentHistoryAd(CurAdComponentHistoryAd&& from) noexcept
    : CurAdComponentHistoryAd() {
    *this = ::std::move(from);
  }

  inline CurAdComponentHistoryAd& operator=(const CurAdComponentHistoryAd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurAdComponentHistoryAd& operator=(CurAdComponentHistoryAd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurAdComponentHistoryAd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurAdComponentHistoryAd* internal_default_instance() {
    return reinterpret_cast<const CurAdComponentHistoryAd*>(
               &_CurAdComponentHistoryAd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CurAdComponentHistoryAd& a, CurAdComponentHistoryAd& b) {
    a.Swap(&b);
  }
  inline void Swap(CurAdComponentHistoryAd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurAdComponentHistoryAd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurAdComponentHistoryAd* New() const final {
    return CreateMaybeMessage<CurAdComponentHistoryAd>(nullptr);
  }

  CurAdComponentHistoryAd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurAdComponentHistoryAd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurAdComponentHistoryAd& from);
  void MergeFrom(const CurAdComponentHistoryAd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurAdComponentHistoryAd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.CurAdComponentHistoryAd";
  }
  protected:
  explicit CurAdComponentHistoryAd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:consfea.CurAdComponentHistoryAd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class ConsFeaQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.ConsFeaQuery) */ {
 public:
  inline ConsFeaQuery() : ConsFeaQuery(nullptr) {};
  virtual ~ConsFeaQuery();

  ConsFeaQuery(const ConsFeaQuery& from);
  ConsFeaQuery(ConsFeaQuery&& from) noexcept
    : ConsFeaQuery() {
    *this = ::std::move(from);
  }

  inline ConsFeaQuery& operator=(const ConsFeaQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsFeaQuery& operator=(ConsFeaQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsFeaQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsFeaQuery* internal_default_instance() {
    return reinterpret_cast<const ConsFeaQuery*>(
               &_ConsFeaQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ConsFeaQuery& a, ConsFeaQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsFeaQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsFeaQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsFeaQuery* New() const final {
    return CreateMaybeMessage<ConsFeaQuery>(nullptr);
  }

  ConsFeaQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsFeaQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsFeaQuery& from);
  void MergeFrom(const ConsFeaQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsFeaQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.ConsFeaQuery";
  }
  protected:
  explicit ConsFeaQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPre5QueryCharFieldNumber = 1,
    kAdQueryMatchQueryFieldNumber = 9,
    kAsQueryMatchQueryFieldNumber = 10,
    kHistory10QueryFieldNumber = 11,
    kCurAdHistoryFieldNumber = 14,
    kAdPosClkFieldNumber = 16,
    kLastClickQueryFieldNumber = 17,
    kClkAdStyleInfoHistoryFieldNumber = 23,
    kCurAdStyleHistoryFieldNumber = 24,
    kCurAdComponentHistoryFieldNumber = 25,
    kPre1QueryFieldNumber = 2,
    kPre1AdClkIdFieldNumber = 4,
    kPre1AdClkSpanFieldNumber = 5,
    kPre1SearchGapFieldNumber = 6,
    kCurAdClickedFieldNumber = 13,
    kAdShowClkNumFieldNumber = 15,
    kPre1AdClkGapFieldNumber = 20,
    kPreAndCurQueryFieldNumber = 3,
    kAdQueryTermFieldNumber = 7,
    kAsQueryTermFieldNumber = 8,
    kHisQueryTermFieldNumber = 12,
    kPre1BidwordFieldNumber = 21,
    kTopClickQueryTermFieldNumber = 22,
    kLastClickQueryTermMatchQueryNumFieldNumber = 18,
    kLastClickQueryTermMatchTitleNumFieldNumber = 19,
  };
  // repeated string pre5_query_char = 1;
  int pre5_query_char_size() const;
  private:
  int _internal_pre5_query_char_size() const;
  public:
  void clear_pre5_query_char();
  const std::string& pre5_query_char(int index) const;
  std::string* mutable_pre5_query_char(int index);
  void set_pre5_query_char(int index, const std::string& value);
  void set_pre5_query_char(int index, std::string&& value);
  void set_pre5_query_char(int index, const char* value);
  void set_pre5_query_char(int index, const char* value, size_t size);
  std::string* add_pre5_query_char();
  void add_pre5_query_char(const std::string& value);
  void add_pre5_query_char(std::string&& value);
  void add_pre5_query_char(const char* value);
  void add_pre5_query_char(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pre5_query_char() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pre5_query_char();
  private:
  const std::string& _internal_pre5_query_char(int index) const;
  std::string* _internal_add_pre5_query_char();
  public:

  // repeated uint32 ad_query_match_query = 9;
  int ad_query_match_query_size() const;
  private:
  int _internal_ad_query_match_query_size() const;
  public:
  void clear_ad_query_match_query();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ad_query_match_query(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ad_query_match_query() const;
  void _internal_add_ad_query_match_query(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ad_query_match_query();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ad_query_match_query(int index) const;
  void set_ad_query_match_query(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ad_query_match_query(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ad_query_match_query() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ad_query_match_query();

  // repeated uint32 as_query_match_query = 10;
  int as_query_match_query_size() const;
  private:
  int _internal_as_query_match_query_size() const;
  public:
  void clear_as_query_match_query();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as_query_match_query(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_as_query_match_query() const;
  void _internal_add_as_query_match_query(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_as_query_match_query();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 as_query_match_query(int index) const;
  void set_as_query_match_query(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_as_query_match_query(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      as_query_match_query() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_as_query_match_query();

  // repeated string history_10_query = 11;
  int history_10_query_size() const;
  private:
  int _internal_history_10_query_size() const;
  public:
  void clear_history_10_query();
  const std::string& history_10_query(int index) const;
  std::string* mutable_history_10_query(int index);
  void set_history_10_query(int index, const std::string& value);
  void set_history_10_query(int index, std::string&& value);
  void set_history_10_query(int index, const char* value);
  void set_history_10_query(int index, const char* value, size_t size);
  std::string* add_history_10_query();
  void add_history_10_query(const std::string& value);
  void add_history_10_query(std::string&& value);
  void add_history_10_query(const char* value);
  void add_history_10_query(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& history_10_query() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_history_10_query();
  private:
  const std::string& _internal_history_10_query(int index) const;
  std::string* _internal_add_history_10_query();
  public:

  // repeated string cur_ad_history = 14;
  int cur_ad_history_size() const;
  private:
  int _internal_cur_ad_history_size() const;
  public:
  void clear_cur_ad_history();
  const std::string& cur_ad_history(int index) const;
  std::string* mutable_cur_ad_history(int index);
  void set_cur_ad_history(int index, const std::string& value);
  void set_cur_ad_history(int index, std::string&& value);
  void set_cur_ad_history(int index, const char* value);
  void set_cur_ad_history(int index, const char* value, size_t size);
  std::string* add_cur_ad_history();
  void add_cur_ad_history(const std::string& value);
  void add_cur_ad_history(std::string&& value);
  void add_cur_ad_history(const char* value);
  void add_cur_ad_history(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cur_ad_history() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cur_ad_history();
  private:
  const std::string& _internal_cur_ad_history(int index) const;
  std::string* _internal_add_cur_ad_history();
  public:

  // repeated string ad_pos_clk = 16;
  int ad_pos_clk_size() const;
  private:
  int _internal_ad_pos_clk_size() const;
  public:
  void clear_ad_pos_clk();
  const std::string& ad_pos_clk(int index) const;
  std::string* mutable_ad_pos_clk(int index);
  void set_ad_pos_clk(int index, const std::string& value);
  void set_ad_pos_clk(int index, std::string&& value);
  void set_ad_pos_clk(int index, const char* value);
  void set_ad_pos_clk(int index, const char* value, size_t size);
  std::string* add_ad_pos_clk();
  void add_ad_pos_clk(const std::string& value);
  void add_ad_pos_clk(std::string&& value);
  void add_ad_pos_clk(const char* value);
  void add_ad_pos_clk(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ad_pos_clk() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ad_pos_clk();
  private:
  const std::string& _internal_ad_pos_clk(int index) const;
  std::string* _internal_add_ad_pos_clk();
  public:

  // repeated uint32 last_click_query = 17;
  int last_click_query_size() const;
  private:
  int _internal_last_click_query_size() const;
  public:
  void clear_last_click_query();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_click_query(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_last_click_query() const;
  void _internal_add_last_click_query(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_last_click_query();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 last_click_query(int index) const;
  void set_last_click_query(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_last_click_query(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      last_click_query() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_last_click_query();

  // repeated string clk_ad_style_info_history = 23;
  int clk_ad_style_info_history_size() const;
  private:
  int _internal_clk_ad_style_info_history_size() const;
  public:
  void clear_clk_ad_style_info_history();
  const std::string& clk_ad_style_info_history(int index) const;
  std::string* mutable_clk_ad_style_info_history(int index);
  void set_clk_ad_style_info_history(int index, const std::string& value);
  void set_clk_ad_style_info_history(int index, std::string&& value);
  void set_clk_ad_style_info_history(int index, const char* value);
  void set_clk_ad_style_info_history(int index, const char* value, size_t size);
  std::string* add_clk_ad_style_info_history();
  void add_clk_ad_style_info_history(const std::string& value);
  void add_clk_ad_style_info_history(std::string&& value);
  void add_clk_ad_style_info_history(const char* value);
  void add_clk_ad_style_info_history(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& clk_ad_style_info_history() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_clk_ad_style_info_history();
  private:
  const std::string& _internal_clk_ad_style_info_history(int index) const;
  std::string* _internal_add_clk_ad_style_info_history();
  public:

  // repeated string cur_ad_style_history = 24;
  int cur_ad_style_history_size() const;
  private:
  int _internal_cur_ad_style_history_size() const;
  public:
  void clear_cur_ad_style_history();
  const std::string& cur_ad_style_history(int index) const;
  std::string* mutable_cur_ad_style_history(int index);
  void set_cur_ad_style_history(int index, const std::string& value);
  void set_cur_ad_style_history(int index, std::string&& value);
  void set_cur_ad_style_history(int index, const char* value);
  void set_cur_ad_style_history(int index, const char* value, size_t size);
  std::string* add_cur_ad_style_history();
  void add_cur_ad_style_history(const std::string& value);
  void add_cur_ad_style_history(std::string&& value);
  void add_cur_ad_style_history(const char* value);
  void add_cur_ad_style_history(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cur_ad_style_history() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cur_ad_style_history();
  private:
  const std::string& _internal_cur_ad_style_history(int index) const;
  std::string* _internal_add_cur_ad_style_history();
  public:

  // repeated string cur_ad_component_history = 25;
  int cur_ad_component_history_size() const;
  private:
  int _internal_cur_ad_component_history_size() const;
  public:
  void clear_cur_ad_component_history();
  const std::string& cur_ad_component_history(int index) const;
  std::string* mutable_cur_ad_component_history(int index);
  void set_cur_ad_component_history(int index, const std::string& value);
  void set_cur_ad_component_history(int index, std::string&& value);
  void set_cur_ad_component_history(int index, const char* value);
  void set_cur_ad_component_history(int index, const char* value, size_t size);
  std::string* add_cur_ad_component_history();
  void add_cur_ad_component_history(const std::string& value);
  void add_cur_ad_component_history(std::string&& value);
  void add_cur_ad_component_history(const char* value);
  void add_cur_ad_component_history(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cur_ad_component_history() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cur_ad_component_history();
  private:
  const std::string& _internal_cur_ad_component_history(int index) const;
  std::string* _internal_add_cur_ad_component_history();
  public:

  // optional string pre1_query = 2;
  bool has_pre1_query() const;
  private:
  bool _internal_has_pre1_query() const;
  public:
  void clear_pre1_query();
  const std::string& pre1_query() const;
  void set_pre1_query(const std::string& value);
  void set_pre1_query(std::string&& value);
  void set_pre1_query(const char* value);
  void set_pre1_query(const char* value, size_t size);
  std::string* mutable_pre1_query();
  std::string* release_pre1_query();
  void set_allocated_pre1_query(std::string* pre1_query);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pre1_query();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pre1_query(
      std::string* pre1_query);
  private:
  const std::string& _internal_pre1_query() const;
  void _internal_set_pre1_query(const std::string& value);
  std::string* _internal_mutable_pre1_query();
  public:

  // optional string pre1_ad_clk_id = 4;
  bool has_pre1_ad_clk_id() const;
  private:
  bool _internal_has_pre1_ad_clk_id() const;
  public:
  void clear_pre1_ad_clk_id();
  const std::string& pre1_ad_clk_id() const;
  void set_pre1_ad_clk_id(const std::string& value);
  void set_pre1_ad_clk_id(std::string&& value);
  void set_pre1_ad_clk_id(const char* value);
  void set_pre1_ad_clk_id(const char* value, size_t size);
  std::string* mutable_pre1_ad_clk_id();
  std::string* release_pre1_ad_clk_id();
  void set_allocated_pre1_ad_clk_id(std::string* pre1_ad_clk_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pre1_ad_clk_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pre1_ad_clk_id(
      std::string* pre1_ad_clk_id);
  private:
  const std::string& _internal_pre1_ad_clk_id() const;
  void _internal_set_pre1_ad_clk_id(const std::string& value);
  std::string* _internal_mutable_pre1_ad_clk_id();
  public:

  // optional string pre1_ad_clk_span = 5;
  bool has_pre1_ad_clk_span() const;
  private:
  bool _internal_has_pre1_ad_clk_span() const;
  public:
  void clear_pre1_ad_clk_span();
  const std::string& pre1_ad_clk_span() const;
  void set_pre1_ad_clk_span(const std::string& value);
  void set_pre1_ad_clk_span(std::string&& value);
  void set_pre1_ad_clk_span(const char* value);
  void set_pre1_ad_clk_span(const char* value, size_t size);
  std::string* mutable_pre1_ad_clk_span();
  std::string* release_pre1_ad_clk_span();
  void set_allocated_pre1_ad_clk_span(std::string* pre1_ad_clk_span);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pre1_ad_clk_span();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pre1_ad_clk_span(
      std::string* pre1_ad_clk_span);
  private:
  const std::string& _internal_pre1_ad_clk_span() const;
  void _internal_set_pre1_ad_clk_span(const std::string& value);
  std::string* _internal_mutable_pre1_ad_clk_span();
  public:

  // optional string pre1_search_gap = 6;
  bool has_pre1_search_gap() const;
  private:
  bool _internal_has_pre1_search_gap() const;
  public:
  void clear_pre1_search_gap();
  const std::string& pre1_search_gap() const;
  void set_pre1_search_gap(const std::string& value);
  void set_pre1_search_gap(std::string&& value);
  void set_pre1_search_gap(const char* value);
  void set_pre1_search_gap(const char* value, size_t size);
  std::string* mutable_pre1_search_gap();
  std::string* release_pre1_search_gap();
  void set_allocated_pre1_search_gap(std::string* pre1_search_gap);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pre1_search_gap();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pre1_search_gap(
      std::string* pre1_search_gap);
  private:
  const std::string& _internal_pre1_search_gap() const;
  void _internal_set_pre1_search_gap(const std::string& value);
  std::string* _internal_mutable_pre1_search_gap();
  public:

  // optional string cur_ad_clicked = 13;
  bool has_cur_ad_clicked() const;
  private:
  bool _internal_has_cur_ad_clicked() const;
  public:
  void clear_cur_ad_clicked();
  const std::string& cur_ad_clicked() const;
  void set_cur_ad_clicked(const std::string& value);
  void set_cur_ad_clicked(std::string&& value);
  void set_cur_ad_clicked(const char* value);
  void set_cur_ad_clicked(const char* value, size_t size);
  std::string* mutable_cur_ad_clicked();
  std::string* release_cur_ad_clicked();
  void set_allocated_cur_ad_clicked(std::string* cur_ad_clicked);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cur_ad_clicked();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cur_ad_clicked(
      std::string* cur_ad_clicked);
  private:
  const std::string& _internal_cur_ad_clicked() const;
  void _internal_set_cur_ad_clicked(const std::string& value);
  std::string* _internal_mutable_cur_ad_clicked();
  public:

  // optional string ad_show_clk_num = 15;
  bool has_ad_show_clk_num() const;
  private:
  bool _internal_has_ad_show_clk_num() const;
  public:
  void clear_ad_show_clk_num();
  const std::string& ad_show_clk_num() const;
  void set_ad_show_clk_num(const std::string& value);
  void set_ad_show_clk_num(std::string&& value);
  void set_ad_show_clk_num(const char* value);
  void set_ad_show_clk_num(const char* value, size_t size);
  std::string* mutable_ad_show_clk_num();
  std::string* release_ad_show_clk_num();
  void set_allocated_ad_show_clk_num(std::string* ad_show_clk_num);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ad_show_clk_num();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ad_show_clk_num(
      std::string* ad_show_clk_num);
  private:
  const std::string& _internal_ad_show_clk_num() const;
  void _internal_set_ad_show_clk_num(const std::string& value);
  std::string* _internal_mutable_ad_show_clk_num();
  public:

  // optional string pre1_ad_clk_gap = 20;
  bool has_pre1_ad_clk_gap() const;
  private:
  bool _internal_has_pre1_ad_clk_gap() const;
  public:
  void clear_pre1_ad_clk_gap();
  const std::string& pre1_ad_clk_gap() const;
  void set_pre1_ad_clk_gap(const std::string& value);
  void set_pre1_ad_clk_gap(std::string&& value);
  void set_pre1_ad_clk_gap(const char* value);
  void set_pre1_ad_clk_gap(const char* value, size_t size);
  std::string* mutable_pre1_ad_clk_gap();
  std::string* release_pre1_ad_clk_gap();
  void set_allocated_pre1_ad_clk_gap(std::string* pre1_ad_clk_gap);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pre1_ad_clk_gap();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pre1_ad_clk_gap(
      std::string* pre1_ad_clk_gap);
  private:
  const std::string& _internal_pre1_ad_clk_gap() const;
  void _internal_set_pre1_ad_clk_gap(const std::string& value);
  std::string* _internal_mutable_pre1_ad_clk_gap();
  public:

  // optional .consfea.PreAndCurQuery pre_and_cur_query = 3;
  bool has_pre_and_cur_query() const;
  private:
  bool _internal_has_pre_and_cur_query() const;
  public:
  void clear_pre_and_cur_query();
  const ::consfea::PreAndCurQuery& pre_and_cur_query() const;
  ::consfea::PreAndCurQuery* release_pre_and_cur_query();
  ::consfea::PreAndCurQuery* mutable_pre_and_cur_query();
  void set_allocated_pre_and_cur_query(::consfea::PreAndCurQuery* pre_and_cur_query);
  private:
  const ::consfea::PreAndCurQuery& _internal_pre_and_cur_query() const;
  ::consfea::PreAndCurQuery* _internal_mutable_pre_and_cur_query();
  public:
  void unsafe_arena_set_allocated_pre_and_cur_query(
      ::consfea::PreAndCurQuery* pre_and_cur_query);
  ::consfea::PreAndCurQuery* unsafe_arena_release_pre_and_cur_query();

  // optional .consfea.AdQueryTerm ad_query_term = 7;
  bool has_ad_query_term() const;
  private:
  bool _internal_has_ad_query_term() const;
  public:
  void clear_ad_query_term();
  const ::consfea::AdQueryTerm& ad_query_term() const;
  ::consfea::AdQueryTerm* release_ad_query_term();
  ::consfea::AdQueryTerm* mutable_ad_query_term();
  void set_allocated_ad_query_term(::consfea::AdQueryTerm* ad_query_term);
  private:
  const ::consfea::AdQueryTerm& _internal_ad_query_term() const;
  ::consfea::AdQueryTerm* _internal_mutable_ad_query_term();
  public:
  void unsafe_arena_set_allocated_ad_query_term(
      ::consfea::AdQueryTerm* ad_query_term);
  ::consfea::AdQueryTerm* unsafe_arena_release_ad_query_term();

  // optional .consfea.AsQueryTerm as_query_term = 8;
  bool has_as_query_term() const;
  private:
  bool _internal_has_as_query_term() const;
  public:
  void clear_as_query_term();
  const ::consfea::AsQueryTerm& as_query_term() const;
  ::consfea::AsQueryTerm* release_as_query_term();
  ::consfea::AsQueryTerm* mutable_as_query_term();
  void set_allocated_as_query_term(::consfea::AsQueryTerm* as_query_term);
  private:
  const ::consfea::AsQueryTerm& _internal_as_query_term() const;
  ::consfea::AsQueryTerm* _internal_mutable_as_query_term();
  public:
  void unsafe_arena_set_allocated_as_query_term(
      ::consfea::AsQueryTerm* as_query_term);
  ::consfea::AsQueryTerm* unsafe_arena_release_as_query_term();

  // optional .consfea.HisQueryTerm his_query_term = 12;
  bool has_his_query_term() const;
  private:
  bool _internal_has_his_query_term() const;
  public:
  void clear_his_query_term();
  const ::consfea::HisQueryTerm& his_query_term() const;
  ::consfea::HisQueryTerm* release_his_query_term();
  ::consfea::HisQueryTerm* mutable_his_query_term();
  void set_allocated_his_query_term(::consfea::HisQueryTerm* his_query_term);
  private:
  const ::consfea::HisQueryTerm& _internal_his_query_term() const;
  ::consfea::HisQueryTerm* _internal_mutable_his_query_term();
  public:
  void unsafe_arena_set_allocated_his_query_term(
      ::consfea::HisQueryTerm* his_query_term);
  ::consfea::HisQueryTerm* unsafe_arena_release_his_query_term();

  // optional .consfea.Pre1Bidword pre1_bidword = 21;
  bool has_pre1_bidword() const;
  private:
  bool _internal_has_pre1_bidword() const;
  public:
  void clear_pre1_bidword();
  const ::consfea::Pre1Bidword& pre1_bidword() const;
  ::consfea::Pre1Bidword* release_pre1_bidword();
  ::consfea::Pre1Bidword* mutable_pre1_bidword();
  void set_allocated_pre1_bidword(::consfea::Pre1Bidword* pre1_bidword);
  private:
  const ::consfea::Pre1Bidword& _internal_pre1_bidword() const;
  ::consfea::Pre1Bidword* _internal_mutable_pre1_bidword();
  public:
  void unsafe_arena_set_allocated_pre1_bidword(
      ::consfea::Pre1Bidword* pre1_bidword);
  ::consfea::Pre1Bidword* unsafe_arena_release_pre1_bidword();

  // optional .consfea.TopClickQueryTerm top_click_query_term = 22;
  bool has_top_click_query_term() const;
  private:
  bool _internal_has_top_click_query_term() const;
  public:
  void clear_top_click_query_term();
  const ::consfea::TopClickQueryTerm& top_click_query_term() const;
  ::consfea::TopClickQueryTerm* release_top_click_query_term();
  ::consfea::TopClickQueryTerm* mutable_top_click_query_term();
  void set_allocated_top_click_query_term(::consfea::TopClickQueryTerm* top_click_query_term);
  private:
  const ::consfea::TopClickQueryTerm& _internal_top_click_query_term() const;
  ::consfea::TopClickQueryTerm* _internal_mutable_top_click_query_term();
  public:
  void unsafe_arena_set_allocated_top_click_query_term(
      ::consfea::TopClickQueryTerm* top_click_query_term);
  ::consfea::TopClickQueryTerm* unsafe_arena_release_top_click_query_term();

  // optional uint32 last_click_query_term_match_query_num = 18;
  bool has_last_click_query_term_match_query_num() const;
  private:
  bool _internal_has_last_click_query_term_match_query_num() const;
  public:
  void clear_last_click_query_term_match_query_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_click_query_term_match_query_num() const;
  void set_last_click_query_term_match_query_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_click_query_term_match_query_num() const;
  void _internal_set_last_click_query_term_match_query_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 last_click_query_term_match_title_num = 19;
  bool has_last_click_query_term_match_title_num() const;
  private:
  bool _internal_has_last_click_query_term_match_title_num() const;
  public:
  void clear_last_click_query_term_match_title_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_click_query_term_match_title_num() const;
  void set_last_click_query_term_match_title_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_click_query_term_match_title_num() const;
  void _internal_set_last_click_query_term_match_title_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:consfea.ConsFeaQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pre5_query_char_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ad_query_match_query_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > as_query_match_query_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> history_10_query_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cur_ad_history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ad_pos_clk_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > last_click_query_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> clk_ad_style_info_history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cur_ad_style_history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cur_ad_component_history_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre1_query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre1_ad_clk_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre1_ad_clk_span_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre1_search_gap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cur_ad_clicked_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ad_show_clk_num_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre1_ad_clk_gap_;
  ::consfea::PreAndCurQuery* pre_and_cur_query_;
  ::consfea::AdQueryTerm* ad_query_term_;
  ::consfea::AsQueryTerm* as_query_term_;
  ::consfea::HisQueryTerm* his_query_term_;
  ::consfea::Pre1Bidword* pre1_bidword_;
  ::consfea::TopClickQueryTerm* top_click_query_term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_click_query_term_match_query_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_click_query_term_match_title_num_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class ConsFeaAd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.ConsFeaAd) */ {
 public:
  inline ConsFeaAd() : ConsFeaAd(nullptr) {};
  virtual ~ConsFeaAd();

  ConsFeaAd(const ConsFeaAd& from);
  ConsFeaAd(ConsFeaAd&& from) noexcept
    : ConsFeaAd() {
    *this = ::std::move(from);
  }

  inline ConsFeaAd& operator=(const ConsFeaAd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsFeaAd& operator=(ConsFeaAd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsFeaAd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsFeaAd* internal_default_instance() {
    return reinterpret_cast<const ConsFeaAd*>(
               &_ConsFeaAd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ConsFeaAd& a, ConsFeaAd& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsFeaAd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsFeaAd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsFeaAd* New() const final {
    return CreateMaybeMessage<ConsFeaAd>(nullptr);
  }

  ConsFeaAd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsFeaAd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsFeaAd& from);
  void MergeFrom(const ConsFeaAd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsFeaAd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.ConsFeaAd";
  }
  protected:
  explicit ConsFeaAd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHisQueryTermAdFieldNumber = 1,
    kCurAdClickedAdFieldNumber = 2,
    kCurAdHistoryAdFieldNumber = 3,
    kLastClickQueryTermMatchTitleNumAdFieldNumber = 4,
    kPre1BidwordAdFieldNumber = 5,
    kTopClickQueryTermAdFieldNumber = 6,
    kCurAdStyleHistoryAdFieldNumber = 7,
    kCurAdComponentHistoryAdFieldNumber = 8,
  };
  // repeated .consfea.HisQueryTermAd his_query_term_ad = 1;
  int his_query_term_ad_size() const;
  private:
  int _internal_his_query_term_ad_size() const;
  public:
  void clear_his_query_term_ad();
  ::consfea::HisQueryTermAd* mutable_his_query_term_ad(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::HisQueryTermAd >*
      mutable_his_query_term_ad();
  private:
  const ::consfea::HisQueryTermAd& _internal_his_query_term_ad(int index) const;
  ::consfea::HisQueryTermAd* _internal_add_his_query_term_ad();
  public:
  const ::consfea::HisQueryTermAd& his_query_term_ad(int index) const;
  ::consfea::HisQueryTermAd* add_his_query_term_ad();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::HisQueryTermAd >&
      his_query_term_ad() const;

  // repeated .consfea.CurAdClickedAd cur_ad_clicked_ad = 2;
  int cur_ad_clicked_ad_size() const;
  private:
  int _internal_cur_ad_clicked_ad_size() const;
  public:
  void clear_cur_ad_clicked_ad();
  ::consfea::CurAdClickedAd* mutable_cur_ad_clicked_ad(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdClickedAd >*
      mutable_cur_ad_clicked_ad();
  private:
  const ::consfea::CurAdClickedAd& _internal_cur_ad_clicked_ad(int index) const;
  ::consfea::CurAdClickedAd* _internal_add_cur_ad_clicked_ad();
  public:
  const ::consfea::CurAdClickedAd& cur_ad_clicked_ad(int index) const;
  ::consfea::CurAdClickedAd* add_cur_ad_clicked_ad();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdClickedAd >&
      cur_ad_clicked_ad() const;

  // repeated .consfea.CurAdHistoryAd cur_ad_history_ad = 3;
  int cur_ad_history_ad_size() const;
  private:
  int _internal_cur_ad_history_ad_size() const;
  public:
  void clear_cur_ad_history_ad();
  ::consfea::CurAdHistoryAd* mutable_cur_ad_history_ad(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdHistoryAd >*
      mutable_cur_ad_history_ad();
  private:
  const ::consfea::CurAdHistoryAd& _internal_cur_ad_history_ad(int index) const;
  ::consfea::CurAdHistoryAd* _internal_add_cur_ad_history_ad();
  public:
  const ::consfea::CurAdHistoryAd& cur_ad_history_ad(int index) const;
  ::consfea::CurAdHistoryAd* add_cur_ad_history_ad();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdHistoryAd >&
      cur_ad_history_ad() const;

  // repeated .consfea.LastClickQueryTermMatchTitleNumAd last_click_query_term_match_title_num_ad = 4;
  int last_click_query_term_match_title_num_ad_size() const;
  private:
  int _internal_last_click_query_term_match_title_num_ad_size() const;
  public:
  void clear_last_click_query_term_match_title_num_ad();
  ::consfea::LastClickQueryTermMatchTitleNumAd* mutable_last_click_query_term_match_title_num_ad(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::LastClickQueryTermMatchTitleNumAd >*
      mutable_last_click_query_term_match_title_num_ad();
  private:
  const ::consfea::LastClickQueryTermMatchTitleNumAd& _internal_last_click_query_term_match_title_num_ad(int index) const;
  ::consfea::LastClickQueryTermMatchTitleNumAd* _internal_add_last_click_query_term_match_title_num_ad();
  public:
  const ::consfea::LastClickQueryTermMatchTitleNumAd& last_click_query_term_match_title_num_ad(int index) const;
  ::consfea::LastClickQueryTermMatchTitleNumAd* add_last_click_query_term_match_title_num_ad();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::LastClickQueryTermMatchTitleNumAd >&
      last_click_query_term_match_title_num_ad() const;

  // repeated .consfea.Pre1BidwordAd pre1_bidword_ad = 5;
  int pre1_bidword_ad_size() const;
  private:
  int _internal_pre1_bidword_ad_size() const;
  public:
  void clear_pre1_bidword_ad();
  ::consfea::Pre1BidwordAd* mutable_pre1_bidword_ad(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::Pre1BidwordAd >*
      mutable_pre1_bidword_ad();
  private:
  const ::consfea::Pre1BidwordAd& _internal_pre1_bidword_ad(int index) const;
  ::consfea::Pre1BidwordAd* _internal_add_pre1_bidword_ad();
  public:
  const ::consfea::Pre1BidwordAd& pre1_bidword_ad(int index) const;
  ::consfea::Pre1BidwordAd* add_pre1_bidword_ad();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::Pre1BidwordAd >&
      pre1_bidword_ad() const;

  // repeated .consfea.TopClickQueryTermAd top_click_query_term_ad = 6;
  int top_click_query_term_ad_size() const;
  private:
  int _internal_top_click_query_term_ad_size() const;
  public:
  void clear_top_click_query_term_ad();
  ::consfea::TopClickQueryTermAd* mutable_top_click_query_term_ad(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::TopClickQueryTermAd >*
      mutable_top_click_query_term_ad();
  private:
  const ::consfea::TopClickQueryTermAd& _internal_top_click_query_term_ad(int index) const;
  ::consfea::TopClickQueryTermAd* _internal_add_top_click_query_term_ad();
  public:
  const ::consfea::TopClickQueryTermAd& top_click_query_term_ad(int index) const;
  ::consfea::TopClickQueryTermAd* add_top_click_query_term_ad();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::TopClickQueryTermAd >&
      top_click_query_term_ad() const;

  // repeated .consfea.CurAdStyleHistoryAd cur_ad_style_history_ad = 7;
  int cur_ad_style_history_ad_size() const;
  private:
  int _internal_cur_ad_style_history_ad_size() const;
  public:
  void clear_cur_ad_style_history_ad();
  ::consfea::CurAdStyleHistoryAd* mutable_cur_ad_style_history_ad(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdStyleHistoryAd >*
      mutable_cur_ad_style_history_ad();
  private:
  const ::consfea::CurAdStyleHistoryAd& _internal_cur_ad_style_history_ad(int index) const;
  ::consfea::CurAdStyleHistoryAd* _internal_add_cur_ad_style_history_ad();
  public:
  const ::consfea::CurAdStyleHistoryAd& cur_ad_style_history_ad(int index) const;
  ::consfea::CurAdStyleHistoryAd* add_cur_ad_style_history_ad();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdStyleHistoryAd >&
      cur_ad_style_history_ad() const;

  // repeated .consfea.CurAdComponentHistoryAd cur_ad_component_history_ad = 8;
  int cur_ad_component_history_ad_size() const;
  private:
  int _internal_cur_ad_component_history_ad_size() const;
  public:
  void clear_cur_ad_component_history_ad();
  ::consfea::CurAdComponentHistoryAd* mutable_cur_ad_component_history_ad(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdComponentHistoryAd >*
      mutable_cur_ad_component_history_ad();
  private:
  const ::consfea::CurAdComponentHistoryAd& _internal_cur_ad_component_history_ad(int index) const;
  ::consfea::CurAdComponentHistoryAd* _internal_add_cur_ad_component_history_ad();
  public:
  const ::consfea::CurAdComponentHistoryAd& cur_ad_component_history_ad(int index) const;
  ::consfea::CurAdComponentHistoryAd* add_cur_ad_component_history_ad();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdComponentHistoryAd >&
      cur_ad_component_history_ad() const;

  // @@protoc_insertion_point(class_scope:consfea.ConsFeaAd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::HisQueryTermAd > his_query_term_ad_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdClickedAd > cur_ad_clicked_ad_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdHistoryAd > cur_ad_history_ad_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::LastClickQueryTermMatchTitleNumAd > last_click_query_term_match_title_num_ad_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::Pre1BidwordAd > pre1_bidword_ad_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::TopClickQueryTermAd > top_click_query_term_ad_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdStyleHistoryAd > cur_ad_style_history_ad_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdComponentHistoryAd > cur_ad_component_history_ad_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// -------------------------------------------------------------------

class ConsFeaFull PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consfea.ConsFeaFull) */ {
 public:
  inline ConsFeaFull() : ConsFeaFull(nullptr) {};
  virtual ~ConsFeaFull();

  ConsFeaFull(const ConsFeaFull& from);
  ConsFeaFull(ConsFeaFull&& from) noexcept
    : ConsFeaFull() {
    *this = ::std::move(from);
  }

  inline ConsFeaFull& operator=(const ConsFeaFull& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsFeaFull& operator=(ConsFeaFull&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsFeaFull& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsFeaFull* internal_default_instance() {
    return reinterpret_cast<const ConsFeaFull*>(
               &_ConsFeaFull_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ConsFeaFull& a, ConsFeaFull& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsFeaFull* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsFeaFull* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsFeaFull* New() const final {
    return CreateMaybeMessage<ConsFeaFull>(nullptr);
  }

  ConsFeaFull* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsFeaFull>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsFeaFull& from);
  void MergeFrom(const ConsFeaFull& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsFeaFull* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consfea.ConsFeaFull";
  }
  protected:
  explicit ConsFeaFull(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_consistent_5ffeature_2eproto);
    return ::descriptor_table_consistent_5ffeature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPvidFieldNumber = 1,
    kQueryFieldNumber = 2,
    kPlatformFieldNumber = 5,
    kConsFeaQueryFieldNumber = 3,
    kConsFeaAdFieldNumber = 4,
  };
  // optional string pvid = 1;
  bool has_pvid() const;
  private:
  bool _internal_has_pvid() const;
  public:
  void clear_pvid();
  const std::string& pvid() const;
  void set_pvid(const std::string& value);
  void set_pvid(std::string&& value);
  void set_pvid(const char* value);
  void set_pvid(const char* value, size_t size);
  std::string* mutable_pvid();
  std::string* release_pvid();
  void set_allocated_pvid(std::string* pvid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pvid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pvid(
      std::string* pvid);
  private:
  const std::string& _internal_pvid() const;
  void _internal_set_pvid(const std::string& value);
  std::string* _internal_mutable_pvid();
  public:

  // optional string query = 2;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_query();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_query(
      std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // optional string platform = 5;
  bool has_platform() const;
  private:
  bool _internal_has_platform() const;
  public:
  void clear_platform();
  const std::string& platform() const;
  void set_platform(const std::string& value);
  void set_platform(std::string&& value);
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  std::string* mutable_platform();
  std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_platform();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_platform(
      std::string* platform);
  private:
  const std::string& _internal_platform() const;
  void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // optional .consfea.ConsFeaQuery cons_fea_query = 3;
  bool has_cons_fea_query() const;
  private:
  bool _internal_has_cons_fea_query() const;
  public:
  void clear_cons_fea_query();
  const ::consfea::ConsFeaQuery& cons_fea_query() const;
  ::consfea::ConsFeaQuery* release_cons_fea_query();
  ::consfea::ConsFeaQuery* mutable_cons_fea_query();
  void set_allocated_cons_fea_query(::consfea::ConsFeaQuery* cons_fea_query);
  private:
  const ::consfea::ConsFeaQuery& _internal_cons_fea_query() const;
  ::consfea::ConsFeaQuery* _internal_mutable_cons_fea_query();
  public:
  void unsafe_arena_set_allocated_cons_fea_query(
      ::consfea::ConsFeaQuery* cons_fea_query);
  ::consfea::ConsFeaQuery* unsafe_arena_release_cons_fea_query();

  // optional .consfea.ConsFeaAd cons_fea_ad = 4;
  bool has_cons_fea_ad() const;
  private:
  bool _internal_has_cons_fea_ad() const;
  public:
  void clear_cons_fea_ad();
  const ::consfea::ConsFeaAd& cons_fea_ad() const;
  ::consfea::ConsFeaAd* release_cons_fea_ad();
  ::consfea::ConsFeaAd* mutable_cons_fea_ad();
  void set_allocated_cons_fea_ad(::consfea::ConsFeaAd* cons_fea_ad);
  private:
  const ::consfea::ConsFeaAd& _internal_cons_fea_ad() const;
  ::consfea::ConsFeaAd* _internal_mutable_cons_fea_ad();
  public:
  void unsafe_arena_set_allocated_cons_fea_ad(
      ::consfea::ConsFeaAd* cons_fea_ad);
  ::consfea::ConsFeaAd* unsafe_arena_release_cons_fea_ad();

  // @@protoc_insertion_point(class_scope:consfea.ConsFeaFull)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pvid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::consfea::ConsFeaQuery* cons_fea_query_;
  ::consfea::ConsFeaAd* cons_fea_ad_;
  friend struct ::TableStruct_consistent_5ffeature_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PreAndCurQuery

// optional string pre1_query = 1;
inline bool PreAndCurQuery::_internal_has_pre1_query() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PreAndCurQuery::has_pre1_query() const {
  return _internal_has_pre1_query();
}
inline void PreAndCurQuery::clear_pre1_query() {
  pre1_query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PreAndCurQuery::pre1_query() const {
  // @@protoc_insertion_point(field_get:consfea.PreAndCurQuery.pre1_query)
  return _internal_pre1_query();
}
inline void PreAndCurQuery::set_pre1_query(const std::string& value) {
  _internal_set_pre1_query(value);
  // @@protoc_insertion_point(field_set:consfea.PreAndCurQuery.pre1_query)
}
inline std::string* PreAndCurQuery::mutable_pre1_query() {
  // @@protoc_insertion_point(field_mutable:consfea.PreAndCurQuery.pre1_query)
  return _internal_mutable_pre1_query();
}
inline const std::string& PreAndCurQuery::_internal_pre1_query() const {
  return pre1_query_.Get();
}
inline void PreAndCurQuery::_internal_set_pre1_query(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pre1_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PreAndCurQuery::set_pre1_query(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pre1_query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.PreAndCurQuery.pre1_query)
}
inline void PreAndCurQuery::set_pre1_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pre1_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.PreAndCurQuery.pre1_query)
}
inline void PreAndCurQuery::set_pre1_query(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pre1_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.PreAndCurQuery.pre1_query)
}
inline std::string* PreAndCurQuery::_internal_mutable_pre1_query() {
  _has_bits_[0] |= 0x00000001u;
  return pre1_query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PreAndCurQuery::release_pre1_query() {
  // @@protoc_insertion_point(field_release:consfea.PreAndCurQuery.pre1_query)
  if (!_internal_has_pre1_query()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pre1_query_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreAndCurQuery::set_allocated_pre1_query(std::string* pre1_query) {
  if (pre1_query != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pre1_query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre1_query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.PreAndCurQuery.pre1_query)
}
inline std::string* PreAndCurQuery::unsafe_arena_release_pre1_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.PreAndCurQuery.pre1_query)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return pre1_query_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PreAndCurQuery::unsafe_arena_set_allocated_pre1_query(
    std::string* pre1_query) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pre1_query != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pre1_query_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pre1_query, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.PreAndCurQuery.pre1_query)
}

// optional string query_text = 2;
inline bool PreAndCurQuery::_internal_has_query_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PreAndCurQuery::has_query_text() const {
  return _internal_has_query_text();
}
inline void PreAndCurQuery::clear_query_text() {
  query_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PreAndCurQuery::query_text() const {
  // @@protoc_insertion_point(field_get:consfea.PreAndCurQuery.query_text)
  return _internal_query_text();
}
inline void PreAndCurQuery::set_query_text(const std::string& value) {
  _internal_set_query_text(value);
  // @@protoc_insertion_point(field_set:consfea.PreAndCurQuery.query_text)
}
inline std::string* PreAndCurQuery::mutable_query_text() {
  // @@protoc_insertion_point(field_mutable:consfea.PreAndCurQuery.query_text)
  return _internal_mutable_query_text();
}
inline const std::string& PreAndCurQuery::_internal_query_text() const {
  return query_text_.Get();
}
inline void PreAndCurQuery::_internal_set_query_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  query_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PreAndCurQuery::set_query_text(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  query_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.PreAndCurQuery.query_text)
}
inline void PreAndCurQuery::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  query_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.PreAndCurQuery.query_text)
}
inline void PreAndCurQuery::set_query_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  query_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.PreAndCurQuery.query_text)
}
inline std::string* PreAndCurQuery::_internal_mutable_query_text() {
  _has_bits_[0] |= 0x00000002u;
  return query_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PreAndCurQuery::release_query_text() {
  // @@protoc_insertion_point(field_release:consfea.PreAndCurQuery.query_text)
  if (!_internal_has_query_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return query_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreAndCurQuery::set_allocated_query_text(std::string* query_text) {
  if (query_text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  query_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.PreAndCurQuery.query_text)
}
inline std::string* PreAndCurQuery::unsafe_arena_release_query_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.PreAndCurQuery.query_text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return query_text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PreAndCurQuery::unsafe_arena_set_allocated_query_text(
    std::string* query_text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (query_text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  query_text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      query_text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.PreAndCurQuery.query_text)
}

// -------------------------------------------------------------------

// AdQueryTerm

// optional uint32 ad_query_term_num = 1;
inline bool AdQueryTerm::_internal_has_ad_query_term_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AdQueryTerm::has_ad_query_term_num() const {
  return _internal_has_ad_query_term_num();
}
inline void AdQueryTerm::clear_ad_query_term_num() {
  ad_query_term_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdQueryTerm::_internal_ad_query_term_num() const {
  return ad_query_term_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdQueryTerm::ad_query_term_num() const {
  // @@protoc_insertion_point(field_get:consfea.AdQueryTerm.ad_query_term_num)
  return _internal_ad_query_term_num();
}
inline void AdQueryTerm::_internal_set_ad_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ad_query_term_num_ = value;
}
inline void AdQueryTerm::set_ad_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ad_query_term_num(value);
  // @@protoc_insertion_point(field_set:consfea.AdQueryTerm.ad_query_term_num)
}

// optional uint32 ad_query_term_match_query_num = 2;
inline bool AdQueryTerm::_internal_has_ad_query_term_match_query_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AdQueryTerm::has_ad_query_term_match_query_num() const {
  return _internal_has_ad_query_term_match_query_num();
}
inline void AdQueryTerm::clear_ad_query_term_match_query_num() {
  ad_query_term_match_query_num_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdQueryTerm::_internal_ad_query_term_match_query_num() const {
  return ad_query_term_match_query_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdQueryTerm::ad_query_term_match_query_num() const {
  // @@protoc_insertion_point(field_get:consfea.AdQueryTerm.ad_query_term_match_query_num)
  return _internal_ad_query_term_match_query_num();
}
inline void AdQueryTerm::_internal_set_ad_query_term_match_query_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ad_query_term_match_query_num_ = value;
}
inline void AdQueryTerm::set_ad_query_term_match_query_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ad_query_term_match_query_num(value);
  // @@protoc_insertion_point(field_set:consfea.AdQueryTerm.ad_query_term_match_query_num)
}

// -------------------------------------------------------------------

// AsQueryTerm

// optional uint32 as_query_term_num = 1;
inline bool AsQueryTerm::_internal_has_as_query_term_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AsQueryTerm::has_as_query_term_num() const {
  return _internal_has_as_query_term_num();
}
inline void AsQueryTerm::clear_as_query_term_num() {
  as_query_term_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsQueryTerm::_internal_as_query_term_num() const {
  return as_query_term_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsQueryTerm::as_query_term_num() const {
  // @@protoc_insertion_point(field_get:consfea.AsQueryTerm.as_query_term_num)
  return _internal_as_query_term_num();
}
inline void AsQueryTerm::_internal_set_as_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  as_query_term_num_ = value;
}
inline void AsQueryTerm::set_as_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_as_query_term_num(value);
  // @@protoc_insertion_point(field_set:consfea.AsQueryTerm.as_query_term_num)
}

// optional uint32 as_query_term_match_query_num = 2;
inline bool AsQueryTerm::_internal_has_as_query_term_match_query_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AsQueryTerm::has_as_query_term_match_query_num() const {
  return _internal_has_as_query_term_match_query_num();
}
inline void AsQueryTerm::clear_as_query_term_match_query_num() {
  as_query_term_match_query_num_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsQueryTerm::_internal_as_query_term_match_query_num() const {
  return as_query_term_match_query_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsQueryTerm::as_query_term_match_query_num() const {
  // @@protoc_insertion_point(field_get:consfea.AsQueryTerm.as_query_term_match_query_num)
  return _internal_as_query_term_match_query_num();
}
inline void AsQueryTerm::_internal_set_as_query_term_match_query_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  as_query_term_match_query_num_ = value;
}
inline void AsQueryTerm::set_as_query_term_match_query_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_as_query_term_match_query_num(value);
  // @@protoc_insertion_point(field_set:consfea.AsQueryTerm.as_query_term_match_query_num)
}

// -------------------------------------------------------------------

// TopClickQueryTerm

// optional uint32 top_click_query_term_num = 1;
inline bool TopClickQueryTerm::_internal_has_top_click_query_term_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TopClickQueryTerm::has_top_click_query_term_num() const {
  return _internal_has_top_click_query_term_num();
}
inline void TopClickQueryTerm::clear_top_click_query_term_num() {
  top_click_query_term_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopClickQueryTerm::_internal_top_click_query_term_num() const {
  return top_click_query_term_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopClickQueryTerm::top_click_query_term_num() const {
  // @@protoc_insertion_point(field_get:consfea.TopClickQueryTerm.top_click_query_term_num)
  return _internal_top_click_query_term_num();
}
inline void TopClickQueryTerm::_internal_set_top_click_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  top_click_query_term_num_ = value;
}
inline void TopClickQueryTerm::set_top_click_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top_click_query_term_num(value);
  // @@protoc_insertion_point(field_set:consfea.TopClickQueryTerm.top_click_query_term_num)
}

// optional uint32 top_click_query_term_match_bidword_num = 2;
inline bool TopClickQueryTerm::_internal_has_top_click_query_term_match_bidword_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TopClickQueryTerm::has_top_click_query_term_match_bidword_num() const {
  return _internal_has_top_click_query_term_match_bidword_num();
}
inline void TopClickQueryTerm::clear_top_click_query_term_match_bidword_num() {
  top_click_query_term_match_bidword_num_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopClickQueryTerm::_internal_top_click_query_term_match_bidword_num() const {
  return top_click_query_term_match_bidword_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopClickQueryTerm::top_click_query_term_match_bidword_num() const {
  // @@protoc_insertion_point(field_get:consfea.TopClickQueryTerm.top_click_query_term_match_bidword_num)
  return _internal_top_click_query_term_match_bidword_num();
}
inline void TopClickQueryTerm::_internal_set_top_click_query_term_match_bidword_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  top_click_query_term_match_bidword_num_ = value;
}
inline void TopClickQueryTerm::set_top_click_query_term_match_bidword_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top_click_query_term_match_bidword_num(value);
  // @@protoc_insertion_point(field_set:consfea.TopClickQueryTerm.top_click_query_term_match_bidword_num)
}

// -------------------------------------------------------------------

// HisQueryTerm

// optional uint32 his_query_term_num = 1;
inline bool HisQueryTerm::_internal_has_his_query_term_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HisQueryTerm::has_his_query_term_num() const {
  return _internal_has_his_query_term_num();
}
inline void HisQueryTerm::clear_his_query_term_num() {
  his_query_term_num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HisQueryTerm::_internal_his_query_term_num() const {
  return his_query_term_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HisQueryTerm::his_query_term_num() const {
  // @@protoc_insertion_point(field_get:consfea.HisQueryTerm.his_query_term_num)
  return _internal_his_query_term_num();
}
inline void HisQueryTerm::_internal_set_his_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  his_query_term_num_ = value;
}
inline void HisQueryTerm::set_his_query_term_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_his_query_term_num(value);
  // @@protoc_insertion_point(field_set:consfea.HisQueryTerm.his_query_term_num)
}

// optional uint32 his_query_term_match_bidword_num = 2;
inline bool HisQueryTerm::_internal_has_his_query_term_match_bidword_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HisQueryTerm::has_his_query_term_match_bidword_num() const {
  return _internal_has_his_query_term_match_bidword_num();
}
inline void HisQueryTerm::clear_his_query_term_match_bidword_num() {
  his_query_term_match_bidword_num_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HisQueryTerm::_internal_his_query_term_match_bidword_num() const {
  return his_query_term_match_bidword_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HisQueryTerm::his_query_term_match_bidword_num() const {
  // @@protoc_insertion_point(field_get:consfea.HisQueryTerm.his_query_term_match_bidword_num)
  return _internal_his_query_term_match_bidword_num();
}
inline void HisQueryTerm::_internal_set_his_query_term_match_bidword_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  his_query_term_match_bidword_num_ = value;
}
inline void HisQueryTerm::set_his_query_term_match_bidword_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_his_query_term_match_bidword_num(value);
  // @@protoc_insertion_point(field_set:consfea.HisQueryTerm.his_query_term_match_bidword_num)
}

// -------------------------------------------------------------------

// Pre1Bidword

// optional string pre1_bidword_has_clk = 1;
inline bool Pre1Bidword::_internal_has_pre1_bidword_has_clk() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pre1Bidword::has_pre1_bidword_has_clk() const {
  return _internal_has_pre1_bidword_has_clk();
}
inline void Pre1Bidword::clear_pre1_bidword_has_clk() {
  pre1_bidword_has_clk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Pre1Bidword::pre1_bidword_has_clk() const {
  // @@protoc_insertion_point(field_get:consfea.Pre1Bidword.pre1_bidword_has_clk)
  return _internal_pre1_bidword_has_clk();
}
inline void Pre1Bidword::set_pre1_bidword_has_clk(const std::string& value) {
  _internal_set_pre1_bidword_has_clk(value);
  // @@protoc_insertion_point(field_set:consfea.Pre1Bidword.pre1_bidword_has_clk)
}
inline std::string* Pre1Bidword::mutable_pre1_bidword_has_clk() {
  // @@protoc_insertion_point(field_mutable:consfea.Pre1Bidword.pre1_bidword_has_clk)
  return _internal_mutable_pre1_bidword_has_clk();
}
inline const std::string& Pre1Bidword::_internal_pre1_bidword_has_clk() const {
  return pre1_bidword_has_clk_.Get();
}
inline void Pre1Bidword::_internal_set_pre1_bidword_has_clk(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pre1_bidword_has_clk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pre1Bidword::set_pre1_bidword_has_clk(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pre1_bidword_has_clk_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.Pre1Bidword.pre1_bidword_has_clk)
}
inline void Pre1Bidword::set_pre1_bidword_has_clk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pre1_bidword_has_clk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.Pre1Bidword.pre1_bidword_has_clk)
}
inline void Pre1Bidword::set_pre1_bidword_has_clk(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pre1_bidword_has_clk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.Pre1Bidword.pre1_bidword_has_clk)
}
inline std::string* Pre1Bidword::_internal_mutable_pre1_bidword_has_clk() {
  _has_bits_[0] |= 0x00000001u;
  return pre1_bidword_has_clk_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pre1Bidword::release_pre1_bidword_has_clk() {
  // @@protoc_insertion_point(field_release:consfea.Pre1Bidword.pre1_bidword_has_clk)
  if (!_internal_has_pre1_bidword_has_clk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pre1_bidword_has_clk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pre1Bidword::set_allocated_pre1_bidword_has_clk(std::string* pre1_bidword_has_clk) {
  if (pre1_bidword_has_clk != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pre1_bidword_has_clk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre1_bidword_has_clk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.Pre1Bidword.pre1_bidword_has_clk)
}
inline std::string* Pre1Bidword::unsafe_arena_release_pre1_bidword_has_clk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.Pre1Bidword.pre1_bidword_has_clk)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return pre1_bidword_has_clk_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pre1Bidword::unsafe_arena_set_allocated_pre1_bidword_has_clk(
    std::string* pre1_bidword_has_clk) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pre1_bidword_has_clk != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pre1_bidword_has_clk_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pre1_bidword_has_clk, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.Pre1Bidword.pre1_bidword_has_clk)
}

// optional string bidword_text = 2;
inline bool Pre1Bidword::_internal_has_bidword_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pre1Bidword::has_bidword_text() const {
  return _internal_has_bidword_text();
}
inline void Pre1Bidword::clear_bidword_text() {
  bidword_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Pre1Bidword::bidword_text() const {
  // @@protoc_insertion_point(field_get:consfea.Pre1Bidword.bidword_text)
  return _internal_bidword_text();
}
inline void Pre1Bidword::set_bidword_text(const std::string& value) {
  _internal_set_bidword_text(value);
  // @@protoc_insertion_point(field_set:consfea.Pre1Bidword.bidword_text)
}
inline std::string* Pre1Bidword::mutable_bidword_text() {
  // @@protoc_insertion_point(field_mutable:consfea.Pre1Bidword.bidword_text)
  return _internal_mutable_bidword_text();
}
inline const std::string& Pre1Bidword::_internal_bidword_text() const {
  return bidword_text_.Get();
}
inline void Pre1Bidword::_internal_set_bidword_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bidword_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pre1Bidword::set_bidword_text(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bidword_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.Pre1Bidword.bidword_text)
}
inline void Pre1Bidword::set_bidword_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bidword_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.Pre1Bidword.bidword_text)
}
inline void Pre1Bidword::set_bidword_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bidword_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.Pre1Bidword.bidword_text)
}
inline std::string* Pre1Bidword::_internal_mutable_bidword_text() {
  _has_bits_[0] |= 0x00000002u;
  return bidword_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pre1Bidword::release_bidword_text() {
  // @@protoc_insertion_point(field_release:consfea.Pre1Bidword.bidword_text)
  if (!_internal_has_bidword_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bidword_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pre1Bidword::set_allocated_bidword_text(std::string* bidword_text) {
  if (bidword_text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bidword_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bidword_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.Pre1Bidword.bidword_text)
}
inline std::string* Pre1Bidword::unsafe_arena_release_bidword_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.Pre1Bidword.bidword_text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return bidword_text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pre1Bidword::unsafe_arena_set_allocated_bidword_text(
    std::string* bidword_text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bidword_text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bidword_text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bidword_text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.Pre1Bidword.bidword_text)
}

// -------------------------------------------------------------------

// HisQueryTermAd

// optional string key = 1;
inline bool HisQueryTermAd::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HisQueryTermAd::has_key() const {
  return _internal_has_key();
}
inline void HisQueryTermAd::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HisQueryTermAd::key() const {
  // @@protoc_insertion_point(field_get:consfea.HisQueryTermAd.key)
  return _internal_key();
}
inline void HisQueryTermAd::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:consfea.HisQueryTermAd.key)
}
inline std::string* HisQueryTermAd::mutable_key() {
  // @@protoc_insertion_point(field_mutable:consfea.HisQueryTermAd.key)
  return _internal_mutable_key();
}
inline const std::string& HisQueryTermAd::_internal_key() const {
  return key_.Get();
}
inline void HisQueryTermAd::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HisQueryTermAd::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.HisQueryTermAd.key)
}
inline void HisQueryTermAd::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.HisQueryTermAd.key)
}
inline void HisQueryTermAd::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.HisQueryTermAd.key)
}
inline std::string* HisQueryTermAd::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HisQueryTermAd::release_key() {
  // @@protoc_insertion_point(field_release:consfea.HisQueryTermAd.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HisQueryTermAd::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.HisQueryTermAd.key)
}
inline std::string* HisQueryTermAd::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.HisQueryTermAd.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HisQueryTermAd::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.HisQueryTermAd.key)
}

// optional uint32 his_query_term_num_value = 2;
inline bool HisQueryTermAd::_internal_has_his_query_term_num_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HisQueryTermAd::has_his_query_term_num_value() const {
  return _internal_has_his_query_term_num_value();
}
inline void HisQueryTermAd::clear_his_query_term_num_value() {
  his_query_term_num_value_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HisQueryTermAd::_internal_his_query_term_num_value() const {
  return his_query_term_num_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HisQueryTermAd::his_query_term_num_value() const {
  // @@protoc_insertion_point(field_get:consfea.HisQueryTermAd.his_query_term_num_value)
  return _internal_his_query_term_num_value();
}
inline void HisQueryTermAd::_internal_set_his_query_term_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  his_query_term_num_value_ = value;
}
inline void HisQueryTermAd::set_his_query_term_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_his_query_term_num_value(value);
  // @@protoc_insertion_point(field_set:consfea.HisQueryTermAd.his_query_term_num_value)
}

// optional uint32 his_query_term_match_bidword_num_value = 3;
inline bool HisQueryTermAd::_internal_has_his_query_term_match_bidword_num_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HisQueryTermAd::has_his_query_term_match_bidword_num_value() const {
  return _internal_has_his_query_term_match_bidword_num_value();
}
inline void HisQueryTermAd::clear_his_query_term_match_bidword_num_value() {
  his_query_term_match_bidword_num_value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HisQueryTermAd::_internal_his_query_term_match_bidword_num_value() const {
  return his_query_term_match_bidword_num_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HisQueryTermAd::his_query_term_match_bidword_num_value() const {
  // @@protoc_insertion_point(field_get:consfea.HisQueryTermAd.his_query_term_match_bidword_num_value)
  return _internal_his_query_term_match_bidword_num_value();
}
inline void HisQueryTermAd::_internal_set_his_query_term_match_bidword_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  his_query_term_match_bidword_num_value_ = value;
}
inline void HisQueryTermAd::set_his_query_term_match_bidword_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_his_query_term_match_bidword_num_value(value);
  // @@protoc_insertion_point(field_set:consfea.HisQueryTermAd.his_query_term_match_bidword_num_value)
}

// -------------------------------------------------------------------

// CurAdClickedAd

// optional string key = 1;
inline bool CurAdClickedAd::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CurAdClickedAd::has_key() const {
  return _internal_has_key();
}
inline void CurAdClickedAd::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CurAdClickedAd::key() const {
  // @@protoc_insertion_point(field_get:consfea.CurAdClickedAd.key)
  return _internal_key();
}
inline void CurAdClickedAd::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:consfea.CurAdClickedAd.key)
}
inline std::string* CurAdClickedAd::mutable_key() {
  // @@protoc_insertion_point(field_mutable:consfea.CurAdClickedAd.key)
  return _internal_mutable_key();
}
inline const std::string& CurAdClickedAd::_internal_key() const {
  return key_.Get();
}
inline void CurAdClickedAd::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CurAdClickedAd::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.CurAdClickedAd.key)
}
inline void CurAdClickedAd::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.CurAdClickedAd.key)
}
inline void CurAdClickedAd::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.CurAdClickedAd.key)
}
inline std::string* CurAdClickedAd::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CurAdClickedAd::release_key() {
  // @@protoc_insertion_point(field_release:consfea.CurAdClickedAd.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CurAdClickedAd::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.CurAdClickedAd.key)
}
inline std::string* CurAdClickedAd::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.CurAdClickedAd.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CurAdClickedAd::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.CurAdClickedAd.key)
}

// optional string value = 2;
inline bool CurAdClickedAd::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CurAdClickedAd::has_value() const {
  return _internal_has_value();
}
inline void CurAdClickedAd::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CurAdClickedAd::value() const {
  // @@protoc_insertion_point(field_get:consfea.CurAdClickedAd.value)
  return _internal_value();
}
inline void CurAdClickedAd::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:consfea.CurAdClickedAd.value)
}
inline std::string* CurAdClickedAd::mutable_value() {
  // @@protoc_insertion_point(field_mutable:consfea.CurAdClickedAd.value)
  return _internal_mutable_value();
}
inline const std::string& CurAdClickedAd::_internal_value() const {
  return value_.Get();
}
inline void CurAdClickedAd::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CurAdClickedAd::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.CurAdClickedAd.value)
}
inline void CurAdClickedAd::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.CurAdClickedAd.value)
}
inline void CurAdClickedAd::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.CurAdClickedAd.value)
}
inline std::string* CurAdClickedAd::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CurAdClickedAd::release_value() {
  // @@protoc_insertion_point(field_release:consfea.CurAdClickedAd.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CurAdClickedAd::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.CurAdClickedAd.value)
}
inline std::string* CurAdClickedAd::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.CurAdClickedAd.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CurAdClickedAd::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.CurAdClickedAd.value)
}

// -------------------------------------------------------------------

// CurAdHistoryAd

// optional string key = 1;
inline bool CurAdHistoryAd::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CurAdHistoryAd::has_key() const {
  return _internal_has_key();
}
inline void CurAdHistoryAd::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CurAdHistoryAd::key() const {
  // @@protoc_insertion_point(field_get:consfea.CurAdHistoryAd.key)
  return _internal_key();
}
inline void CurAdHistoryAd::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:consfea.CurAdHistoryAd.key)
}
inline std::string* CurAdHistoryAd::mutable_key() {
  // @@protoc_insertion_point(field_mutable:consfea.CurAdHistoryAd.key)
  return _internal_mutable_key();
}
inline const std::string& CurAdHistoryAd::_internal_key() const {
  return key_.Get();
}
inline void CurAdHistoryAd::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CurAdHistoryAd::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.CurAdHistoryAd.key)
}
inline void CurAdHistoryAd::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.CurAdHistoryAd.key)
}
inline void CurAdHistoryAd::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.CurAdHistoryAd.key)
}
inline std::string* CurAdHistoryAd::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CurAdHistoryAd::release_key() {
  // @@protoc_insertion_point(field_release:consfea.CurAdHistoryAd.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CurAdHistoryAd::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.CurAdHistoryAd.key)
}
inline std::string* CurAdHistoryAd::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.CurAdHistoryAd.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CurAdHistoryAd::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.CurAdHistoryAd.key)
}

// repeated string value = 2;
inline int CurAdHistoryAd::_internal_value_size() const {
  return value_.size();
}
inline int CurAdHistoryAd::value_size() const {
  return _internal_value_size();
}
inline void CurAdHistoryAd::clear_value() {
  value_.Clear();
}
inline std::string* CurAdHistoryAd::add_value() {
  // @@protoc_insertion_point(field_add_mutable:consfea.CurAdHistoryAd.value)
  return _internal_add_value();
}
inline const std::string& CurAdHistoryAd::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& CurAdHistoryAd::value(int index) const {
  // @@protoc_insertion_point(field_get:consfea.CurAdHistoryAd.value)
  return _internal_value(index);
}
inline std::string* CurAdHistoryAd::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.CurAdHistoryAd.value)
  return value_.Mutable(index);
}
inline void CurAdHistoryAd::set_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:consfea.CurAdHistoryAd.value)
  value_.Mutable(index)->assign(value);
}
inline void CurAdHistoryAd::set_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:consfea.CurAdHistoryAd.value)
  value_.Mutable(index)->assign(std::move(value));
}
inline void CurAdHistoryAd::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:consfea.CurAdHistoryAd.value)
}
inline void CurAdHistoryAd::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:consfea.CurAdHistoryAd.value)
}
inline std::string* CurAdHistoryAd::_internal_add_value() {
  return value_.Add();
}
inline void CurAdHistoryAd::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:consfea.CurAdHistoryAd.value)
}
inline void CurAdHistoryAd::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:consfea.CurAdHistoryAd.value)
}
inline void CurAdHistoryAd::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:consfea.CurAdHistoryAd.value)
}
inline void CurAdHistoryAd::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:consfea.CurAdHistoryAd.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CurAdHistoryAd::value() const {
  // @@protoc_insertion_point(field_list:consfea.CurAdHistoryAd.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CurAdHistoryAd::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:consfea.CurAdHistoryAd.value)
  return &value_;
}

// -------------------------------------------------------------------

// LastClickQueryTermMatchTitleNumAd

// optional string key = 1;
inline bool LastClickQueryTermMatchTitleNumAd::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LastClickQueryTermMatchTitleNumAd::has_key() const {
  return _internal_has_key();
}
inline void LastClickQueryTermMatchTitleNumAd::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LastClickQueryTermMatchTitleNumAd::key() const {
  // @@protoc_insertion_point(field_get:consfea.LastClickQueryTermMatchTitleNumAd.key)
  return _internal_key();
}
inline void LastClickQueryTermMatchTitleNumAd::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:consfea.LastClickQueryTermMatchTitleNumAd.key)
}
inline std::string* LastClickQueryTermMatchTitleNumAd::mutable_key() {
  // @@protoc_insertion_point(field_mutable:consfea.LastClickQueryTermMatchTitleNumAd.key)
  return _internal_mutable_key();
}
inline const std::string& LastClickQueryTermMatchTitleNumAd::_internal_key() const {
  return key_.Get();
}
inline void LastClickQueryTermMatchTitleNumAd::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LastClickQueryTermMatchTitleNumAd::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.LastClickQueryTermMatchTitleNumAd.key)
}
inline void LastClickQueryTermMatchTitleNumAd::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.LastClickQueryTermMatchTitleNumAd.key)
}
inline void LastClickQueryTermMatchTitleNumAd::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.LastClickQueryTermMatchTitleNumAd.key)
}
inline std::string* LastClickQueryTermMatchTitleNumAd::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LastClickQueryTermMatchTitleNumAd::release_key() {
  // @@protoc_insertion_point(field_release:consfea.LastClickQueryTermMatchTitleNumAd.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LastClickQueryTermMatchTitleNumAd::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.LastClickQueryTermMatchTitleNumAd.key)
}
inline std::string* LastClickQueryTermMatchTitleNumAd::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.LastClickQueryTermMatchTitleNumAd.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LastClickQueryTermMatchTitleNumAd::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.LastClickQueryTermMatchTitleNumAd.key)
}

// optional uint32 value = 2;
inline bool LastClickQueryTermMatchTitleNumAd::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LastClickQueryTermMatchTitleNumAd::has_value() const {
  return _internal_has_value();
}
inline void LastClickQueryTermMatchTitleNumAd::clear_value() {
  value_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LastClickQueryTermMatchTitleNumAd::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LastClickQueryTermMatchTitleNumAd::value() const {
  // @@protoc_insertion_point(field_get:consfea.LastClickQueryTermMatchTitleNumAd.value)
  return _internal_value();
}
inline void LastClickQueryTermMatchTitleNumAd::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void LastClickQueryTermMatchTitleNumAd::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:consfea.LastClickQueryTermMatchTitleNumAd.value)
}

// -------------------------------------------------------------------

// Pre1BidwordAd

// optional string key = 1;
inline bool Pre1BidwordAd::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pre1BidwordAd::has_key() const {
  return _internal_has_key();
}
inline void Pre1BidwordAd::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Pre1BidwordAd::key() const {
  // @@protoc_insertion_point(field_get:consfea.Pre1BidwordAd.key)
  return _internal_key();
}
inline void Pre1BidwordAd::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:consfea.Pre1BidwordAd.key)
}
inline std::string* Pre1BidwordAd::mutable_key() {
  // @@protoc_insertion_point(field_mutable:consfea.Pre1BidwordAd.key)
  return _internal_mutable_key();
}
inline const std::string& Pre1BidwordAd::_internal_key() const {
  return key_.Get();
}
inline void Pre1BidwordAd::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pre1BidwordAd::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.Pre1BidwordAd.key)
}
inline void Pre1BidwordAd::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.Pre1BidwordAd.key)
}
inline void Pre1BidwordAd::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.Pre1BidwordAd.key)
}
inline std::string* Pre1BidwordAd::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pre1BidwordAd::release_key() {
  // @@protoc_insertion_point(field_release:consfea.Pre1BidwordAd.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pre1BidwordAd::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.Pre1BidwordAd.key)
}
inline std::string* Pre1BidwordAd::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.Pre1BidwordAd.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pre1BidwordAd::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.Pre1BidwordAd.key)
}

// optional string pre1_bidword_has_clk_value = 2;
inline bool Pre1BidwordAd::_internal_has_pre1_bidword_has_clk_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pre1BidwordAd::has_pre1_bidword_has_clk_value() const {
  return _internal_has_pre1_bidword_has_clk_value();
}
inline void Pre1BidwordAd::clear_pre1_bidword_has_clk_value() {
  pre1_bidword_has_clk_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Pre1BidwordAd::pre1_bidword_has_clk_value() const {
  // @@protoc_insertion_point(field_get:consfea.Pre1BidwordAd.pre1_bidword_has_clk_value)
  return _internal_pre1_bidword_has_clk_value();
}
inline void Pre1BidwordAd::set_pre1_bidword_has_clk_value(const std::string& value) {
  _internal_set_pre1_bidword_has_clk_value(value);
  // @@protoc_insertion_point(field_set:consfea.Pre1BidwordAd.pre1_bidword_has_clk_value)
}
inline std::string* Pre1BidwordAd::mutable_pre1_bidword_has_clk_value() {
  // @@protoc_insertion_point(field_mutable:consfea.Pre1BidwordAd.pre1_bidword_has_clk_value)
  return _internal_mutable_pre1_bidword_has_clk_value();
}
inline const std::string& Pre1BidwordAd::_internal_pre1_bidword_has_clk_value() const {
  return pre1_bidword_has_clk_value_.Get();
}
inline void Pre1BidwordAd::_internal_set_pre1_bidword_has_clk_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pre1_bidword_has_clk_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pre1BidwordAd::set_pre1_bidword_has_clk_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pre1_bidword_has_clk_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.Pre1BidwordAd.pre1_bidword_has_clk_value)
}
inline void Pre1BidwordAd::set_pre1_bidword_has_clk_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pre1_bidword_has_clk_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.Pre1BidwordAd.pre1_bidword_has_clk_value)
}
inline void Pre1BidwordAd::set_pre1_bidword_has_clk_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pre1_bidword_has_clk_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.Pre1BidwordAd.pre1_bidword_has_clk_value)
}
inline std::string* Pre1BidwordAd::_internal_mutable_pre1_bidword_has_clk_value() {
  _has_bits_[0] |= 0x00000002u;
  return pre1_bidword_has_clk_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pre1BidwordAd::release_pre1_bidword_has_clk_value() {
  // @@protoc_insertion_point(field_release:consfea.Pre1BidwordAd.pre1_bidword_has_clk_value)
  if (!_internal_has_pre1_bidword_has_clk_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pre1_bidword_has_clk_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pre1BidwordAd::set_allocated_pre1_bidword_has_clk_value(std::string* pre1_bidword_has_clk_value) {
  if (pre1_bidword_has_clk_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pre1_bidword_has_clk_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre1_bidword_has_clk_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.Pre1BidwordAd.pre1_bidword_has_clk_value)
}
inline std::string* Pre1BidwordAd::unsafe_arena_release_pre1_bidword_has_clk_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.Pre1BidwordAd.pre1_bidword_has_clk_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return pre1_bidword_has_clk_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pre1BidwordAd::unsafe_arena_set_allocated_pre1_bidword_has_clk_value(
    std::string* pre1_bidword_has_clk_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pre1_bidword_has_clk_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pre1_bidword_has_clk_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pre1_bidword_has_clk_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.Pre1BidwordAd.pre1_bidword_has_clk_value)
}

// optional string bidword_text_value = 3;
inline bool Pre1BidwordAd::_internal_has_bidword_text_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Pre1BidwordAd::has_bidword_text_value() const {
  return _internal_has_bidword_text_value();
}
inline void Pre1BidwordAd::clear_bidword_text_value() {
  bidword_text_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Pre1BidwordAd::bidword_text_value() const {
  // @@protoc_insertion_point(field_get:consfea.Pre1BidwordAd.bidword_text_value)
  return _internal_bidword_text_value();
}
inline void Pre1BidwordAd::set_bidword_text_value(const std::string& value) {
  _internal_set_bidword_text_value(value);
  // @@protoc_insertion_point(field_set:consfea.Pre1BidwordAd.bidword_text_value)
}
inline std::string* Pre1BidwordAd::mutable_bidword_text_value() {
  // @@protoc_insertion_point(field_mutable:consfea.Pre1BidwordAd.bidword_text_value)
  return _internal_mutable_bidword_text_value();
}
inline const std::string& Pre1BidwordAd::_internal_bidword_text_value() const {
  return bidword_text_value_.Get();
}
inline void Pre1BidwordAd::_internal_set_bidword_text_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  bidword_text_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pre1BidwordAd::set_bidword_text_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  bidword_text_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.Pre1BidwordAd.bidword_text_value)
}
inline void Pre1BidwordAd::set_bidword_text_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  bidword_text_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.Pre1BidwordAd.bidword_text_value)
}
inline void Pre1BidwordAd::set_bidword_text_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  bidword_text_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.Pre1BidwordAd.bidword_text_value)
}
inline std::string* Pre1BidwordAd::_internal_mutable_bidword_text_value() {
  _has_bits_[0] |= 0x00000004u;
  return bidword_text_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pre1BidwordAd::release_bidword_text_value() {
  // @@protoc_insertion_point(field_release:consfea.Pre1BidwordAd.bidword_text_value)
  if (!_internal_has_bidword_text_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return bidword_text_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pre1BidwordAd::set_allocated_bidword_text_value(std::string* bidword_text_value) {
  if (bidword_text_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bidword_text_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bidword_text_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.Pre1BidwordAd.bidword_text_value)
}
inline std::string* Pre1BidwordAd::unsafe_arena_release_bidword_text_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.Pre1BidwordAd.bidword_text_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return bidword_text_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pre1BidwordAd::unsafe_arena_set_allocated_bidword_text_value(
    std::string* bidword_text_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bidword_text_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bidword_text_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bidword_text_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.Pre1BidwordAd.bidword_text_value)
}

// -------------------------------------------------------------------

// TopClickQueryTermAd

// optional string key = 1;
inline bool TopClickQueryTermAd::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TopClickQueryTermAd::has_key() const {
  return _internal_has_key();
}
inline void TopClickQueryTermAd::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TopClickQueryTermAd::key() const {
  // @@protoc_insertion_point(field_get:consfea.TopClickQueryTermAd.key)
  return _internal_key();
}
inline void TopClickQueryTermAd::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:consfea.TopClickQueryTermAd.key)
}
inline std::string* TopClickQueryTermAd::mutable_key() {
  // @@protoc_insertion_point(field_mutable:consfea.TopClickQueryTermAd.key)
  return _internal_mutable_key();
}
inline const std::string& TopClickQueryTermAd::_internal_key() const {
  return key_.Get();
}
inline void TopClickQueryTermAd::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopClickQueryTermAd::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.TopClickQueryTermAd.key)
}
inline void TopClickQueryTermAd::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.TopClickQueryTermAd.key)
}
inline void TopClickQueryTermAd::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.TopClickQueryTermAd.key)
}
inline std::string* TopClickQueryTermAd::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopClickQueryTermAd::release_key() {
  // @@protoc_insertion_point(field_release:consfea.TopClickQueryTermAd.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TopClickQueryTermAd::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.TopClickQueryTermAd.key)
}
inline std::string* TopClickQueryTermAd::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.TopClickQueryTermAd.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TopClickQueryTermAd::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.TopClickQueryTermAd.key)
}

// optional uint32 top_click_query_term_num_value = 2;
inline bool TopClickQueryTermAd::_internal_has_top_click_query_term_num_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TopClickQueryTermAd::has_top_click_query_term_num_value() const {
  return _internal_has_top_click_query_term_num_value();
}
inline void TopClickQueryTermAd::clear_top_click_query_term_num_value() {
  top_click_query_term_num_value_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopClickQueryTermAd::_internal_top_click_query_term_num_value() const {
  return top_click_query_term_num_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopClickQueryTermAd::top_click_query_term_num_value() const {
  // @@protoc_insertion_point(field_get:consfea.TopClickQueryTermAd.top_click_query_term_num_value)
  return _internal_top_click_query_term_num_value();
}
inline void TopClickQueryTermAd::_internal_set_top_click_query_term_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  top_click_query_term_num_value_ = value;
}
inline void TopClickQueryTermAd::set_top_click_query_term_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top_click_query_term_num_value(value);
  // @@protoc_insertion_point(field_set:consfea.TopClickQueryTermAd.top_click_query_term_num_value)
}

// optional uint32 top_click_query_term_match_bidword_num_value = 3;
inline bool TopClickQueryTermAd::_internal_has_top_click_query_term_match_bidword_num_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TopClickQueryTermAd::has_top_click_query_term_match_bidword_num_value() const {
  return _internal_has_top_click_query_term_match_bidword_num_value();
}
inline void TopClickQueryTermAd::clear_top_click_query_term_match_bidword_num_value() {
  top_click_query_term_match_bidword_num_value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopClickQueryTermAd::_internal_top_click_query_term_match_bidword_num_value() const {
  return top_click_query_term_match_bidword_num_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TopClickQueryTermAd::top_click_query_term_match_bidword_num_value() const {
  // @@protoc_insertion_point(field_get:consfea.TopClickQueryTermAd.top_click_query_term_match_bidword_num_value)
  return _internal_top_click_query_term_match_bidword_num_value();
}
inline void TopClickQueryTermAd::_internal_set_top_click_query_term_match_bidword_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  top_click_query_term_match_bidword_num_value_ = value;
}
inline void TopClickQueryTermAd::set_top_click_query_term_match_bidword_num_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top_click_query_term_match_bidword_num_value(value);
  // @@protoc_insertion_point(field_set:consfea.TopClickQueryTermAd.top_click_query_term_match_bidword_num_value)
}

// -------------------------------------------------------------------

// CurAdStyleHistoryAd

// optional string key = 1;
inline bool CurAdStyleHistoryAd::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CurAdStyleHistoryAd::has_key() const {
  return _internal_has_key();
}
inline void CurAdStyleHistoryAd::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CurAdStyleHistoryAd::key() const {
  // @@protoc_insertion_point(field_get:consfea.CurAdStyleHistoryAd.key)
  return _internal_key();
}
inline void CurAdStyleHistoryAd::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:consfea.CurAdStyleHistoryAd.key)
}
inline std::string* CurAdStyleHistoryAd::mutable_key() {
  // @@protoc_insertion_point(field_mutable:consfea.CurAdStyleHistoryAd.key)
  return _internal_mutable_key();
}
inline const std::string& CurAdStyleHistoryAd::_internal_key() const {
  return key_.Get();
}
inline void CurAdStyleHistoryAd::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CurAdStyleHistoryAd::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.CurAdStyleHistoryAd.key)
}
inline void CurAdStyleHistoryAd::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.CurAdStyleHistoryAd.key)
}
inline void CurAdStyleHistoryAd::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.CurAdStyleHistoryAd.key)
}
inline std::string* CurAdStyleHistoryAd::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CurAdStyleHistoryAd::release_key() {
  // @@protoc_insertion_point(field_release:consfea.CurAdStyleHistoryAd.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CurAdStyleHistoryAd::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.CurAdStyleHistoryAd.key)
}
inline std::string* CurAdStyleHistoryAd::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.CurAdStyleHistoryAd.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CurAdStyleHistoryAd::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.CurAdStyleHistoryAd.key)
}

// repeated string value = 2;
inline int CurAdStyleHistoryAd::_internal_value_size() const {
  return value_.size();
}
inline int CurAdStyleHistoryAd::value_size() const {
  return _internal_value_size();
}
inline void CurAdStyleHistoryAd::clear_value() {
  value_.Clear();
}
inline std::string* CurAdStyleHistoryAd::add_value() {
  // @@protoc_insertion_point(field_add_mutable:consfea.CurAdStyleHistoryAd.value)
  return _internal_add_value();
}
inline const std::string& CurAdStyleHistoryAd::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& CurAdStyleHistoryAd::value(int index) const {
  // @@protoc_insertion_point(field_get:consfea.CurAdStyleHistoryAd.value)
  return _internal_value(index);
}
inline std::string* CurAdStyleHistoryAd::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.CurAdStyleHistoryAd.value)
  return value_.Mutable(index);
}
inline void CurAdStyleHistoryAd::set_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:consfea.CurAdStyleHistoryAd.value)
  value_.Mutable(index)->assign(value);
}
inline void CurAdStyleHistoryAd::set_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:consfea.CurAdStyleHistoryAd.value)
  value_.Mutable(index)->assign(std::move(value));
}
inline void CurAdStyleHistoryAd::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:consfea.CurAdStyleHistoryAd.value)
}
inline void CurAdStyleHistoryAd::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:consfea.CurAdStyleHistoryAd.value)
}
inline std::string* CurAdStyleHistoryAd::_internal_add_value() {
  return value_.Add();
}
inline void CurAdStyleHistoryAd::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:consfea.CurAdStyleHistoryAd.value)
}
inline void CurAdStyleHistoryAd::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:consfea.CurAdStyleHistoryAd.value)
}
inline void CurAdStyleHistoryAd::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:consfea.CurAdStyleHistoryAd.value)
}
inline void CurAdStyleHistoryAd::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:consfea.CurAdStyleHistoryAd.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CurAdStyleHistoryAd::value() const {
  // @@protoc_insertion_point(field_list:consfea.CurAdStyleHistoryAd.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CurAdStyleHistoryAd::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:consfea.CurAdStyleHistoryAd.value)
  return &value_;
}

// -------------------------------------------------------------------

// CurAdComponentHistoryAd

// optional string key = 1;
inline bool CurAdComponentHistoryAd::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CurAdComponentHistoryAd::has_key() const {
  return _internal_has_key();
}
inline void CurAdComponentHistoryAd::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CurAdComponentHistoryAd::key() const {
  // @@protoc_insertion_point(field_get:consfea.CurAdComponentHistoryAd.key)
  return _internal_key();
}
inline void CurAdComponentHistoryAd::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:consfea.CurAdComponentHistoryAd.key)
}
inline std::string* CurAdComponentHistoryAd::mutable_key() {
  // @@protoc_insertion_point(field_mutable:consfea.CurAdComponentHistoryAd.key)
  return _internal_mutable_key();
}
inline const std::string& CurAdComponentHistoryAd::_internal_key() const {
  return key_.Get();
}
inline void CurAdComponentHistoryAd::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CurAdComponentHistoryAd::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.CurAdComponentHistoryAd.key)
}
inline void CurAdComponentHistoryAd::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.CurAdComponentHistoryAd.key)
}
inline void CurAdComponentHistoryAd::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.CurAdComponentHistoryAd.key)
}
inline std::string* CurAdComponentHistoryAd::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CurAdComponentHistoryAd::release_key() {
  // @@protoc_insertion_point(field_release:consfea.CurAdComponentHistoryAd.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CurAdComponentHistoryAd::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.CurAdComponentHistoryAd.key)
}
inline std::string* CurAdComponentHistoryAd::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.CurAdComponentHistoryAd.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CurAdComponentHistoryAd::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.CurAdComponentHistoryAd.key)
}

// repeated string value = 2;
inline int CurAdComponentHistoryAd::_internal_value_size() const {
  return value_.size();
}
inline int CurAdComponentHistoryAd::value_size() const {
  return _internal_value_size();
}
inline void CurAdComponentHistoryAd::clear_value() {
  value_.Clear();
}
inline std::string* CurAdComponentHistoryAd::add_value() {
  // @@protoc_insertion_point(field_add_mutable:consfea.CurAdComponentHistoryAd.value)
  return _internal_add_value();
}
inline const std::string& CurAdComponentHistoryAd::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& CurAdComponentHistoryAd::value(int index) const {
  // @@protoc_insertion_point(field_get:consfea.CurAdComponentHistoryAd.value)
  return _internal_value(index);
}
inline std::string* CurAdComponentHistoryAd::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.CurAdComponentHistoryAd.value)
  return value_.Mutable(index);
}
inline void CurAdComponentHistoryAd::set_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:consfea.CurAdComponentHistoryAd.value)
  value_.Mutable(index)->assign(value);
}
inline void CurAdComponentHistoryAd::set_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:consfea.CurAdComponentHistoryAd.value)
  value_.Mutable(index)->assign(std::move(value));
}
inline void CurAdComponentHistoryAd::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:consfea.CurAdComponentHistoryAd.value)
}
inline void CurAdComponentHistoryAd::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:consfea.CurAdComponentHistoryAd.value)
}
inline std::string* CurAdComponentHistoryAd::_internal_add_value() {
  return value_.Add();
}
inline void CurAdComponentHistoryAd::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:consfea.CurAdComponentHistoryAd.value)
}
inline void CurAdComponentHistoryAd::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:consfea.CurAdComponentHistoryAd.value)
}
inline void CurAdComponentHistoryAd::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:consfea.CurAdComponentHistoryAd.value)
}
inline void CurAdComponentHistoryAd::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:consfea.CurAdComponentHistoryAd.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CurAdComponentHistoryAd::value() const {
  // @@protoc_insertion_point(field_list:consfea.CurAdComponentHistoryAd.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CurAdComponentHistoryAd::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:consfea.CurAdComponentHistoryAd.value)
  return &value_;
}

// -------------------------------------------------------------------

// ConsFeaQuery

// repeated string pre5_query_char = 1;
inline int ConsFeaQuery::_internal_pre5_query_char_size() const {
  return pre5_query_char_.size();
}
inline int ConsFeaQuery::pre5_query_char_size() const {
  return _internal_pre5_query_char_size();
}
inline void ConsFeaQuery::clear_pre5_query_char() {
  pre5_query_char_.Clear();
}
inline std::string* ConsFeaQuery::add_pre5_query_char() {
  // @@protoc_insertion_point(field_add_mutable:consfea.ConsFeaQuery.pre5_query_char)
  return _internal_add_pre5_query_char();
}
inline const std::string& ConsFeaQuery::_internal_pre5_query_char(int index) const {
  return pre5_query_char_.Get(index);
}
inline const std::string& ConsFeaQuery::pre5_query_char(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.pre5_query_char)
  return _internal_pre5_query_char(index);
}
inline std::string* ConsFeaQuery::mutable_pre5_query_char(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.pre5_query_char)
  return pre5_query_char_.Mutable(index);
}
inline void ConsFeaQuery::set_pre5_query_char(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.pre5_query_char)
  pre5_query_char_.Mutable(index)->assign(value);
}
inline void ConsFeaQuery::set_pre5_query_char(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.pre5_query_char)
  pre5_query_char_.Mutable(index)->assign(std::move(value));
}
inline void ConsFeaQuery::set_pre5_query_char(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pre5_query_char_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.pre5_query_char)
}
inline void ConsFeaQuery::set_pre5_query_char(int index, const char* value, size_t size) {
  pre5_query_char_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.pre5_query_char)
}
inline std::string* ConsFeaQuery::_internal_add_pre5_query_char() {
  return pre5_query_char_.Add();
}
inline void ConsFeaQuery::add_pre5_query_char(const std::string& value) {
  pre5_query_char_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.pre5_query_char)
}
inline void ConsFeaQuery::add_pre5_query_char(std::string&& value) {
  pre5_query_char_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.pre5_query_char)
}
inline void ConsFeaQuery::add_pre5_query_char(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pre5_query_char_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:consfea.ConsFeaQuery.pre5_query_char)
}
inline void ConsFeaQuery::add_pre5_query_char(const char* value, size_t size) {
  pre5_query_char_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:consfea.ConsFeaQuery.pre5_query_char)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConsFeaQuery::pre5_query_char() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaQuery.pre5_query_char)
  return pre5_query_char_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConsFeaQuery::mutable_pre5_query_char() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaQuery.pre5_query_char)
  return &pre5_query_char_;
}

// optional string pre1_query = 2;
inline bool ConsFeaQuery::_internal_has_pre1_query() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConsFeaQuery::has_pre1_query() const {
  return _internal_has_pre1_query();
}
inline void ConsFeaQuery::clear_pre1_query() {
  pre1_query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConsFeaQuery::pre1_query() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.pre1_query)
  return _internal_pre1_query();
}
inline void ConsFeaQuery::set_pre1_query(const std::string& value) {
  _internal_set_pre1_query(value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.pre1_query)
}
inline std::string* ConsFeaQuery::mutable_pre1_query() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.pre1_query)
  return _internal_mutable_pre1_query();
}
inline const std::string& ConsFeaQuery::_internal_pre1_query() const {
  return pre1_query_.Get();
}
inline void ConsFeaQuery::_internal_set_pre1_query(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pre1_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConsFeaQuery::set_pre1_query(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pre1_query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.ConsFeaQuery.pre1_query)
}
inline void ConsFeaQuery::set_pre1_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pre1_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.pre1_query)
}
inline void ConsFeaQuery::set_pre1_query(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pre1_query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.pre1_query)
}
inline std::string* ConsFeaQuery::_internal_mutable_pre1_query() {
  _has_bits_[0] |= 0x00000001u;
  return pre1_query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConsFeaQuery::release_pre1_query() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaQuery.pre1_query)
  if (!_internal_has_pre1_query()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pre1_query_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConsFeaQuery::set_allocated_pre1_query(std::string* pre1_query) {
  if (pre1_query != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pre1_query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre1_query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaQuery.pre1_query)
}
inline std::string* ConsFeaQuery::unsafe_arena_release_pre1_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.ConsFeaQuery.pre1_query)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return pre1_query_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConsFeaQuery::unsafe_arena_set_allocated_pre1_query(
    std::string* pre1_query) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pre1_query != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pre1_query_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pre1_query, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaQuery.pre1_query)
}

// optional .consfea.PreAndCurQuery pre_and_cur_query = 3;
inline bool ConsFeaQuery::_internal_has_pre_and_cur_query() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || pre_and_cur_query_ != nullptr);
  return value;
}
inline bool ConsFeaQuery::has_pre_and_cur_query() const {
  return _internal_has_pre_and_cur_query();
}
inline void ConsFeaQuery::clear_pre_and_cur_query() {
  if (pre_and_cur_query_ != nullptr) pre_and_cur_query_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::consfea::PreAndCurQuery& ConsFeaQuery::_internal_pre_and_cur_query() const {
  const ::consfea::PreAndCurQuery* p = pre_and_cur_query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::consfea::PreAndCurQuery*>(
      &::consfea::_PreAndCurQuery_default_instance_);
}
inline const ::consfea::PreAndCurQuery& ConsFeaQuery::pre_and_cur_query() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.pre_and_cur_query)
  return _internal_pre_and_cur_query();
}
inline void ConsFeaQuery::unsafe_arena_set_allocated_pre_and_cur_query(
    ::consfea::PreAndCurQuery* pre_and_cur_query) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pre_and_cur_query_);
  }
  pre_and_cur_query_ = pre_and_cur_query;
  if (pre_and_cur_query) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaQuery.pre_and_cur_query)
}
inline ::consfea::PreAndCurQuery* ConsFeaQuery::release_pre_and_cur_query() {
  auto temp = unsafe_arena_release_pre_and_cur_query();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::consfea::PreAndCurQuery* ConsFeaQuery::unsafe_arena_release_pre_and_cur_query() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaQuery.pre_and_cur_query)
  _has_bits_[0] &= ~0x00000080u;
  ::consfea::PreAndCurQuery* temp = pre_and_cur_query_;
  pre_and_cur_query_ = nullptr;
  return temp;
}
inline ::consfea::PreAndCurQuery* ConsFeaQuery::_internal_mutable_pre_and_cur_query() {
  _has_bits_[0] |= 0x00000080u;
  if (pre_and_cur_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::consfea::PreAndCurQuery>(GetArena());
    pre_and_cur_query_ = p;
  }
  return pre_and_cur_query_;
}
inline ::consfea::PreAndCurQuery* ConsFeaQuery::mutable_pre_and_cur_query() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.pre_and_cur_query)
  return _internal_mutable_pre_and_cur_query();
}
inline void ConsFeaQuery::set_allocated_pre_and_cur_query(::consfea::PreAndCurQuery* pre_and_cur_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pre_and_cur_query_;
  }
  if (pre_and_cur_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pre_and_cur_query);
    if (message_arena != submessage_arena) {
      pre_and_cur_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pre_and_cur_query, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  pre_and_cur_query_ = pre_and_cur_query;
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaQuery.pre_and_cur_query)
}

// optional string pre1_ad_clk_id = 4;
inline bool ConsFeaQuery::_internal_has_pre1_ad_clk_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConsFeaQuery::has_pre1_ad_clk_id() const {
  return _internal_has_pre1_ad_clk_id();
}
inline void ConsFeaQuery::clear_pre1_ad_clk_id() {
  pre1_ad_clk_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConsFeaQuery::pre1_ad_clk_id() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.pre1_ad_clk_id)
  return _internal_pre1_ad_clk_id();
}
inline void ConsFeaQuery::set_pre1_ad_clk_id(const std::string& value) {
  _internal_set_pre1_ad_clk_id(value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.pre1_ad_clk_id)
}
inline std::string* ConsFeaQuery::mutable_pre1_ad_clk_id() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.pre1_ad_clk_id)
  return _internal_mutable_pre1_ad_clk_id();
}
inline const std::string& ConsFeaQuery::_internal_pre1_ad_clk_id() const {
  return pre1_ad_clk_id_.Get();
}
inline void ConsFeaQuery::_internal_set_pre1_ad_clk_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pre1_ad_clk_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConsFeaQuery::set_pre1_ad_clk_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pre1_ad_clk_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.ConsFeaQuery.pre1_ad_clk_id)
}
inline void ConsFeaQuery::set_pre1_ad_clk_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pre1_ad_clk_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.pre1_ad_clk_id)
}
inline void ConsFeaQuery::set_pre1_ad_clk_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pre1_ad_clk_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.pre1_ad_clk_id)
}
inline std::string* ConsFeaQuery::_internal_mutable_pre1_ad_clk_id() {
  _has_bits_[0] |= 0x00000002u;
  return pre1_ad_clk_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConsFeaQuery::release_pre1_ad_clk_id() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaQuery.pre1_ad_clk_id)
  if (!_internal_has_pre1_ad_clk_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pre1_ad_clk_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConsFeaQuery::set_allocated_pre1_ad_clk_id(std::string* pre1_ad_clk_id) {
  if (pre1_ad_clk_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pre1_ad_clk_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre1_ad_clk_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaQuery.pre1_ad_clk_id)
}
inline std::string* ConsFeaQuery::unsafe_arena_release_pre1_ad_clk_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.ConsFeaQuery.pre1_ad_clk_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return pre1_ad_clk_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConsFeaQuery::unsafe_arena_set_allocated_pre1_ad_clk_id(
    std::string* pre1_ad_clk_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pre1_ad_clk_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pre1_ad_clk_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pre1_ad_clk_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaQuery.pre1_ad_clk_id)
}

// optional string pre1_ad_clk_span = 5;
inline bool ConsFeaQuery::_internal_has_pre1_ad_clk_span() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConsFeaQuery::has_pre1_ad_clk_span() const {
  return _internal_has_pre1_ad_clk_span();
}
inline void ConsFeaQuery::clear_pre1_ad_clk_span() {
  pre1_ad_clk_span_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConsFeaQuery::pre1_ad_clk_span() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.pre1_ad_clk_span)
  return _internal_pre1_ad_clk_span();
}
inline void ConsFeaQuery::set_pre1_ad_clk_span(const std::string& value) {
  _internal_set_pre1_ad_clk_span(value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.pre1_ad_clk_span)
}
inline std::string* ConsFeaQuery::mutable_pre1_ad_clk_span() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.pre1_ad_clk_span)
  return _internal_mutable_pre1_ad_clk_span();
}
inline const std::string& ConsFeaQuery::_internal_pre1_ad_clk_span() const {
  return pre1_ad_clk_span_.Get();
}
inline void ConsFeaQuery::_internal_set_pre1_ad_clk_span(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  pre1_ad_clk_span_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConsFeaQuery::set_pre1_ad_clk_span(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  pre1_ad_clk_span_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.ConsFeaQuery.pre1_ad_clk_span)
}
inline void ConsFeaQuery::set_pre1_ad_clk_span(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  pre1_ad_clk_span_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.pre1_ad_clk_span)
}
inline void ConsFeaQuery::set_pre1_ad_clk_span(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  pre1_ad_clk_span_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.pre1_ad_clk_span)
}
inline std::string* ConsFeaQuery::_internal_mutable_pre1_ad_clk_span() {
  _has_bits_[0] |= 0x00000004u;
  return pre1_ad_clk_span_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConsFeaQuery::release_pre1_ad_clk_span() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaQuery.pre1_ad_clk_span)
  if (!_internal_has_pre1_ad_clk_span()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return pre1_ad_clk_span_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConsFeaQuery::set_allocated_pre1_ad_clk_span(std::string* pre1_ad_clk_span) {
  if (pre1_ad_clk_span != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pre1_ad_clk_span_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre1_ad_clk_span,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaQuery.pre1_ad_clk_span)
}
inline std::string* ConsFeaQuery::unsafe_arena_release_pre1_ad_clk_span() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.ConsFeaQuery.pre1_ad_clk_span)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return pre1_ad_clk_span_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConsFeaQuery::unsafe_arena_set_allocated_pre1_ad_clk_span(
    std::string* pre1_ad_clk_span) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pre1_ad_clk_span != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pre1_ad_clk_span_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pre1_ad_clk_span, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaQuery.pre1_ad_clk_span)
}

// optional string pre1_search_gap = 6;
inline bool ConsFeaQuery::_internal_has_pre1_search_gap() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConsFeaQuery::has_pre1_search_gap() const {
  return _internal_has_pre1_search_gap();
}
inline void ConsFeaQuery::clear_pre1_search_gap() {
  pre1_search_gap_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ConsFeaQuery::pre1_search_gap() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.pre1_search_gap)
  return _internal_pre1_search_gap();
}
inline void ConsFeaQuery::set_pre1_search_gap(const std::string& value) {
  _internal_set_pre1_search_gap(value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.pre1_search_gap)
}
inline std::string* ConsFeaQuery::mutable_pre1_search_gap() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.pre1_search_gap)
  return _internal_mutable_pre1_search_gap();
}
inline const std::string& ConsFeaQuery::_internal_pre1_search_gap() const {
  return pre1_search_gap_.Get();
}
inline void ConsFeaQuery::_internal_set_pre1_search_gap(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  pre1_search_gap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConsFeaQuery::set_pre1_search_gap(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  pre1_search_gap_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.ConsFeaQuery.pre1_search_gap)
}
inline void ConsFeaQuery::set_pre1_search_gap(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  pre1_search_gap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.pre1_search_gap)
}
inline void ConsFeaQuery::set_pre1_search_gap(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  pre1_search_gap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.pre1_search_gap)
}
inline std::string* ConsFeaQuery::_internal_mutable_pre1_search_gap() {
  _has_bits_[0] |= 0x00000008u;
  return pre1_search_gap_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConsFeaQuery::release_pre1_search_gap() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaQuery.pre1_search_gap)
  if (!_internal_has_pre1_search_gap()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return pre1_search_gap_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConsFeaQuery::set_allocated_pre1_search_gap(std::string* pre1_search_gap) {
  if (pre1_search_gap != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pre1_search_gap_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre1_search_gap,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaQuery.pre1_search_gap)
}
inline std::string* ConsFeaQuery::unsafe_arena_release_pre1_search_gap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.ConsFeaQuery.pre1_search_gap)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return pre1_search_gap_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConsFeaQuery::unsafe_arena_set_allocated_pre1_search_gap(
    std::string* pre1_search_gap) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pre1_search_gap != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pre1_search_gap_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pre1_search_gap, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaQuery.pre1_search_gap)
}

// optional .consfea.AdQueryTerm ad_query_term = 7;
inline bool ConsFeaQuery::_internal_has_ad_query_term() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || ad_query_term_ != nullptr);
  return value;
}
inline bool ConsFeaQuery::has_ad_query_term() const {
  return _internal_has_ad_query_term();
}
inline void ConsFeaQuery::clear_ad_query_term() {
  if (ad_query_term_ != nullptr) ad_query_term_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::consfea::AdQueryTerm& ConsFeaQuery::_internal_ad_query_term() const {
  const ::consfea::AdQueryTerm* p = ad_query_term_;
  return p != nullptr ? *p : *reinterpret_cast<const ::consfea::AdQueryTerm*>(
      &::consfea::_AdQueryTerm_default_instance_);
}
inline const ::consfea::AdQueryTerm& ConsFeaQuery::ad_query_term() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.ad_query_term)
  return _internal_ad_query_term();
}
inline void ConsFeaQuery::unsafe_arena_set_allocated_ad_query_term(
    ::consfea::AdQueryTerm* ad_query_term) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ad_query_term_);
  }
  ad_query_term_ = ad_query_term;
  if (ad_query_term) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaQuery.ad_query_term)
}
inline ::consfea::AdQueryTerm* ConsFeaQuery::release_ad_query_term() {
  auto temp = unsafe_arena_release_ad_query_term();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::consfea::AdQueryTerm* ConsFeaQuery::unsafe_arena_release_ad_query_term() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaQuery.ad_query_term)
  _has_bits_[0] &= ~0x00000100u;
  ::consfea::AdQueryTerm* temp = ad_query_term_;
  ad_query_term_ = nullptr;
  return temp;
}
inline ::consfea::AdQueryTerm* ConsFeaQuery::_internal_mutable_ad_query_term() {
  _has_bits_[0] |= 0x00000100u;
  if (ad_query_term_ == nullptr) {
    auto* p = CreateMaybeMessage<::consfea::AdQueryTerm>(GetArena());
    ad_query_term_ = p;
  }
  return ad_query_term_;
}
inline ::consfea::AdQueryTerm* ConsFeaQuery::mutable_ad_query_term() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.ad_query_term)
  return _internal_mutable_ad_query_term();
}
inline void ConsFeaQuery::set_allocated_ad_query_term(::consfea::AdQueryTerm* ad_query_term) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ad_query_term_;
  }
  if (ad_query_term) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ad_query_term);
    if (message_arena != submessage_arena) {
      ad_query_term = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ad_query_term, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  ad_query_term_ = ad_query_term;
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaQuery.ad_query_term)
}

// optional .consfea.AsQueryTerm as_query_term = 8;
inline bool ConsFeaQuery::_internal_has_as_query_term() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || as_query_term_ != nullptr);
  return value;
}
inline bool ConsFeaQuery::has_as_query_term() const {
  return _internal_has_as_query_term();
}
inline void ConsFeaQuery::clear_as_query_term() {
  if (as_query_term_ != nullptr) as_query_term_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::consfea::AsQueryTerm& ConsFeaQuery::_internal_as_query_term() const {
  const ::consfea::AsQueryTerm* p = as_query_term_;
  return p != nullptr ? *p : *reinterpret_cast<const ::consfea::AsQueryTerm*>(
      &::consfea::_AsQueryTerm_default_instance_);
}
inline const ::consfea::AsQueryTerm& ConsFeaQuery::as_query_term() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.as_query_term)
  return _internal_as_query_term();
}
inline void ConsFeaQuery::unsafe_arena_set_allocated_as_query_term(
    ::consfea::AsQueryTerm* as_query_term) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(as_query_term_);
  }
  as_query_term_ = as_query_term;
  if (as_query_term) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaQuery.as_query_term)
}
inline ::consfea::AsQueryTerm* ConsFeaQuery::release_as_query_term() {
  auto temp = unsafe_arena_release_as_query_term();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::consfea::AsQueryTerm* ConsFeaQuery::unsafe_arena_release_as_query_term() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaQuery.as_query_term)
  _has_bits_[0] &= ~0x00000200u;
  ::consfea::AsQueryTerm* temp = as_query_term_;
  as_query_term_ = nullptr;
  return temp;
}
inline ::consfea::AsQueryTerm* ConsFeaQuery::_internal_mutable_as_query_term() {
  _has_bits_[0] |= 0x00000200u;
  if (as_query_term_ == nullptr) {
    auto* p = CreateMaybeMessage<::consfea::AsQueryTerm>(GetArena());
    as_query_term_ = p;
  }
  return as_query_term_;
}
inline ::consfea::AsQueryTerm* ConsFeaQuery::mutable_as_query_term() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.as_query_term)
  return _internal_mutable_as_query_term();
}
inline void ConsFeaQuery::set_allocated_as_query_term(::consfea::AsQueryTerm* as_query_term) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete as_query_term_;
  }
  if (as_query_term) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(as_query_term);
    if (message_arena != submessage_arena) {
      as_query_term = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, as_query_term, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  as_query_term_ = as_query_term;
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaQuery.as_query_term)
}

// repeated uint32 ad_query_match_query = 9;
inline int ConsFeaQuery::_internal_ad_query_match_query_size() const {
  return ad_query_match_query_.size();
}
inline int ConsFeaQuery::ad_query_match_query_size() const {
  return _internal_ad_query_match_query_size();
}
inline void ConsFeaQuery::clear_ad_query_match_query() {
  ad_query_match_query_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsFeaQuery::_internal_ad_query_match_query(int index) const {
  return ad_query_match_query_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsFeaQuery::ad_query_match_query(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.ad_query_match_query)
  return _internal_ad_query_match_query(index);
}
inline void ConsFeaQuery::set_ad_query_match_query(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ad_query_match_query_.Set(index, value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.ad_query_match_query)
}
inline void ConsFeaQuery::_internal_add_ad_query_match_query(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ad_query_match_query_.Add(value);
}
inline void ConsFeaQuery::add_ad_query_match_query(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ad_query_match_query(value);
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.ad_query_match_query)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConsFeaQuery::_internal_ad_query_match_query() const {
  return ad_query_match_query_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConsFeaQuery::ad_query_match_query() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaQuery.ad_query_match_query)
  return _internal_ad_query_match_query();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConsFeaQuery::_internal_mutable_ad_query_match_query() {
  return &ad_query_match_query_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConsFeaQuery::mutable_ad_query_match_query() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaQuery.ad_query_match_query)
  return _internal_mutable_ad_query_match_query();
}

// repeated uint32 as_query_match_query = 10;
inline int ConsFeaQuery::_internal_as_query_match_query_size() const {
  return as_query_match_query_.size();
}
inline int ConsFeaQuery::as_query_match_query_size() const {
  return _internal_as_query_match_query_size();
}
inline void ConsFeaQuery::clear_as_query_match_query() {
  as_query_match_query_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsFeaQuery::_internal_as_query_match_query(int index) const {
  return as_query_match_query_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsFeaQuery::as_query_match_query(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.as_query_match_query)
  return _internal_as_query_match_query(index);
}
inline void ConsFeaQuery::set_as_query_match_query(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  as_query_match_query_.Set(index, value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.as_query_match_query)
}
inline void ConsFeaQuery::_internal_add_as_query_match_query(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  as_query_match_query_.Add(value);
}
inline void ConsFeaQuery::add_as_query_match_query(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_as_query_match_query(value);
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.as_query_match_query)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConsFeaQuery::_internal_as_query_match_query() const {
  return as_query_match_query_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConsFeaQuery::as_query_match_query() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaQuery.as_query_match_query)
  return _internal_as_query_match_query();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConsFeaQuery::_internal_mutable_as_query_match_query() {
  return &as_query_match_query_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConsFeaQuery::mutable_as_query_match_query() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaQuery.as_query_match_query)
  return _internal_mutable_as_query_match_query();
}

// repeated string history_10_query = 11;
inline int ConsFeaQuery::_internal_history_10_query_size() const {
  return history_10_query_.size();
}
inline int ConsFeaQuery::history_10_query_size() const {
  return _internal_history_10_query_size();
}
inline void ConsFeaQuery::clear_history_10_query() {
  history_10_query_.Clear();
}
inline std::string* ConsFeaQuery::add_history_10_query() {
  // @@protoc_insertion_point(field_add_mutable:consfea.ConsFeaQuery.history_10_query)
  return _internal_add_history_10_query();
}
inline const std::string& ConsFeaQuery::_internal_history_10_query(int index) const {
  return history_10_query_.Get(index);
}
inline const std::string& ConsFeaQuery::history_10_query(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.history_10_query)
  return _internal_history_10_query(index);
}
inline std::string* ConsFeaQuery::mutable_history_10_query(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.history_10_query)
  return history_10_query_.Mutable(index);
}
inline void ConsFeaQuery::set_history_10_query(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.history_10_query)
  history_10_query_.Mutable(index)->assign(value);
}
inline void ConsFeaQuery::set_history_10_query(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.history_10_query)
  history_10_query_.Mutable(index)->assign(std::move(value));
}
inline void ConsFeaQuery::set_history_10_query(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  history_10_query_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.history_10_query)
}
inline void ConsFeaQuery::set_history_10_query(int index, const char* value, size_t size) {
  history_10_query_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.history_10_query)
}
inline std::string* ConsFeaQuery::_internal_add_history_10_query() {
  return history_10_query_.Add();
}
inline void ConsFeaQuery::add_history_10_query(const std::string& value) {
  history_10_query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.history_10_query)
}
inline void ConsFeaQuery::add_history_10_query(std::string&& value) {
  history_10_query_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.history_10_query)
}
inline void ConsFeaQuery::add_history_10_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  history_10_query_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:consfea.ConsFeaQuery.history_10_query)
}
inline void ConsFeaQuery::add_history_10_query(const char* value, size_t size) {
  history_10_query_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:consfea.ConsFeaQuery.history_10_query)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConsFeaQuery::history_10_query() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaQuery.history_10_query)
  return history_10_query_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConsFeaQuery::mutable_history_10_query() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaQuery.history_10_query)
  return &history_10_query_;
}

// optional .consfea.HisQueryTerm his_query_term = 12;
inline bool ConsFeaQuery::_internal_has_his_query_term() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || his_query_term_ != nullptr);
  return value;
}
inline bool ConsFeaQuery::has_his_query_term() const {
  return _internal_has_his_query_term();
}
inline void ConsFeaQuery::clear_his_query_term() {
  if (his_query_term_ != nullptr) his_query_term_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::consfea::HisQueryTerm& ConsFeaQuery::_internal_his_query_term() const {
  const ::consfea::HisQueryTerm* p = his_query_term_;
  return p != nullptr ? *p : *reinterpret_cast<const ::consfea::HisQueryTerm*>(
      &::consfea::_HisQueryTerm_default_instance_);
}
inline const ::consfea::HisQueryTerm& ConsFeaQuery::his_query_term() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.his_query_term)
  return _internal_his_query_term();
}
inline void ConsFeaQuery::unsafe_arena_set_allocated_his_query_term(
    ::consfea::HisQueryTerm* his_query_term) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(his_query_term_);
  }
  his_query_term_ = his_query_term;
  if (his_query_term) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaQuery.his_query_term)
}
inline ::consfea::HisQueryTerm* ConsFeaQuery::release_his_query_term() {
  auto temp = unsafe_arena_release_his_query_term();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::consfea::HisQueryTerm* ConsFeaQuery::unsafe_arena_release_his_query_term() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaQuery.his_query_term)
  _has_bits_[0] &= ~0x00000400u;
  ::consfea::HisQueryTerm* temp = his_query_term_;
  his_query_term_ = nullptr;
  return temp;
}
inline ::consfea::HisQueryTerm* ConsFeaQuery::_internal_mutable_his_query_term() {
  _has_bits_[0] |= 0x00000400u;
  if (his_query_term_ == nullptr) {
    auto* p = CreateMaybeMessage<::consfea::HisQueryTerm>(GetArena());
    his_query_term_ = p;
  }
  return his_query_term_;
}
inline ::consfea::HisQueryTerm* ConsFeaQuery::mutable_his_query_term() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.his_query_term)
  return _internal_mutable_his_query_term();
}
inline void ConsFeaQuery::set_allocated_his_query_term(::consfea::HisQueryTerm* his_query_term) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete his_query_term_;
  }
  if (his_query_term) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(his_query_term);
    if (message_arena != submessage_arena) {
      his_query_term = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, his_query_term, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  his_query_term_ = his_query_term;
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaQuery.his_query_term)
}

// optional string cur_ad_clicked = 13;
inline bool ConsFeaQuery::_internal_has_cur_ad_clicked() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ConsFeaQuery::has_cur_ad_clicked() const {
  return _internal_has_cur_ad_clicked();
}
inline void ConsFeaQuery::clear_cur_ad_clicked() {
  cur_ad_clicked_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ConsFeaQuery::cur_ad_clicked() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.cur_ad_clicked)
  return _internal_cur_ad_clicked();
}
inline void ConsFeaQuery::set_cur_ad_clicked(const std::string& value) {
  _internal_set_cur_ad_clicked(value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.cur_ad_clicked)
}
inline std::string* ConsFeaQuery::mutable_cur_ad_clicked() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.cur_ad_clicked)
  return _internal_mutable_cur_ad_clicked();
}
inline const std::string& ConsFeaQuery::_internal_cur_ad_clicked() const {
  return cur_ad_clicked_.Get();
}
inline void ConsFeaQuery::_internal_set_cur_ad_clicked(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  cur_ad_clicked_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConsFeaQuery::set_cur_ad_clicked(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  cur_ad_clicked_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.ConsFeaQuery.cur_ad_clicked)
}
inline void ConsFeaQuery::set_cur_ad_clicked(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  cur_ad_clicked_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.cur_ad_clicked)
}
inline void ConsFeaQuery::set_cur_ad_clicked(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  cur_ad_clicked_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.cur_ad_clicked)
}
inline std::string* ConsFeaQuery::_internal_mutable_cur_ad_clicked() {
  _has_bits_[0] |= 0x00000010u;
  return cur_ad_clicked_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConsFeaQuery::release_cur_ad_clicked() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaQuery.cur_ad_clicked)
  if (!_internal_has_cur_ad_clicked()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return cur_ad_clicked_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConsFeaQuery::set_allocated_cur_ad_clicked(std::string* cur_ad_clicked) {
  if (cur_ad_clicked != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cur_ad_clicked_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cur_ad_clicked,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaQuery.cur_ad_clicked)
}
inline std::string* ConsFeaQuery::unsafe_arena_release_cur_ad_clicked() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.ConsFeaQuery.cur_ad_clicked)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return cur_ad_clicked_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConsFeaQuery::unsafe_arena_set_allocated_cur_ad_clicked(
    std::string* cur_ad_clicked) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cur_ad_clicked != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cur_ad_clicked_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cur_ad_clicked, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaQuery.cur_ad_clicked)
}

// repeated string cur_ad_history = 14;
inline int ConsFeaQuery::_internal_cur_ad_history_size() const {
  return cur_ad_history_.size();
}
inline int ConsFeaQuery::cur_ad_history_size() const {
  return _internal_cur_ad_history_size();
}
inline void ConsFeaQuery::clear_cur_ad_history() {
  cur_ad_history_.Clear();
}
inline std::string* ConsFeaQuery::add_cur_ad_history() {
  // @@protoc_insertion_point(field_add_mutable:consfea.ConsFeaQuery.cur_ad_history)
  return _internal_add_cur_ad_history();
}
inline const std::string& ConsFeaQuery::_internal_cur_ad_history(int index) const {
  return cur_ad_history_.Get(index);
}
inline const std::string& ConsFeaQuery::cur_ad_history(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.cur_ad_history)
  return _internal_cur_ad_history(index);
}
inline std::string* ConsFeaQuery::mutable_cur_ad_history(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.cur_ad_history)
  return cur_ad_history_.Mutable(index);
}
inline void ConsFeaQuery::set_cur_ad_history(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.cur_ad_history)
  cur_ad_history_.Mutable(index)->assign(value);
}
inline void ConsFeaQuery::set_cur_ad_history(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.cur_ad_history)
  cur_ad_history_.Mutable(index)->assign(std::move(value));
}
inline void ConsFeaQuery::set_cur_ad_history(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cur_ad_history_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.cur_ad_history)
}
inline void ConsFeaQuery::set_cur_ad_history(int index, const char* value, size_t size) {
  cur_ad_history_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.cur_ad_history)
}
inline std::string* ConsFeaQuery::_internal_add_cur_ad_history() {
  return cur_ad_history_.Add();
}
inline void ConsFeaQuery::add_cur_ad_history(const std::string& value) {
  cur_ad_history_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.cur_ad_history)
}
inline void ConsFeaQuery::add_cur_ad_history(std::string&& value) {
  cur_ad_history_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.cur_ad_history)
}
inline void ConsFeaQuery::add_cur_ad_history(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cur_ad_history_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:consfea.ConsFeaQuery.cur_ad_history)
}
inline void ConsFeaQuery::add_cur_ad_history(const char* value, size_t size) {
  cur_ad_history_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:consfea.ConsFeaQuery.cur_ad_history)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConsFeaQuery::cur_ad_history() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaQuery.cur_ad_history)
  return cur_ad_history_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConsFeaQuery::mutable_cur_ad_history() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaQuery.cur_ad_history)
  return &cur_ad_history_;
}

// optional string ad_show_clk_num = 15;
inline bool ConsFeaQuery::_internal_has_ad_show_clk_num() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ConsFeaQuery::has_ad_show_clk_num() const {
  return _internal_has_ad_show_clk_num();
}
inline void ConsFeaQuery::clear_ad_show_clk_num() {
  ad_show_clk_num_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ConsFeaQuery::ad_show_clk_num() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.ad_show_clk_num)
  return _internal_ad_show_clk_num();
}
inline void ConsFeaQuery::set_ad_show_clk_num(const std::string& value) {
  _internal_set_ad_show_clk_num(value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.ad_show_clk_num)
}
inline std::string* ConsFeaQuery::mutable_ad_show_clk_num() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.ad_show_clk_num)
  return _internal_mutable_ad_show_clk_num();
}
inline const std::string& ConsFeaQuery::_internal_ad_show_clk_num() const {
  return ad_show_clk_num_.Get();
}
inline void ConsFeaQuery::_internal_set_ad_show_clk_num(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  ad_show_clk_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConsFeaQuery::set_ad_show_clk_num(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  ad_show_clk_num_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.ConsFeaQuery.ad_show_clk_num)
}
inline void ConsFeaQuery::set_ad_show_clk_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  ad_show_clk_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.ad_show_clk_num)
}
inline void ConsFeaQuery::set_ad_show_clk_num(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  ad_show_clk_num_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.ad_show_clk_num)
}
inline std::string* ConsFeaQuery::_internal_mutable_ad_show_clk_num() {
  _has_bits_[0] |= 0x00000020u;
  return ad_show_clk_num_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConsFeaQuery::release_ad_show_clk_num() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaQuery.ad_show_clk_num)
  if (!_internal_has_ad_show_clk_num()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return ad_show_clk_num_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConsFeaQuery::set_allocated_ad_show_clk_num(std::string* ad_show_clk_num) {
  if (ad_show_clk_num != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  ad_show_clk_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ad_show_clk_num,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaQuery.ad_show_clk_num)
}
inline std::string* ConsFeaQuery::unsafe_arena_release_ad_show_clk_num() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.ConsFeaQuery.ad_show_clk_num)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return ad_show_clk_num_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConsFeaQuery::unsafe_arena_set_allocated_ad_show_clk_num(
    std::string* ad_show_clk_num) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ad_show_clk_num != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  ad_show_clk_num_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ad_show_clk_num, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaQuery.ad_show_clk_num)
}

// repeated string ad_pos_clk = 16;
inline int ConsFeaQuery::_internal_ad_pos_clk_size() const {
  return ad_pos_clk_.size();
}
inline int ConsFeaQuery::ad_pos_clk_size() const {
  return _internal_ad_pos_clk_size();
}
inline void ConsFeaQuery::clear_ad_pos_clk() {
  ad_pos_clk_.Clear();
}
inline std::string* ConsFeaQuery::add_ad_pos_clk() {
  // @@protoc_insertion_point(field_add_mutable:consfea.ConsFeaQuery.ad_pos_clk)
  return _internal_add_ad_pos_clk();
}
inline const std::string& ConsFeaQuery::_internal_ad_pos_clk(int index) const {
  return ad_pos_clk_.Get(index);
}
inline const std::string& ConsFeaQuery::ad_pos_clk(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.ad_pos_clk)
  return _internal_ad_pos_clk(index);
}
inline std::string* ConsFeaQuery::mutable_ad_pos_clk(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.ad_pos_clk)
  return ad_pos_clk_.Mutable(index);
}
inline void ConsFeaQuery::set_ad_pos_clk(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.ad_pos_clk)
  ad_pos_clk_.Mutable(index)->assign(value);
}
inline void ConsFeaQuery::set_ad_pos_clk(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.ad_pos_clk)
  ad_pos_clk_.Mutable(index)->assign(std::move(value));
}
inline void ConsFeaQuery::set_ad_pos_clk(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ad_pos_clk_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.ad_pos_clk)
}
inline void ConsFeaQuery::set_ad_pos_clk(int index, const char* value, size_t size) {
  ad_pos_clk_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.ad_pos_clk)
}
inline std::string* ConsFeaQuery::_internal_add_ad_pos_clk() {
  return ad_pos_clk_.Add();
}
inline void ConsFeaQuery::add_ad_pos_clk(const std::string& value) {
  ad_pos_clk_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.ad_pos_clk)
}
inline void ConsFeaQuery::add_ad_pos_clk(std::string&& value) {
  ad_pos_clk_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.ad_pos_clk)
}
inline void ConsFeaQuery::add_ad_pos_clk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ad_pos_clk_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:consfea.ConsFeaQuery.ad_pos_clk)
}
inline void ConsFeaQuery::add_ad_pos_clk(const char* value, size_t size) {
  ad_pos_clk_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:consfea.ConsFeaQuery.ad_pos_clk)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConsFeaQuery::ad_pos_clk() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaQuery.ad_pos_clk)
  return ad_pos_clk_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConsFeaQuery::mutable_ad_pos_clk() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaQuery.ad_pos_clk)
  return &ad_pos_clk_;
}

// repeated uint32 last_click_query = 17;
inline int ConsFeaQuery::_internal_last_click_query_size() const {
  return last_click_query_.size();
}
inline int ConsFeaQuery::last_click_query_size() const {
  return _internal_last_click_query_size();
}
inline void ConsFeaQuery::clear_last_click_query() {
  last_click_query_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsFeaQuery::_internal_last_click_query(int index) const {
  return last_click_query_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsFeaQuery::last_click_query(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.last_click_query)
  return _internal_last_click_query(index);
}
inline void ConsFeaQuery::set_last_click_query(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  last_click_query_.Set(index, value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.last_click_query)
}
inline void ConsFeaQuery::_internal_add_last_click_query(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  last_click_query_.Add(value);
}
inline void ConsFeaQuery::add_last_click_query(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_last_click_query(value);
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.last_click_query)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConsFeaQuery::_internal_last_click_query() const {
  return last_click_query_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ConsFeaQuery::last_click_query() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaQuery.last_click_query)
  return _internal_last_click_query();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConsFeaQuery::_internal_mutable_last_click_query() {
  return &last_click_query_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ConsFeaQuery::mutable_last_click_query() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaQuery.last_click_query)
  return _internal_mutable_last_click_query();
}

// optional uint32 last_click_query_term_match_query_num = 18;
inline bool ConsFeaQuery::_internal_has_last_click_query_term_match_query_num() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ConsFeaQuery::has_last_click_query_term_match_query_num() const {
  return _internal_has_last_click_query_term_match_query_num();
}
inline void ConsFeaQuery::clear_last_click_query_term_match_query_num() {
  last_click_query_term_match_query_num_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsFeaQuery::_internal_last_click_query_term_match_query_num() const {
  return last_click_query_term_match_query_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsFeaQuery::last_click_query_term_match_query_num() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.last_click_query_term_match_query_num)
  return _internal_last_click_query_term_match_query_num();
}
inline void ConsFeaQuery::_internal_set_last_click_query_term_match_query_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  last_click_query_term_match_query_num_ = value;
}
inline void ConsFeaQuery::set_last_click_query_term_match_query_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_click_query_term_match_query_num(value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.last_click_query_term_match_query_num)
}

// optional uint32 last_click_query_term_match_title_num = 19;
inline bool ConsFeaQuery::_internal_has_last_click_query_term_match_title_num() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ConsFeaQuery::has_last_click_query_term_match_title_num() const {
  return _internal_has_last_click_query_term_match_title_num();
}
inline void ConsFeaQuery::clear_last_click_query_term_match_title_num() {
  last_click_query_term_match_title_num_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsFeaQuery::_internal_last_click_query_term_match_title_num() const {
  return last_click_query_term_match_title_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsFeaQuery::last_click_query_term_match_title_num() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.last_click_query_term_match_title_num)
  return _internal_last_click_query_term_match_title_num();
}
inline void ConsFeaQuery::_internal_set_last_click_query_term_match_title_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  last_click_query_term_match_title_num_ = value;
}
inline void ConsFeaQuery::set_last_click_query_term_match_title_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_click_query_term_match_title_num(value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.last_click_query_term_match_title_num)
}

// optional string pre1_ad_clk_gap = 20;
inline bool ConsFeaQuery::_internal_has_pre1_ad_clk_gap() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ConsFeaQuery::has_pre1_ad_clk_gap() const {
  return _internal_has_pre1_ad_clk_gap();
}
inline void ConsFeaQuery::clear_pre1_ad_clk_gap() {
  pre1_ad_clk_gap_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ConsFeaQuery::pre1_ad_clk_gap() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.pre1_ad_clk_gap)
  return _internal_pre1_ad_clk_gap();
}
inline void ConsFeaQuery::set_pre1_ad_clk_gap(const std::string& value) {
  _internal_set_pre1_ad_clk_gap(value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.pre1_ad_clk_gap)
}
inline std::string* ConsFeaQuery::mutable_pre1_ad_clk_gap() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.pre1_ad_clk_gap)
  return _internal_mutable_pre1_ad_clk_gap();
}
inline const std::string& ConsFeaQuery::_internal_pre1_ad_clk_gap() const {
  return pre1_ad_clk_gap_.Get();
}
inline void ConsFeaQuery::_internal_set_pre1_ad_clk_gap(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  pre1_ad_clk_gap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConsFeaQuery::set_pre1_ad_clk_gap(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  pre1_ad_clk_gap_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.ConsFeaQuery.pre1_ad_clk_gap)
}
inline void ConsFeaQuery::set_pre1_ad_clk_gap(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  pre1_ad_clk_gap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.pre1_ad_clk_gap)
}
inline void ConsFeaQuery::set_pre1_ad_clk_gap(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  pre1_ad_clk_gap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.pre1_ad_clk_gap)
}
inline std::string* ConsFeaQuery::_internal_mutable_pre1_ad_clk_gap() {
  _has_bits_[0] |= 0x00000040u;
  return pre1_ad_clk_gap_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConsFeaQuery::release_pre1_ad_clk_gap() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaQuery.pre1_ad_clk_gap)
  if (!_internal_has_pre1_ad_clk_gap()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return pre1_ad_clk_gap_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConsFeaQuery::set_allocated_pre1_ad_clk_gap(std::string* pre1_ad_clk_gap) {
  if (pre1_ad_clk_gap != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  pre1_ad_clk_gap_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre1_ad_clk_gap,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaQuery.pre1_ad_clk_gap)
}
inline std::string* ConsFeaQuery::unsafe_arena_release_pre1_ad_clk_gap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.ConsFeaQuery.pre1_ad_clk_gap)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return pre1_ad_clk_gap_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConsFeaQuery::unsafe_arena_set_allocated_pre1_ad_clk_gap(
    std::string* pre1_ad_clk_gap) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pre1_ad_clk_gap != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  pre1_ad_clk_gap_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pre1_ad_clk_gap, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaQuery.pre1_ad_clk_gap)
}

// optional .consfea.Pre1Bidword pre1_bidword = 21;
inline bool ConsFeaQuery::_internal_has_pre1_bidword() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || pre1_bidword_ != nullptr);
  return value;
}
inline bool ConsFeaQuery::has_pre1_bidword() const {
  return _internal_has_pre1_bidword();
}
inline void ConsFeaQuery::clear_pre1_bidword() {
  if (pre1_bidword_ != nullptr) pre1_bidword_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::consfea::Pre1Bidword& ConsFeaQuery::_internal_pre1_bidword() const {
  const ::consfea::Pre1Bidword* p = pre1_bidword_;
  return p != nullptr ? *p : *reinterpret_cast<const ::consfea::Pre1Bidword*>(
      &::consfea::_Pre1Bidword_default_instance_);
}
inline const ::consfea::Pre1Bidword& ConsFeaQuery::pre1_bidword() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.pre1_bidword)
  return _internal_pre1_bidword();
}
inline void ConsFeaQuery::unsafe_arena_set_allocated_pre1_bidword(
    ::consfea::Pre1Bidword* pre1_bidword) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pre1_bidword_);
  }
  pre1_bidword_ = pre1_bidword;
  if (pre1_bidword) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaQuery.pre1_bidword)
}
inline ::consfea::Pre1Bidword* ConsFeaQuery::release_pre1_bidword() {
  auto temp = unsafe_arena_release_pre1_bidword();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::consfea::Pre1Bidword* ConsFeaQuery::unsafe_arena_release_pre1_bidword() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaQuery.pre1_bidword)
  _has_bits_[0] &= ~0x00000800u;
  ::consfea::Pre1Bidword* temp = pre1_bidword_;
  pre1_bidword_ = nullptr;
  return temp;
}
inline ::consfea::Pre1Bidword* ConsFeaQuery::_internal_mutable_pre1_bidword() {
  _has_bits_[0] |= 0x00000800u;
  if (pre1_bidword_ == nullptr) {
    auto* p = CreateMaybeMessage<::consfea::Pre1Bidword>(GetArena());
    pre1_bidword_ = p;
  }
  return pre1_bidword_;
}
inline ::consfea::Pre1Bidword* ConsFeaQuery::mutable_pre1_bidword() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.pre1_bidword)
  return _internal_mutable_pre1_bidword();
}
inline void ConsFeaQuery::set_allocated_pre1_bidword(::consfea::Pre1Bidword* pre1_bidword) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pre1_bidword_;
  }
  if (pre1_bidword) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pre1_bidword);
    if (message_arena != submessage_arena) {
      pre1_bidword = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pre1_bidword, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  pre1_bidword_ = pre1_bidword;
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaQuery.pre1_bidword)
}

// optional .consfea.TopClickQueryTerm top_click_query_term = 22;
inline bool ConsFeaQuery::_internal_has_top_click_query_term() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || top_click_query_term_ != nullptr);
  return value;
}
inline bool ConsFeaQuery::has_top_click_query_term() const {
  return _internal_has_top_click_query_term();
}
inline void ConsFeaQuery::clear_top_click_query_term() {
  if (top_click_query_term_ != nullptr) top_click_query_term_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::consfea::TopClickQueryTerm& ConsFeaQuery::_internal_top_click_query_term() const {
  const ::consfea::TopClickQueryTerm* p = top_click_query_term_;
  return p != nullptr ? *p : *reinterpret_cast<const ::consfea::TopClickQueryTerm*>(
      &::consfea::_TopClickQueryTerm_default_instance_);
}
inline const ::consfea::TopClickQueryTerm& ConsFeaQuery::top_click_query_term() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.top_click_query_term)
  return _internal_top_click_query_term();
}
inline void ConsFeaQuery::unsafe_arena_set_allocated_top_click_query_term(
    ::consfea::TopClickQueryTerm* top_click_query_term) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_click_query_term_);
  }
  top_click_query_term_ = top_click_query_term;
  if (top_click_query_term) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaQuery.top_click_query_term)
}
inline ::consfea::TopClickQueryTerm* ConsFeaQuery::release_top_click_query_term() {
  auto temp = unsafe_arena_release_top_click_query_term();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::consfea::TopClickQueryTerm* ConsFeaQuery::unsafe_arena_release_top_click_query_term() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaQuery.top_click_query_term)
  _has_bits_[0] &= ~0x00001000u;
  ::consfea::TopClickQueryTerm* temp = top_click_query_term_;
  top_click_query_term_ = nullptr;
  return temp;
}
inline ::consfea::TopClickQueryTerm* ConsFeaQuery::_internal_mutable_top_click_query_term() {
  _has_bits_[0] |= 0x00001000u;
  if (top_click_query_term_ == nullptr) {
    auto* p = CreateMaybeMessage<::consfea::TopClickQueryTerm>(GetArena());
    top_click_query_term_ = p;
  }
  return top_click_query_term_;
}
inline ::consfea::TopClickQueryTerm* ConsFeaQuery::mutable_top_click_query_term() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.top_click_query_term)
  return _internal_mutable_top_click_query_term();
}
inline void ConsFeaQuery::set_allocated_top_click_query_term(::consfea::TopClickQueryTerm* top_click_query_term) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete top_click_query_term_;
  }
  if (top_click_query_term) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(top_click_query_term);
    if (message_arena != submessage_arena) {
      top_click_query_term = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_click_query_term, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  top_click_query_term_ = top_click_query_term;
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaQuery.top_click_query_term)
}

// repeated string clk_ad_style_info_history = 23;
inline int ConsFeaQuery::_internal_clk_ad_style_info_history_size() const {
  return clk_ad_style_info_history_.size();
}
inline int ConsFeaQuery::clk_ad_style_info_history_size() const {
  return _internal_clk_ad_style_info_history_size();
}
inline void ConsFeaQuery::clear_clk_ad_style_info_history() {
  clk_ad_style_info_history_.Clear();
}
inline std::string* ConsFeaQuery::add_clk_ad_style_info_history() {
  // @@protoc_insertion_point(field_add_mutable:consfea.ConsFeaQuery.clk_ad_style_info_history)
  return _internal_add_clk_ad_style_info_history();
}
inline const std::string& ConsFeaQuery::_internal_clk_ad_style_info_history(int index) const {
  return clk_ad_style_info_history_.Get(index);
}
inline const std::string& ConsFeaQuery::clk_ad_style_info_history(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.clk_ad_style_info_history)
  return _internal_clk_ad_style_info_history(index);
}
inline std::string* ConsFeaQuery::mutable_clk_ad_style_info_history(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.clk_ad_style_info_history)
  return clk_ad_style_info_history_.Mutable(index);
}
inline void ConsFeaQuery::set_clk_ad_style_info_history(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.clk_ad_style_info_history)
  clk_ad_style_info_history_.Mutable(index)->assign(value);
}
inline void ConsFeaQuery::set_clk_ad_style_info_history(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.clk_ad_style_info_history)
  clk_ad_style_info_history_.Mutable(index)->assign(std::move(value));
}
inline void ConsFeaQuery::set_clk_ad_style_info_history(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clk_ad_style_info_history_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.clk_ad_style_info_history)
}
inline void ConsFeaQuery::set_clk_ad_style_info_history(int index, const char* value, size_t size) {
  clk_ad_style_info_history_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.clk_ad_style_info_history)
}
inline std::string* ConsFeaQuery::_internal_add_clk_ad_style_info_history() {
  return clk_ad_style_info_history_.Add();
}
inline void ConsFeaQuery::add_clk_ad_style_info_history(const std::string& value) {
  clk_ad_style_info_history_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.clk_ad_style_info_history)
}
inline void ConsFeaQuery::add_clk_ad_style_info_history(std::string&& value) {
  clk_ad_style_info_history_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.clk_ad_style_info_history)
}
inline void ConsFeaQuery::add_clk_ad_style_info_history(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clk_ad_style_info_history_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:consfea.ConsFeaQuery.clk_ad_style_info_history)
}
inline void ConsFeaQuery::add_clk_ad_style_info_history(const char* value, size_t size) {
  clk_ad_style_info_history_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:consfea.ConsFeaQuery.clk_ad_style_info_history)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConsFeaQuery::clk_ad_style_info_history() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaQuery.clk_ad_style_info_history)
  return clk_ad_style_info_history_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConsFeaQuery::mutable_clk_ad_style_info_history() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaQuery.clk_ad_style_info_history)
  return &clk_ad_style_info_history_;
}

// repeated string cur_ad_style_history = 24;
inline int ConsFeaQuery::_internal_cur_ad_style_history_size() const {
  return cur_ad_style_history_.size();
}
inline int ConsFeaQuery::cur_ad_style_history_size() const {
  return _internal_cur_ad_style_history_size();
}
inline void ConsFeaQuery::clear_cur_ad_style_history() {
  cur_ad_style_history_.Clear();
}
inline std::string* ConsFeaQuery::add_cur_ad_style_history() {
  // @@protoc_insertion_point(field_add_mutable:consfea.ConsFeaQuery.cur_ad_style_history)
  return _internal_add_cur_ad_style_history();
}
inline const std::string& ConsFeaQuery::_internal_cur_ad_style_history(int index) const {
  return cur_ad_style_history_.Get(index);
}
inline const std::string& ConsFeaQuery::cur_ad_style_history(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.cur_ad_style_history)
  return _internal_cur_ad_style_history(index);
}
inline std::string* ConsFeaQuery::mutable_cur_ad_style_history(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.cur_ad_style_history)
  return cur_ad_style_history_.Mutable(index);
}
inline void ConsFeaQuery::set_cur_ad_style_history(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.cur_ad_style_history)
  cur_ad_style_history_.Mutable(index)->assign(value);
}
inline void ConsFeaQuery::set_cur_ad_style_history(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.cur_ad_style_history)
  cur_ad_style_history_.Mutable(index)->assign(std::move(value));
}
inline void ConsFeaQuery::set_cur_ad_style_history(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cur_ad_style_history_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.cur_ad_style_history)
}
inline void ConsFeaQuery::set_cur_ad_style_history(int index, const char* value, size_t size) {
  cur_ad_style_history_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.cur_ad_style_history)
}
inline std::string* ConsFeaQuery::_internal_add_cur_ad_style_history() {
  return cur_ad_style_history_.Add();
}
inline void ConsFeaQuery::add_cur_ad_style_history(const std::string& value) {
  cur_ad_style_history_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.cur_ad_style_history)
}
inline void ConsFeaQuery::add_cur_ad_style_history(std::string&& value) {
  cur_ad_style_history_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.cur_ad_style_history)
}
inline void ConsFeaQuery::add_cur_ad_style_history(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cur_ad_style_history_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:consfea.ConsFeaQuery.cur_ad_style_history)
}
inline void ConsFeaQuery::add_cur_ad_style_history(const char* value, size_t size) {
  cur_ad_style_history_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:consfea.ConsFeaQuery.cur_ad_style_history)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConsFeaQuery::cur_ad_style_history() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaQuery.cur_ad_style_history)
  return cur_ad_style_history_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConsFeaQuery::mutable_cur_ad_style_history() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaQuery.cur_ad_style_history)
  return &cur_ad_style_history_;
}

// repeated string cur_ad_component_history = 25;
inline int ConsFeaQuery::_internal_cur_ad_component_history_size() const {
  return cur_ad_component_history_.size();
}
inline int ConsFeaQuery::cur_ad_component_history_size() const {
  return _internal_cur_ad_component_history_size();
}
inline void ConsFeaQuery::clear_cur_ad_component_history() {
  cur_ad_component_history_.Clear();
}
inline std::string* ConsFeaQuery::add_cur_ad_component_history() {
  // @@protoc_insertion_point(field_add_mutable:consfea.ConsFeaQuery.cur_ad_component_history)
  return _internal_add_cur_ad_component_history();
}
inline const std::string& ConsFeaQuery::_internal_cur_ad_component_history(int index) const {
  return cur_ad_component_history_.Get(index);
}
inline const std::string& ConsFeaQuery::cur_ad_component_history(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaQuery.cur_ad_component_history)
  return _internal_cur_ad_component_history(index);
}
inline std::string* ConsFeaQuery::mutable_cur_ad_component_history(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaQuery.cur_ad_component_history)
  return cur_ad_component_history_.Mutable(index);
}
inline void ConsFeaQuery::set_cur_ad_component_history(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.cur_ad_component_history)
  cur_ad_component_history_.Mutable(index)->assign(value);
}
inline void ConsFeaQuery::set_cur_ad_component_history(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:consfea.ConsFeaQuery.cur_ad_component_history)
  cur_ad_component_history_.Mutable(index)->assign(std::move(value));
}
inline void ConsFeaQuery::set_cur_ad_component_history(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cur_ad_component_history_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaQuery.cur_ad_component_history)
}
inline void ConsFeaQuery::set_cur_ad_component_history(int index, const char* value, size_t size) {
  cur_ad_component_history_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaQuery.cur_ad_component_history)
}
inline std::string* ConsFeaQuery::_internal_add_cur_ad_component_history() {
  return cur_ad_component_history_.Add();
}
inline void ConsFeaQuery::add_cur_ad_component_history(const std::string& value) {
  cur_ad_component_history_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.cur_ad_component_history)
}
inline void ConsFeaQuery::add_cur_ad_component_history(std::string&& value) {
  cur_ad_component_history_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:consfea.ConsFeaQuery.cur_ad_component_history)
}
inline void ConsFeaQuery::add_cur_ad_component_history(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cur_ad_component_history_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:consfea.ConsFeaQuery.cur_ad_component_history)
}
inline void ConsFeaQuery::add_cur_ad_component_history(const char* value, size_t size) {
  cur_ad_component_history_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:consfea.ConsFeaQuery.cur_ad_component_history)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConsFeaQuery::cur_ad_component_history() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaQuery.cur_ad_component_history)
  return cur_ad_component_history_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConsFeaQuery::mutable_cur_ad_component_history() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaQuery.cur_ad_component_history)
  return &cur_ad_component_history_;
}

// -------------------------------------------------------------------

// ConsFeaAd

// repeated .consfea.HisQueryTermAd his_query_term_ad = 1;
inline int ConsFeaAd::_internal_his_query_term_ad_size() const {
  return his_query_term_ad_.size();
}
inline int ConsFeaAd::his_query_term_ad_size() const {
  return _internal_his_query_term_ad_size();
}
inline void ConsFeaAd::clear_his_query_term_ad() {
  his_query_term_ad_.Clear();
}
inline ::consfea::HisQueryTermAd* ConsFeaAd::mutable_his_query_term_ad(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaAd.his_query_term_ad)
  return his_query_term_ad_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::HisQueryTermAd >*
ConsFeaAd::mutable_his_query_term_ad() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaAd.his_query_term_ad)
  return &his_query_term_ad_;
}
inline const ::consfea::HisQueryTermAd& ConsFeaAd::_internal_his_query_term_ad(int index) const {
  return his_query_term_ad_.Get(index);
}
inline const ::consfea::HisQueryTermAd& ConsFeaAd::his_query_term_ad(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaAd.his_query_term_ad)
  return _internal_his_query_term_ad(index);
}
inline ::consfea::HisQueryTermAd* ConsFeaAd::_internal_add_his_query_term_ad() {
  return his_query_term_ad_.Add();
}
inline ::consfea::HisQueryTermAd* ConsFeaAd::add_his_query_term_ad() {
  // @@protoc_insertion_point(field_add:consfea.ConsFeaAd.his_query_term_ad)
  return _internal_add_his_query_term_ad();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::HisQueryTermAd >&
ConsFeaAd::his_query_term_ad() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaAd.his_query_term_ad)
  return his_query_term_ad_;
}

// repeated .consfea.CurAdClickedAd cur_ad_clicked_ad = 2;
inline int ConsFeaAd::_internal_cur_ad_clicked_ad_size() const {
  return cur_ad_clicked_ad_.size();
}
inline int ConsFeaAd::cur_ad_clicked_ad_size() const {
  return _internal_cur_ad_clicked_ad_size();
}
inline void ConsFeaAd::clear_cur_ad_clicked_ad() {
  cur_ad_clicked_ad_.Clear();
}
inline ::consfea::CurAdClickedAd* ConsFeaAd::mutable_cur_ad_clicked_ad(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaAd.cur_ad_clicked_ad)
  return cur_ad_clicked_ad_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdClickedAd >*
ConsFeaAd::mutable_cur_ad_clicked_ad() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaAd.cur_ad_clicked_ad)
  return &cur_ad_clicked_ad_;
}
inline const ::consfea::CurAdClickedAd& ConsFeaAd::_internal_cur_ad_clicked_ad(int index) const {
  return cur_ad_clicked_ad_.Get(index);
}
inline const ::consfea::CurAdClickedAd& ConsFeaAd::cur_ad_clicked_ad(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaAd.cur_ad_clicked_ad)
  return _internal_cur_ad_clicked_ad(index);
}
inline ::consfea::CurAdClickedAd* ConsFeaAd::_internal_add_cur_ad_clicked_ad() {
  return cur_ad_clicked_ad_.Add();
}
inline ::consfea::CurAdClickedAd* ConsFeaAd::add_cur_ad_clicked_ad() {
  // @@protoc_insertion_point(field_add:consfea.ConsFeaAd.cur_ad_clicked_ad)
  return _internal_add_cur_ad_clicked_ad();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdClickedAd >&
ConsFeaAd::cur_ad_clicked_ad() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaAd.cur_ad_clicked_ad)
  return cur_ad_clicked_ad_;
}

// repeated .consfea.CurAdHistoryAd cur_ad_history_ad = 3;
inline int ConsFeaAd::_internal_cur_ad_history_ad_size() const {
  return cur_ad_history_ad_.size();
}
inline int ConsFeaAd::cur_ad_history_ad_size() const {
  return _internal_cur_ad_history_ad_size();
}
inline void ConsFeaAd::clear_cur_ad_history_ad() {
  cur_ad_history_ad_.Clear();
}
inline ::consfea::CurAdHistoryAd* ConsFeaAd::mutable_cur_ad_history_ad(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaAd.cur_ad_history_ad)
  return cur_ad_history_ad_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdHistoryAd >*
ConsFeaAd::mutable_cur_ad_history_ad() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaAd.cur_ad_history_ad)
  return &cur_ad_history_ad_;
}
inline const ::consfea::CurAdHistoryAd& ConsFeaAd::_internal_cur_ad_history_ad(int index) const {
  return cur_ad_history_ad_.Get(index);
}
inline const ::consfea::CurAdHistoryAd& ConsFeaAd::cur_ad_history_ad(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaAd.cur_ad_history_ad)
  return _internal_cur_ad_history_ad(index);
}
inline ::consfea::CurAdHistoryAd* ConsFeaAd::_internal_add_cur_ad_history_ad() {
  return cur_ad_history_ad_.Add();
}
inline ::consfea::CurAdHistoryAd* ConsFeaAd::add_cur_ad_history_ad() {
  // @@protoc_insertion_point(field_add:consfea.ConsFeaAd.cur_ad_history_ad)
  return _internal_add_cur_ad_history_ad();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdHistoryAd >&
ConsFeaAd::cur_ad_history_ad() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaAd.cur_ad_history_ad)
  return cur_ad_history_ad_;
}

// repeated .consfea.LastClickQueryTermMatchTitleNumAd last_click_query_term_match_title_num_ad = 4;
inline int ConsFeaAd::_internal_last_click_query_term_match_title_num_ad_size() const {
  return last_click_query_term_match_title_num_ad_.size();
}
inline int ConsFeaAd::last_click_query_term_match_title_num_ad_size() const {
  return _internal_last_click_query_term_match_title_num_ad_size();
}
inline void ConsFeaAd::clear_last_click_query_term_match_title_num_ad() {
  last_click_query_term_match_title_num_ad_.Clear();
}
inline ::consfea::LastClickQueryTermMatchTitleNumAd* ConsFeaAd::mutable_last_click_query_term_match_title_num_ad(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaAd.last_click_query_term_match_title_num_ad)
  return last_click_query_term_match_title_num_ad_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::LastClickQueryTermMatchTitleNumAd >*
ConsFeaAd::mutable_last_click_query_term_match_title_num_ad() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaAd.last_click_query_term_match_title_num_ad)
  return &last_click_query_term_match_title_num_ad_;
}
inline const ::consfea::LastClickQueryTermMatchTitleNumAd& ConsFeaAd::_internal_last_click_query_term_match_title_num_ad(int index) const {
  return last_click_query_term_match_title_num_ad_.Get(index);
}
inline const ::consfea::LastClickQueryTermMatchTitleNumAd& ConsFeaAd::last_click_query_term_match_title_num_ad(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaAd.last_click_query_term_match_title_num_ad)
  return _internal_last_click_query_term_match_title_num_ad(index);
}
inline ::consfea::LastClickQueryTermMatchTitleNumAd* ConsFeaAd::_internal_add_last_click_query_term_match_title_num_ad() {
  return last_click_query_term_match_title_num_ad_.Add();
}
inline ::consfea::LastClickQueryTermMatchTitleNumAd* ConsFeaAd::add_last_click_query_term_match_title_num_ad() {
  // @@protoc_insertion_point(field_add:consfea.ConsFeaAd.last_click_query_term_match_title_num_ad)
  return _internal_add_last_click_query_term_match_title_num_ad();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::LastClickQueryTermMatchTitleNumAd >&
ConsFeaAd::last_click_query_term_match_title_num_ad() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaAd.last_click_query_term_match_title_num_ad)
  return last_click_query_term_match_title_num_ad_;
}

// repeated .consfea.Pre1BidwordAd pre1_bidword_ad = 5;
inline int ConsFeaAd::_internal_pre1_bidword_ad_size() const {
  return pre1_bidword_ad_.size();
}
inline int ConsFeaAd::pre1_bidword_ad_size() const {
  return _internal_pre1_bidword_ad_size();
}
inline void ConsFeaAd::clear_pre1_bidword_ad() {
  pre1_bidword_ad_.Clear();
}
inline ::consfea::Pre1BidwordAd* ConsFeaAd::mutable_pre1_bidword_ad(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaAd.pre1_bidword_ad)
  return pre1_bidword_ad_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::Pre1BidwordAd >*
ConsFeaAd::mutable_pre1_bidword_ad() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaAd.pre1_bidword_ad)
  return &pre1_bidword_ad_;
}
inline const ::consfea::Pre1BidwordAd& ConsFeaAd::_internal_pre1_bidword_ad(int index) const {
  return pre1_bidword_ad_.Get(index);
}
inline const ::consfea::Pre1BidwordAd& ConsFeaAd::pre1_bidword_ad(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaAd.pre1_bidword_ad)
  return _internal_pre1_bidword_ad(index);
}
inline ::consfea::Pre1BidwordAd* ConsFeaAd::_internal_add_pre1_bidword_ad() {
  return pre1_bidword_ad_.Add();
}
inline ::consfea::Pre1BidwordAd* ConsFeaAd::add_pre1_bidword_ad() {
  // @@protoc_insertion_point(field_add:consfea.ConsFeaAd.pre1_bidword_ad)
  return _internal_add_pre1_bidword_ad();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::Pre1BidwordAd >&
ConsFeaAd::pre1_bidword_ad() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaAd.pre1_bidword_ad)
  return pre1_bidword_ad_;
}

// repeated .consfea.TopClickQueryTermAd top_click_query_term_ad = 6;
inline int ConsFeaAd::_internal_top_click_query_term_ad_size() const {
  return top_click_query_term_ad_.size();
}
inline int ConsFeaAd::top_click_query_term_ad_size() const {
  return _internal_top_click_query_term_ad_size();
}
inline void ConsFeaAd::clear_top_click_query_term_ad() {
  top_click_query_term_ad_.Clear();
}
inline ::consfea::TopClickQueryTermAd* ConsFeaAd::mutable_top_click_query_term_ad(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaAd.top_click_query_term_ad)
  return top_click_query_term_ad_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::TopClickQueryTermAd >*
ConsFeaAd::mutable_top_click_query_term_ad() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaAd.top_click_query_term_ad)
  return &top_click_query_term_ad_;
}
inline const ::consfea::TopClickQueryTermAd& ConsFeaAd::_internal_top_click_query_term_ad(int index) const {
  return top_click_query_term_ad_.Get(index);
}
inline const ::consfea::TopClickQueryTermAd& ConsFeaAd::top_click_query_term_ad(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaAd.top_click_query_term_ad)
  return _internal_top_click_query_term_ad(index);
}
inline ::consfea::TopClickQueryTermAd* ConsFeaAd::_internal_add_top_click_query_term_ad() {
  return top_click_query_term_ad_.Add();
}
inline ::consfea::TopClickQueryTermAd* ConsFeaAd::add_top_click_query_term_ad() {
  // @@protoc_insertion_point(field_add:consfea.ConsFeaAd.top_click_query_term_ad)
  return _internal_add_top_click_query_term_ad();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::TopClickQueryTermAd >&
ConsFeaAd::top_click_query_term_ad() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaAd.top_click_query_term_ad)
  return top_click_query_term_ad_;
}

// repeated .consfea.CurAdStyleHistoryAd cur_ad_style_history_ad = 7;
inline int ConsFeaAd::_internal_cur_ad_style_history_ad_size() const {
  return cur_ad_style_history_ad_.size();
}
inline int ConsFeaAd::cur_ad_style_history_ad_size() const {
  return _internal_cur_ad_style_history_ad_size();
}
inline void ConsFeaAd::clear_cur_ad_style_history_ad() {
  cur_ad_style_history_ad_.Clear();
}
inline ::consfea::CurAdStyleHistoryAd* ConsFeaAd::mutable_cur_ad_style_history_ad(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaAd.cur_ad_style_history_ad)
  return cur_ad_style_history_ad_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdStyleHistoryAd >*
ConsFeaAd::mutable_cur_ad_style_history_ad() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaAd.cur_ad_style_history_ad)
  return &cur_ad_style_history_ad_;
}
inline const ::consfea::CurAdStyleHistoryAd& ConsFeaAd::_internal_cur_ad_style_history_ad(int index) const {
  return cur_ad_style_history_ad_.Get(index);
}
inline const ::consfea::CurAdStyleHistoryAd& ConsFeaAd::cur_ad_style_history_ad(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaAd.cur_ad_style_history_ad)
  return _internal_cur_ad_style_history_ad(index);
}
inline ::consfea::CurAdStyleHistoryAd* ConsFeaAd::_internal_add_cur_ad_style_history_ad() {
  return cur_ad_style_history_ad_.Add();
}
inline ::consfea::CurAdStyleHistoryAd* ConsFeaAd::add_cur_ad_style_history_ad() {
  // @@protoc_insertion_point(field_add:consfea.ConsFeaAd.cur_ad_style_history_ad)
  return _internal_add_cur_ad_style_history_ad();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdStyleHistoryAd >&
ConsFeaAd::cur_ad_style_history_ad() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaAd.cur_ad_style_history_ad)
  return cur_ad_style_history_ad_;
}

// repeated .consfea.CurAdComponentHistoryAd cur_ad_component_history_ad = 8;
inline int ConsFeaAd::_internal_cur_ad_component_history_ad_size() const {
  return cur_ad_component_history_ad_.size();
}
inline int ConsFeaAd::cur_ad_component_history_ad_size() const {
  return _internal_cur_ad_component_history_ad_size();
}
inline void ConsFeaAd::clear_cur_ad_component_history_ad() {
  cur_ad_component_history_ad_.Clear();
}
inline ::consfea::CurAdComponentHistoryAd* ConsFeaAd::mutable_cur_ad_component_history_ad(int index) {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaAd.cur_ad_component_history_ad)
  return cur_ad_component_history_ad_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdComponentHistoryAd >*
ConsFeaAd::mutable_cur_ad_component_history_ad() {
  // @@protoc_insertion_point(field_mutable_list:consfea.ConsFeaAd.cur_ad_component_history_ad)
  return &cur_ad_component_history_ad_;
}
inline const ::consfea::CurAdComponentHistoryAd& ConsFeaAd::_internal_cur_ad_component_history_ad(int index) const {
  return cur_ad_component_history_ad_.Get(index);
}
inline const ::consfea::CurAdComponentHistoryAd& ConsFeaAd::cur_ad_component_history_ad(int index) const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaAd.cur_ad_component_history_ad)
  return _internal_cur_ad_component_history_ad(index);
}
inline ::consfea::CurAdComponentHistoryAd* ConsFeaAd::_internal_add_cur_ad_component_history_ad() {
  return cur_ad_component_history_ad_.Add();
}
inline ::consfea::CurAdComponentHistoryAd* ConsFeaAd::add_cur_ad_component_history_ad() {
  // @@protoc_insertion_point(field_add:consfea.ConsFeaAd.cur_ad_component_history_ad)
  return _internal_add_cur_ad_component_history_ad();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::consfea::CurAdComponentHistoryAd >&
ConsFeaAd::cur_ad_component_history_ad() const {
  // @@protoc_insertion_point(field_list:consfea.ConsFeaAd.cur_ad_component_history_ad)
  return cur_ad_component_history_ad_;
}

// -------------------------------------------------------------------

// ConsFeaFull

// optional string pvid = 1;
inline bool ConsFeaFull::_internal_has_pvid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConsFeaFull::has_pvid() const {
  return _internal_has_pvid();
}
inline void ConsFeaFull::clear_pvid() {
  pvid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConsFeaFull::pvid() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaFull.pvid)
  return _internal_pvid();
}
inline void ConsFeaFull::set_pvid(const std::string& value) {
  _internal_set_pvid(value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaFull.pvid)
}
inline std::string* ConsFeaFull::mutable_pvid() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaFull.pvid)
  return _internal_mutable_pvid();
}
inline const std::string& ConsFeaFull::_internal_pvid() const {
  return pvid_.Get();
}
inline void ConsFeaFull::_internal_set_pvid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pvid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConsFeaFull::set_pvid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pvid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.ConsFeaFull.pvid)
}
inline void ConsFeaFull::set_pvid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pvid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaFull.pvid)
}
inline void ConsFeaFull::set_pvid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pvid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaFull.pvid)
}
inline std::string* ConsFeaFull::_internal_mutable_pvid() {
  _has_bits_[0] |= 0x00000001u;
  return pvid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConsFeaFull::release_pvid() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaFull.pvid)
  if (!_internal_has_pvid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pvid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConsFeaFull::set_allocated_pvid(std::string* pvid) {
  if (pvid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pvid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pvid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaFull.pvid)
}
inline std::string* ConsFeaFull::unsafe_arena_release_pvid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.ConsFeaFull.pvid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return pvid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConsFeaFull::unsafe_arena_set_allocated_pvid(
    std::string* pvid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pvid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pvid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pvid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaFull.pvid)
}

// optional string query = 2;
inline bool ConsFeaFull::_internal_has_query() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConsFeaFull::has_query() const {
  return _internal_has_query();
}
inline void ConsFeaFull::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConsFeaFull::query() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaFull.query)
  return _internal_query();
}
inline void ConsFeaFull::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaFull.query)
}
inline std::string* ConsFeaFull::mutable_query() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaFull.query)
  return _internal_mutable_query();
}
inline const std::string& ConsFeaFull::_internal_query() const {
  return query_.Get();
}
inline void ConsFeaFull::_internal_set_query(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConsFeaFull::set_query(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.ConsFeaFull.query)
}
inline void ConsFeaFull::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaFull.query)
}
inline void ConsFeaFull::set_query(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaFull.query)
}
inline std::string* ConsFeaFull::_internal_mutable_query() {
  _has_bits_[0] |= 0x00000002u;
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConsFeaFull::release_query() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaFull.query)
  if (!_internal_has_query()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return query_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConsFeaFull::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaFull.query)
}
inline std::string* ConsFeaFull::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.ConsFeaFull.query)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return query_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConsFeaFull::unsafe_arena_set_allocated_query(
    std::string* query) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (query != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  query_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      query, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaFull.query)
}

// optional .consfea.ConsFeaQuery cons_fea_query = 3;
inline bool ConsFeaFull::_internal_has_cons_fea_query() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || cons_fea_query_ != nullptr);
  return value;
}
inline bool ConsFeaFull::has_cons_fea_query() const {
  return _internal_has_cons_fea_query();
}
inline void ConsFeaFull::clear_cons_fea_query() {
  if (cons_fea_query_ != nullptr) cons_fea_query_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::consfea::ConsFeaQuery& ConsFeaFull::_internal_cons_fea_query() const {
  const ::consfea::ConsFeaQuery* p = cons_fea_query_;
  return p != nullptr ? *p : *reinterpret_cast<const ::consfea::ConsFeaQuery*>(
      &::consfea::_ConsFeaQuery_default_instance_);
}
inline const ::consfea::ConsFeaQuery& ConsFeaFull::cons_fea_query() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaFull.cons_fea_query)
  return _internal_cons_fea_query();
}
inline void ConsFeaFull::unsafe_arena_set_allocated_cons_fea_query(
    ::consfea::ConsFeaQuery* cons_fea_query) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cons_fea_query_);
  }
  cons_fea_query_ = cons_fea_query;
  if (cons_fea_query) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaFull.cons_fea_query)
}
inline ::consfea::ConsFeaQuery* ConsFeaFull::release_cons_fea_query() {
  auto temp = unsafe_arena_release_cons_fea_query();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::consfea::ConsFeaQuery* ConsFeaFull::unsafe_arena_release_cons_fea_query() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaFull.cons_fea_query)
  _has_bits_[0] &= ~0x00000008u;
  ::consfea::ConsFeaQuery* temp = cons_fea_query_;
  cons_fea_query_ = nullptr;
  return temp;
}
inline ::consfea::ConsFeaQuery* ConsFeaFull::_internal_mutable_cons_fea_query() {
  _has_bits_[0] |= 0x00000008u;
  if (cons_fea_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::consfea::ConsFeaQuery>(GetArena());
    cons_fea_query_ = p;
  }
  return cons_fea_query_;
}
inline ::consfea::ConsFeaQuery* ConsFeaFull::mutable_cons_fea_query() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaFull.cons_fea_query)
  return _internal_mutable_cons_fea_query();
}
inline void ConsFeaFull::set_allocated_cons_fea_query(::consfea::ConsFeaQuery* cons_fea_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cons_fea_query_;
  }
  if (cons_fea_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cons_fea_query);
    if (message_arena != submessage_arena) {
      cons_fea_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cons_fea_query, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cons_fea_query_ = cons_fea_query;
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaFull.cons_fea_query)
}

// optional .consfea.ConsFeaAd cons_fea_ad = 4;
inline bool ConsFeaFull::_internal_has_cons_fea_ad() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || cons_fea_ad_ != nullptr);
  return value;
}
inline bool ConsFeaFull::has_cons_fea_ad() const {
  return _internal_has_cons_fea_ad();
}
inline void ConsFeaFull::clear_cons_fea_ad() {
  if (cons_fea_ad_ != nullptr) cons_fea_ad_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::consfea::ConsFeaAd& ConsFeaFull::_internal_cons_fea_ad() const {
  const ::consfea::ConsFeaAd* p = cons_fea_ad_;
  return p != nullptr ? *p : *reinterpret_cast<const ::consfea::ConsFeaAd*>(
      &::consfea::_ConsFeaAd_default_instance_);
}
inline const ::consfea::ConsFeaAd& ConsFeaFull::cons_fea_ad() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaFull.cons_fea_ad)
  return _internal_cons_fea_ad();
}
inline void ConsFeaFull::unsafe_arena_set_allocated_cons_fea_ad(
    ::consfea::ConsFeaAd* cons_fea_ad) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cons_fea_ad_);
  }
  cons_fea_ad_ = cons_fea_ad;
  if (cons_fea_ad) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaFull.cons_fea_ad)
}
inline ::consfea::ConsFeaAd* ConsFeaFull::release_cons_fea_ad() {
  auto temp = unsafe_arena_release_cons_fea_ad();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::consfea::ConsFeaAd* ConsFeaFull::unsafe_arena_release_cons_fea_ad() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaFull.cons_fea_ad)
  _has_bits_[0] &= ~0x00000010u;
  ::consfea::ConsFeaAd* temp = cons_fea_ad_;
  cons_fea_ad_ = nullptr;
  return temp;
}
inline ::consfea::ConsFeaAd* ConsFeaFull::_internal_mutable_cons_fea_ad() {
  _has_bits_[0] |= 0x00000010u;
  if (cons_fea_ad_ == nullptr) {
    auto* p = CreateMaybeMessage<::consfea::ConsFeaAd>(GetArena());
    cons_fea_ad_ = p;
  }
  return cons_fea_ad_;
}
inline ::consfea::ConsFeaAd* ConsFeaFull::mutable_cons_fea_ad() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaFull.cons_fea_ad)
  return _internal_mutable_cons_fea_ad();
}
inline void ConsFeaFull::set_allocated_cons_fea_ad(::consfea::ConsFeaAd* cons_fea_ad) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cons_fea_ad_;
  }
  if (cons_fea_ad) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cons_fea_ad);
    if (message_arena != submessage_arena) {
      cons_fea_ad = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cons_fea_ad, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cons_fea_ad_ = cons_fea_ad;
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaFull.cons_fea_ad)
}

// optional string platform = 5;
inline bool ConsFeaFull::_internal_has_platform() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConsFeaFull::has_platform() const {
  return _internal_has_platform();
}
inline void ConsFeaFull::clear_platform() {
  platform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConsFeaFull::platform() const {
  // @@protoc_insertion_point(field_get:consfea.ConsFeaFull.platform)
  return _internal_platform();
}
inline void ConsFeaFull::set_platform(const std::string& value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:consfea.ConsFeaFull.platform)
}
inline std::string* ConsFeaFull::mutable_platform() {
  // @@protoc_insertion_point(field_mutable:consfea.ConsFeaFull.platform)
  return _internal_mutable_platform();
}
inline const std::string& ConsFeaFull::_internal_platform() const {
  return platform_.Get();
}
inline void ConsFeaFull::_internal_set_platform(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConsFeaFull::set_platform(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  platform_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:consfea.ConsFeaFull.platform)
}
inline void ConsFeaFull::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:consfea.ConsFeaFull.platform)
}
inline void ConsFeaFull::set_platform(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:consfea.ConsFeaFull.platform)
}
inline std::string* ConsFeaFull::_internal_mutable_platform() {
  _has_bits_[0] |= 0x00000004u;
  return platform_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConsFeaFull::release_platform() {
  // @@protoc_insertion_point(field_release:consfea.ConsFeaFull.platform)
  if (!_internal_has_platform()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return platform_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConsFeaFull::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  platform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:consfea.ConsFeaFull.platform)
}
inline std::string* ConsFeaFull::unsafe_arena_release_platform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:consfea.ConsFeaFull.platform)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return platform_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConsFeaFull::unsafe_arena_set_allocated_platform(
    std::string* platform) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (platform != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  platform_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      platform, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:consfea.ConsFeaFull.platform)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace consfea

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_consistent_5ffeature_2eproto
